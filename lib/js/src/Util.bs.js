// Generated by ReScript, PLEASE EDIT WITH CARE
'use strict';

var Curry = require("bs-platform/lib/js/curry.js");
var Caml_option = require("bs-platform/lib/js/caml_option.js");
var Json_decode = require("@glennsl/bs-json/lib/js/src/Json_decode.bs.js");
var Caml_js_exceptions = require("bs-platform/lib/js/caml_js_exceptions.js");

function sum(decoder) {
  return function (param) {
    return Json_decode.andThen((function (tag) {
                  var d = Curry._1(decoder, tag);
                  if (d.TAG) {
                    return d._0;
                  }
                  var d$1 = d._0;
                  return function (param) {
                    return Json_decode.field("contents", d$1, param);
                  };
                }), (function (param) {
                  return Json_decode.field("tag", Json_decode.string, param);
                }), param);
  };
}

function maybe(decoder) {
  return sum(function (param) {
              if (param === "Just") {
                return {
                        TAG: 0,
                        _0: (function (json) {
                            return Caml_option.some(Curry._1(decoder, json));
                          }),
                        [Symbol.for("name")]: "Contents"
                      };
              } else {
                return {
                        TAG: 1,
                        _0: (function (param) {
                            
                          }),
                        [Symbol.for("name")]: "TagOnly"
                      };
              }
            });
}

function tuple5(decodeA, decodeB, decodeC, decodeD, decodeE, json) {
  if (Array.isArray(json)) {
    var length = json.length;
    if (length === 5) {
      try {
        return [
                Curry._1(decodeA, json[0]),
                Curry._1(decodeB, json[1]),
                Curry._1(decodeC, json[2]),
                Curry._1(decodeD, json[3]),
                Curry._1(decodeE, json[4])
              ];
      }
      catch (raw_msg){
        var msg = Caml_js_exceptions.internalToOCamlException(raw_msg);
        if (msg.RE_EXN_ID === Json_decode.DecodeError) {
          throw {
                RE_EXN_ID: Json_decode.DecodeError,
                _1: msg._1 + "\n\tin tuple5",
                Error: new Error()
              };
        }
        throw msg;
      }
    } else {
      throw {
            RE_EXN_ID: Json_decode.DecodeError,
            _1: "Expected array of length 5, got array of length " + length,
            Error: new Error()
          };
    }
  } else {
    throw {
          RE_EXN_ID: Json_decode.DecodeError,
          _1: "Expected array, got " + JSON.stringify(json),
          Error: new Error()
        };
  }
}

var Decode = {
  sum: sum,
  maybe: maybe,
  tuple5: tuple5
};

function tuple5$1(encodeA, encodeB, encodeC, encodeD, encodeE, param) {
  return [
          Curry._1(encodeA, param[0]),
          Curry._1(encodeB, param[1]),
          Curry._1(encodeC, param[2]),
          Curry._1(encodeD, param[3]),
          Curry._1(encodeE, param[4])
        ];
}

var Encode = {
  tuple5: tuple5$1
};

exports.Decode = Decode;
exports.Encode = Encode;
/* No side effect */

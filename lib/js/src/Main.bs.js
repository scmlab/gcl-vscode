// Generated by BUCKLESCRIPT, PLEASE EDIT WITH CARE
'use strict';

var Curry = require("bs-platform/lib/js/curry.js");
var Belt_Array = require("bs-platform/lib/js/belt_Array.js");
var Belt_Option = require("bs-platform/lib/js/belt_Option.js");
var Task$Guacamole = require("./Task/Task.bs.js");
var State$Guacamole = require("./State.bs.js");
var Command$Guacamole = require("./Command.bs.js");
var Registry$Guacamole = require("./Registry.bs.js");
var Caml_chrome_debugger = require("bs-platform/lib/js/caml_chrome_debugger.js");
var TaskRunner$Guacamole = require("./Task/TaskRunner.bs.js");

function Impl(Editor) {
  var States = Registry$Guacamole.Impl(Editor);
  var TaskRunner = TaskRunner$Guacamole.Impl(Editor);
  var Task = Task$Guacamole.Impl(Editor);
  var State = State$Guacamole.Impl(Editor);
  var partial_arg = /\.gcl$/i;
  var isGCL = function (param) {
    return partial_arg.test(param);
  };
  var activate = function (context) {
    Curry._2(Editor.addToSubscriptions, Curry._1(Editor.onDidCloseEditor, States.destroy), context);
    Curry._2(Editor.addToSubscriptions, Curry._1(Editor.onDidChangeFileName, (function (oldName, newName) {
                return Belt_Option.forEach(oldName, (function (oldName) {
                              return Belt_Option.forEach(newName, (function (newName) {
                                            if (Curry._1(States.contains, oldName)) {
                                              if (Curry._1(isGCL, newName)) {
                                                return Curry._2(States.rename, oldName, newName);
                                              } else {
                                                return Curry._1(States.destroy, oldName);
                                              }
                                            }
                                            
                                          }));
                            }));
              })), context);
    Curry._2(Editor.addToSubscriptions, Curry._1(Editor.onDidChangeActivation, (function (prev, next) {
                Belt_Option.forEach(Belt_Option.flatMap(prev, States.get), (function (param) {
                        return Curry._1(State.hide, param[0]);
                      }));
                return Belt_Option.forEach(Belt_Option.flatMap(next, States.get), (function (param) {
                              return Curry._1(State.show, param[0]);
                            }));
              })), context);
    Curry._2(Editor.addToSubscriptions, Curry._2(Editor.registerCommand, "toggle", (function (editor) {
                return Belt_Option.forEach(Curry._1(Editor.getFileName, editor), (function (fileName) {
                              var match = Curry._1(States.get, fileName);
                              if (match !== undefined) {
                                Curry._2(TaskRunner.addTask, match[1], /* DispatchCommand */Caml_chrome_debugger.variant("DispatchCommand", 1, [/* Quit */1]));
                                return Curry._1(States.destroy, fileName);
                              }
                              var state = Curry._2(State.make, context, editor);
                              var taskRunner = Curry._1(TaskRunner.make, state);
                              Curry._2(Editor.addToSubscriptions, Curry._2(State.onDestroy, state, (function (param) {
                                          return Curry._1(States.remove, fileName);
                                        })), context);
                              Curry._2(States.add, fileName, /* tuple */[
                                    state,
                                    taskRunner
                                  ]);
                              Curry._2(Editor.addToSubscriptions, Curry._2(Editor.View.recv, state.view, (function (response) {
                                          return Curry._2(TaskRunner.addTask, taskRunner, /* ViewResponse */Caml_chrome_debugger.variant("ViewResponse", 5, [response]));
                                        })), context);
                              return Curry._2(TaskRunner.addTask, taskRunner, /* DispatchCommand */Caml_chrome_debugger.variant("DispatchCommand", 1, [/* Load */0]));
                            }));
              })), context);
    return Belt_Array.forEach(Command$Guacamole.names, (function (param) {
                  var command = param[0];
                  return Curry._2(Editor.addToSubscriptions, Curry._2(Editor.registerCommand, param[1], (function (editor) {
                                    return Belt_Option.forEach(Curry._1(States.getByEditor, editor), (function (param) {
                                                  return Curry._2(TaskRunner.addTask, param[1], /* DispatchCommand */Caml_chrome_debugger.variant("DispatchCommand", 1, [command]));
                                                }));
                                  })), context);
                }));
  };
  var deactivate = function (param) {
    return Curry._1(States.destroyAll, undefined);
  };
  return {
          States: States,
          TaskRunner: TaskRunner,
          Task: Task,
          State: State,
          isGCL: isGCL,
          activate: activate,
          deactivate: deactivate
        };
}

exports.Impl = Impl;
/* Task-Guacamole Not a pure module */

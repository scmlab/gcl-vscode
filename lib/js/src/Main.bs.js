// Generated by ReScript, PLEASE EDIT WITH CARE
'use strict';

var Curry = require("bs-platform/lib/js/curry.js");
var VSCode = require("bs-vscode/lib/js/src/VSCode.bs.js");
var Vscode = require("vscode");
var $$Promise = require("reason-promise/lib/js/src/js/promise.bs.js");
var Belt_Array = require("bs-platform/lib/js/belt_Array.js");
var Belt_Option = require("bs-platform/lib/js/belt_Option.js");
var Json_decode = require("@glennsl/bs-json/lib/js/src/Json_decode.bs.js");
var LSP$Guacamole = require("./LSP.bs.js");
var View$Guacamole = require("./View.bs.js");
var State$Guacamole = require("./State.bs.js");
var Request$Guacamole = require("./Request.bs.js");
var Caml_js_exceptions = require("bs-platform/lib/js/caml_js_exceptions.js");
var Registry$Guacamole = require("./Registry.bs.js");
var Response$Guacamole = require("./Response.bs.js");
var VscodeLanguageclient = require("vscode-languageclient");

var partial_arg = /\.gcl$/i;

function isGCL(param) {
  return partial_arg.test(param);
}

function make(param) {
  var serverOptions = LSP$Guacamole.ServerOptions.makeCommand("gcl");
  var documentSelector = [VSCode.StringOr.others({
          language: "guacamole",
          pattern: undefined,
          scheme: "file"
        })];
  var synchronize = Vscode.workspace.createFileSystemWatcher('**/.clientrc', false, false, false);
  var clientOptions = LSP$Guacamole.LanguageClientOptions.make(documentSelector, synchronize);
  return new VscodeLanguageclient.LanguageClient("guacamoleLanguageServer", "Guacamole Language Server", serverOptions, clientOptions);
}

var client = {
  contents: make(undefined)
};

function start(param) {
  client.contents.start();
  
}

function stop(param) {
  client.contents.stop();
  
}

function decodeResponse(json) {
  try {
    return Response$Guacamole.decode(json);
  }
  catch (raw_msg){
    var msg = Caml_js_exceptions.internalToOCamlException(raw_msg);
    if (msg.RE_EXN_ID === Json_decode.DecodeError) {
      return {
              TAG: 1,
              _0: [{
                  _0: /* Others */0,
                  _1: {
                    TAG: 5,
                    _0: msg._1,
                    _1: json,
                    [Symbol.for("name")]: "CannotDecodeResponse"
                  },
                  [Symbol.for("name")]: "Error"
                }],
              [Symbol.for("name")]: "Error"
            };
    }
    throw msg;
  }
}

function onNotification(handler) {
  return $$Promise.getOk($$Promise.Js.toResult(client.contents.onReady()), (function (param) {
                client.contents.onNotification("guacamole", (function (json) {
                        return Curry._1(handler, decodeResponse(json));
                      }));
                
              }));
}

function sendRequest(request) {
  var value = Request$Guacamole.encode(request);
  console.log("<<<", value);
  return $$Promise.map($$Promise.flatMapOk($$Promise.Js.toResult(client.contents.onReady()), (function (param) {
                    return $$Promise.Js.toResult(client.contents.sendRequest("guacamole", value));
                  })), (function (json) {
                if (json.TAG) {
                  var error = json._0;
                  console.log(">>> error", error);
                  return {
                          TAG: 1,
                          _0: [{
                              _0: /* Others */0,
                              _1: {
                                TAG: 6,
                                _0: Response$Guacamole.$$Error.fromJsError(error),
                                [Symbol.for("name")]: "CannotSendRequest"
                              },
                              [Symbol.for("name")]: "Error"
                            }],
                          [Symbol.for("name")]: "Error"
                        };
                }
                var json$1 = json._0;
                console.log(">>>", json$1);
                return decodeResponse(json$1);
              }));
}

var Client = {
  start: start,
  stop: stop,
  onNotification: onNotification,
  sendRequest: sendRequest
};

function onSelect($$event) {
  var selections = $$event.selections;
  var editor = $$event.textEditor;
  var filePath = editor.document.fileName;
  return Belt_Option.forEach(Registry$Guacamole.get(filePath), (function (state) {
                return Belt_Option.forEach(Belt_Array.get(selections, 0), (function (selection) {
                              var start = state.document.offsetAt(selection.start);
                              var end_ = state.document.offsetAt(selection.end);
                              return $$Promise.get(sendRequest({
                                              TAG: 1,
                                              _0: state.filePath,
                                              _1: start,
                                              _2: end_,
                                              [Symbol.for("name")]: "Inspect"
                                            }), (function (param) {
                                            return State$Guacamole.handleResponse(state, param);
                                          }));
                            }));
              }));
}

function onActivateExtension(callback) {
  var visibleCount = Belt_Array.keep(Vscode.window.visibleTextEditors, (function (editor) {
          return isGCL(editor.document.fileName);
        })).length;
  var shouldAcitvateView = visibleCount > 0 && !View$Guacamole.isActivated(undefined);
  if (shouldAcitvateView) {
    return Curry._1(callback, undefined);
  }
  
}

function onDeactivateExtension(callback) {
  var openedCount = Registry$Guacamole.size(undefined);
  var shouldDeacitvateView = openedCount === 0 && View$Guacamole.isActivated(undefined);
  if (shouldDeacitvateView) {
    return Curry._1(callback, undefined);
  }
  
}

function onOpenEditor(context, editor) {
  var filePath = editor.document.fileName;
  if (!isGCL(filePath)) {
    return ;
  }
  var state = Registry$Guacamole.get(filePath);
  if (state !== undefined) {
    View$Guacamole.wire(state);
  } else {
    var state$1 = State$Guacamole.make(editor);
    View$Guacamole.wire(state$1);
    Registry$Guacamole.add(filePath, state$1);
  }
  return onActivateExtension(function (param) {
              View$Guacamole.activate(context.extensionPath);
              Belt_Option.forEach(Registry$Guacamole.get(filePath), View$Guacamole.wire);
              client.contents.start();
              
            });
}

function onCloseEditor(doc) {
  var filePath = doc.fileName;
  if (isGCL(filePath)) {
    Registry$Guacamole.destroy(filePath);
    return onDeactivateExtension(function (param) {
                View$Guacamole.deactivate(undefined);
                client.contents.stop();
                
              });
  }
  
}

var Handler = {
  onSelect: onSelect,
  onActivateExtension: onActivateExtension,
  onDeactivateExtension: onDeactivateExtension,
  onOpenEditor: onOpenEditor,
  onCloseEditor: onCloseEditor
};

function activate(context) {
  var subscribe = function (x) {
    context.subscriptions.push(x);
    
  };
  Belt_Option.forEach(Vscode.window.activeTextEditor, (function (param) {
          return onOpenEditor(context, param);
        }));
  subscribe(Vscode.window.onDidChangeActiveTextEditor(function (next) {
            return Belt_Option.forEach(next, (function (param) {
                          return onOpenEditor(context, param);
                        }));
          }));
  subscribe(Vscode.workspace.onDidCloseTextDocument(onCloseEditor));
  return subscribe(Vscode.window.onDidChangeTextEditorSelection(onSelect));
}

function deactivate(param) {
  
}

exports.isGCL = isGCL;
exports.Client = Client;
exports.Handler = Handler;
exports.activate = activate;
exports.deactivate = deactivate;
/* client Not a pure module */

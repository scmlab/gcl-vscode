// Generated by BUCKLESCRIPT, PLEASE EDIT WITH CARE
'use strict';

var Curry = require("bs-platform/lib/js/curry.js");
var Js_dict = require("bs-platform/lib/js/js_dict.js");
var Belt_Array = require("bs-platform/lib/js/belt_Array.js");
var Belt_Option = require("bs-platform/lib/js/belt_Option.js");
var State$Guacamole = require("./State.bs.js");
var VscodeImpl$Guacamole = require("./Editor/VscodeImpl.bs.js");

function Impl(Interface) {
  var dict = { };
  var get = function (fileName) {
    return Js_dict.get(dict, fileName);
  };
  var getByEditor = function (editor) {
    var fileName = Curry._1(Interface.getFileName$prime, editor);
    return Js_dict.get(dict, fileName);
  };
  var add = function (fileName, state) {
    var match = Js_dict.get(dict, fileName);
    if (match !== undefined) {
      return /* () */0;
    } else {
      dict[fileName] = state;
      return /* () */0;
    }
  };
  var rename = function (oldName, newName) {
    var delete_ = (function (dict, key) {delete dict[key]});
    return Belt_Option.forEach(Js_dict.get(dict, oldName), (function (state) {
                  delete_(dict, oldName);
                  return add(newName, state);
                }));
  };
  var destroy = function (fileName) {
    var delete_ = (function (dict, key) {delete dict[key]});
    Belt_Option.forEach(Js_dict.get(dict, fileName), State$Guacamole.destroy);
    return delete_(dict, fileName);
  };
  var contains = function (fileName) {
    return Belt_Option.isSome(Js_dict.get(dict, fileName));
  };
  var destroyAll = function (param) {
    return Belt_Array.map(Js_dict.entries(dict), (function (param) {
                  return State$Guacamole.destroy(param[1]);
                }));
  };
  var States = {
    dict: dict,
    get: get,
    getByEditor: getByEditor,
    add: add,
    rename: rename,
    destroy: destroy,
    contains: contains,
    destroyAll: destroyAll
  };
  var partial_arg = /\.gcl$/i;
  var isGCL = function (param) {
    return partial_arg.test(param);
  };
  var addToSubscriptions = function (f, context) {
    context.subscriptions.push(f);
    return /* () */0;
  };
  var activate = function (context) {
    Curry._2(Interface.addToSubscriptions, Curry._1(Interface.onDidCloseEditor, destroy), context);
    return Curry._2(Interface.addToSubscriptions, Curry._1(Interface.onDidChangeFileName, (function (oldName, newName) {
                      if (Belt_Option.isSome(Js_dict.get(dict, oldName))) {
                        if (Curry._1(isGCL, newName)) {
                          return rename(oldName, newName);
                        } else {
                          return destroy(oldName);
                        }
                      } else {
                        return 0;
                      }
                    })), context);
  };
  var deactive = function (param) {
    return destroyAll(/* () */0);
  };
  return {
          States: States,
          isGCL: isGCL,
          addToSubscriptions: addToSubscriptions,
          activate: activate,
          deactive: deactive
        };
}

var dict = { };

function get(fileName) {
  return Js_dict.get(dict, fileName);
}

function getByEditor(editor) {
  var fileName = VscodeImpl$Guacamole.getFileName$prime(editor);
  return Js_dict.get(dict, fileName);
}

function add(fileName, state) {
  var match = Js_dict.get(dict, fileName);
  if (match !== undefined) {
    return /* () */0;
  } else {
    dict[fileName] = state;
    return /* () */0;
  }
}

function rename(oldName, newName) {
  var delete_ = (function (dict, key) {delete dict[key]});
  return Belt_Option.forEach(Js_dict.get(dict, oldName), (function (state) {
                delete_(dict, oldName);
                return add(newName, state);
              }));
}

function destroy(fileName) {
  var delete_ = (function (dict, key) {delete dict[key]});
  Belt_Option.forEach(Js_dict.get(dict, fileName), State$Guacamole.destroy);
  return delete_(dict, fileName);
}

function contains(fileName) {
  return Belt_Option.isSome(Js_dict.get(dict, fileName));
}

function destroyAll(param) {
  return Belt_Array.map(Js_dict.entries(dict), (function (param) {
                return State$Guacamole.destroy(param[1]);
              }));
}

var States = {
  dict: dict,
  get: get,
  getByEditor: getByEditor,
  add: add,
  rename: rename,
  destroy: destroy,
  contains: contains,
  destroyAll: destroyAll
};

var partial_arg = /\.gcl$/i;

function isGCL(param) {
  return partial_arg.test(param);
}

function addToSubscriptions(f, context) {
  context.subscriptions.push(f);
  return /* () */0;
}

function activate(context) {
  VscodeImpl$Guacamole.addToSubscriptions(VscodeImpl$Guacamole.onDidCloseEditor(destroy), context);
  return VscodeImpl$Guacamole.addToSubscriptions(VscodeImpl$Guacamole.onDidChangeFileName((function (oldName, newName) {
                    if (Belt_Option.isSome(Js_dict.get(dict, oldName))) {
                      if (Curry._1(isGCL, newName)) {
                        return rename(oldName, newName);
                      } else {
                        return destroy(oldName);
                      }
                    } else {
                      return 0;
                    }
                  })), context);
}

function deactive(param) {
  return destroyAll(/* () */0);
}

exports.Impl = Impl;
exports.States = States;
exports.isGCL = isGCL;
exports.addToSubscriptions = addToSubscriptions;
exports.activate = activate;
exports.deactive = deactive;
/* State-Guacamole Not a pure module */

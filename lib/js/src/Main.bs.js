// Generated by BUCKLESCRIPT, PLEASE EDIT WITH CARE
'use strict';

var Vscode = require("vscode");
var Js_dict = require("bs-platform/lib/js/js_dict.js");
var Belt_Array = require("bs-platform/lib/js/belt_Array.js");
var Belt_Option = require("bs-platform/lib/js/belt_Option.js");
var Caml_option = require("bs-platform/lib/js/caml_option.js");
var View$Guacamole = require("./View.bs.js");
var State$Guacamole = require("./State.bs.js");
var Command$Guacamole = require("./Command.bs.js");
var VscodeImpl$Guacamole = require("./Editor/VscodeImpl.bs.js");

function Impl(Interface) {
  var dict = { };
  var getByFileName = function (fileName) {
    return Js_dict.get(dict, fileName);
  };
  var get = function (editor) {
    var fileName = editor.document.fileName;
    return Js_dict.get(dict, fileName);
  };
  var set = function (editor, state) {
    var fileName = editor.document.fileName;
    var match = Js_dict.get(dict, fileName);
    if (match !== undefined) {
      return /* () */0;
    } else {
      dict[editor.document.fileName] = state;
      return /* () */0;
    }
  };
  var disposeByFileName = function (fileName) {
    var delete_ = (function (dict, key) {delete dict[key]});
    Belt_Option.forEach(Js_dict.get(dict, fileName), State$Guacamole.dispose);
    return delete_(dict, fileName);
  };
  var dispose = function (editor) {
    var delete_ = (function (dict, key) {delete dict[key]});
    var fileName = editor.document.fileName;
    Belt_Option.forEach(Js_dict.get(dict, fileName), State$Guacamole.dispose);
    var fileName$1 = editor.document.fileName;
    return delete_(dict, fileName$1);
  };
  var disposeAll = function (param) {
    return Belt_Array.map(Js_dict.entries(dict), (function (param) {
                  return State$Guacamole.dispose(param[1]);
                }));
  };
  return {
          dict: dict,
          getByFileName: getByFileName,
          get: get,
          set: set,
          disposeByFileName: disposeByFileName,
          dispose: dispose,
          disposeAll: disposeAll
        };
}

var dict = { };

function getByFileName(fileName) {
  return Js_dict.get(dict, fileName);
}

function get(editor) {
  var fileName = editor.document.fileName;
  return Js_dict.get(dict, fileName);
}

function set(editor, state) {
  var fileName = editor.document.fileName;
  var match = Js_dict.get(dict, fileName);
  if (match !== undefined) {
    return /* () */0;
  } else {
    dict[editor.document.fileName] = state;
    return /* () */0;
  }
}

function disposeByFileName(fileName) {
  var delete_ = (function (dict, key) {delete dict[key]});
  Belt_Option.forEach(Js_dict.get(dict, fileName), State$Guacamole.dispose);
  return delete_(dict, fileName);
}

function dispose(editor) {
  var delete_ = (function (dict, key) {delete dict[key]});
  var fileName = editor.document.fileName;
  Belt_Option.forEach(Js_dict.get(dict, fileName), State$Guacamole.dispose);
  var fileName$1 = editor.document.fileName;
  return delete_(dict, fileName$1);
}

function disposeAll(param) {
  return Belt_Array.map(Js_dict.entries(dict), (function (param) {
                return State$Guacamole.dispose(param[1]);
              }));
}

var States = {
  dict: dict,
  getByFileName: getByFileName,
  get: get,
  set: set,
  disposeByFileName: disposeByFileName,
  dispose: dispose,
  disposeAll: disposeAll
};

var partial_arg = /\.gcl$/i;

function isGCL(param) {
  return partial_arg.test(param);
}

function getActiveGCLEditor(param) {
  return Belt_Option.flatMap(Vscode.window.activeTextEditor, (function (editor) {
                if (isGCL(editor.document.fileName)) {
                  return Caml_option.some(editor);
                }
                
              }));
}

function getOrMakeState(context) {
  return Belt_Option.map(getActiveGCLEditor(/* () */0), (function (editor) {
                var match = get(editor);
                if (match !== undefined) {
                  return match;
                } else {
                  var state = State$Guacamole.make(context, editor);
                  set(editor, state);
                  return state;
                }
              }));
}

function get$1(param) {
  return Belt_Option.flatMap(getActiveGCLEditor(/* () */0), get);
}

function addToSubscriptions(f, context) {
  context.subscriptions.push(f);
  return /* () */0;
}

function activate(context) {
  addToSubscriptions(Vscode.workspace.onDidRenameFiles((function ($$event) {
              return Belt_Option.forEach(Belt_Option.map($$event, (function (prim) {
                                return prim.files;
                              })), (function (files) {
                            return Belt_Array.forEach(Belt_Array.keep(Belt_Array.keep(files, (function (file) {
                                                  return isGCL(file.oldUri.path);
                                                })), (function (file) {
                                              return !isGCL(file.newUri.path);
                                            })), (function (file) {
                                          return disposeByFileName(file.oldUri.path);
                                        }));
                          }));
            })), context);
  addToSubscriptions(Vscode.workspace.onDidCloseTextDocument((function (textDoc) {
              return Belt_Option.forEach(Belt_Option.flatMap(Belt_Option.map(textDoc, (function (prim) {
                                    return prim.fileName;
                                  })), getByFileName), State$Guacamole.dispose);
            })), context);
  addToSubscriptions(Vscode.window.onDidChangeActiveTextEditor((function (editor) {
              return Belt_Option.forEach(Belt_Option.flatMap(editor, get), View$Guacamole.activate);
            })), context);
  addToSubscriptions(Vscode.commands.registerCommand("extension.load", (function (param) {
              return Belt_Option.forEach(getOrMakeState(context), Command$Guacamole.load);
            })), context);
  return addToSubscriptions(Vscode.commands.registerCommand("workbench.action.files.save", (function (param) {
                    return Belt_Option.forEach(Belt_Option.flatMap(getActiveGCLEditor(/* () */0), get), (function (state) {
                                  console.log(state.editor.document.fileName);
                                  return /* () */0;
                                }));
                  })), context);
}

function deactive(param) {
  return disposeAll(/* () */0);
}

exports.Impl = Impl;
exports.States = States;
exports.isGCL = isGCL;
exports.getActiveGCLEditor = getActiveGCLEditor;
exports.getOrMakeState = getOrMakeState;
exports.get = get$1;
exports.addToSubscriptions = addToSubscriptions;
exports.activate = activate;
exports.deactive = deactive;
/* vscode Not a pure module */

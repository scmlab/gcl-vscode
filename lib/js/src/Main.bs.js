// Generated by BUCKLESCRIPT, PLEASE EDIT WITH CARE
'use strict';

var Curry = require("bs-platform/lib/js/curry.js");
var Vscode = require("vscode");
var Caml_obj = require("bs-platform/lib/js/caml_obj.js");
var Belt_Array = require("bs-platform/lib/js/belt_Array.js");
var Belt_Option = require("bs-platform/lib/js/belt_Option.js");
var View$Guacamole = require("./View.bs.js");
var State$Guacamole = require("./State.bs.js");
var Command$Guacamole = require("./Command.bs.js");
var Registry$Guacamole = require("./Registry.bs.js");
var Caml_chrome_debugger = require("bs-platform/lib/js/caml_chrome_debugger.js");
var TaskRunner$Guacamole = require("./Task/TaskRunner.bs.js");

var partial_arg = /\.gcl$/i;

function isGCL(param) {
  return partial_arg.test(param);
}

function activate(context) {
  var disposables = context.subscriptions;
  var extensionPath = context.extensionPath;
  disposables.push(Vscode.workspace.onDidCloseTextDocument((function (textDoc) {
              return Belt_Option.forEach(textDoc, (function (textDoc) {
                            return Registry$Guacamole.destroy(textDoc.fileName);
                          }));
            })));
  disposables.push(Vscode.workspace.onDidRenameFiles((function ($$event) {
              return Belt_Option.forEach(Belt_Option.map($$event, (function (prim) {
                                return prim.files;
                              })), (function (files) {
                            return Belt_Array.forEach(files, (function (file) {
                                          var oldName = file.oldUri.path;
                                          var newName = file.newUri.path;
                                          if (Registry$Guacamole.contains(oldName)) {
                                            if (isGCL(newName)) {
                                              return Registry$Guacamole.rename(oldName, newName);
                                            } else {
                                              return Registry$Guacamole.destroy(oldName);
                                            }
                                          }
                                          
                                        }));
                          }));
            })));
  var previous = {
    contents: Vscode.window.activeTextEditor
  };
  disposables.push(Vscode.window.onDidChangeActiveTextEditor((function (next) {
              var nextFileName = Belt_Option.map(Belt_Option.map(next, (function (prim) {
                          return prim.document;
                        })), (function (prim) {
                      return prim.fileName;
                    }));
              var prevFileName = Belt_Option.map(Belt_Option.map(previous.contents, (function (prim) {
                          return prim.document;
                        })), (function (prim) {
                      return prim.fileName;
                    }));
              var changed = Caml_obj.caml_notequal(nextFileName, prevFileName);
              if (changed) {
                Belt_Option.forEach(Belt_Option.flatMap(prevFileName, Registry$Guacamole.get), (function (param) {
                        return State$Guacamole.hide(param[0]);
                      }));
                Belt_Option.forEach(Belt_Option.flatMap(nextFileName, Registry$Guacamole.get), (function (param) {
                        return State$Guacamole.show(param[0]);
                      }));
                previous.contents = next;
                return ;
              }
              
            })));
  var registerCommand = function (name, callback) {
    return Vscode.commands.registerCommand("guacamole." + name, (function (param) {
                  return Belt_Option.map(Vscode.window.activeTextEditor, (function (editor) {
                                var fileName = editor.document.fileName;
                                return Curry._2(callback, editor, fileName);
                              }));
                }));
  };
  disposables.push(registerCommand("toggle", (function (editor, fileName) {
              var match = Registry$Guacamole.get(fileName);
              if (match !== undefined) {
                TaskRunner$Guacamole.addTask(match[1], /* DispatchCommand */Caml_chrome_debugger.variant("DispatchCommand", 1, [/* Quit */1]));
                return Registry$Guacamole.destroy(fileName);
              }
              var state = State$Guacamole.make(extensionPath, editor);
              var taskRunner = TaskRunner$Guacamole.make(state);
              disposables.push(State$Guacamole.onDestroy(state, (function (param) {
                          return Registry$Guacamole.remove(fileName);
                        })));
              Registry$Guacamole.add(fileName, /* tuple */[
                    state,
                    taskRunner
                  ]);
              disposables.push(View$Guacamole.recv(state.view, (function (response) {
                          return TaskRunner$Guacamole.addTask(taskRunner, /* ViewResponse */Caml_chrome_debugger.variant("ViewResponse", 5, [response]));
                        })));
              return TaskRunner$Guacamole.addTask(taskRunner, /* DispatchCommand */Caml_chrome_debugger.variant("DispatchCommand", 1, [/* Load */0]));
            })));
  return Belt_Array.forEach(Command$Guacamole.names, (function (param) {
                var command = param[0];
                disposables.push(registerCommand(param[1], (function (_editor, fileName) {
                            return Belt_Option.forEach(Registry$Guacamole.get(fileName), (function (param) {
                                          return TaskRunner$Guacamole.addTask(param[1], /* DispatchCommand */Caml_chrome_debugger.variant("DispatchCommand", 1, [command]));
                                        }));
                          })));
                
              }));
}

function deactivate(param) {
  return Registry$Guacamole.destroyAll(undefined);
}

exports.isGCL = isGCL;
exports.activate = activate;
exports.deactivate = deactivate;
/* vscode Not a pure module */

// Generated by BUCKLESCRIPT, PLEASE EDIT WITH CARE
'use strict';

var Curry = require("bs-platform/lib/js/curry.js");
var Js_dict = require("bs-platform/lib/js/js_dict.js");
var $$Promise = require("reason-promise/lib/js/src/js/promise.js");
var Belt_Array = require("bs-platform/lib/js/belt_Array.js");
var Belt_Option = require("bs-platform/lib/js/belt_Option.js");

function Impl(Editor, State) {
  var State$1 = Curry._1(State, Editor);
  var dict = { };
  var get = function (fileName) {
    return Js_dict.get(dict, fileName);
  };
  var getByEditor = function (editor) {
    return Belt_Option.flatMap(Curry._1(Editor.getFileName, editor), get);
  };
  var add = function (fileName, state) {
    var match = Js_dict.get(dict, fileName);
    if (match !== undefined) {
      return /* () */0;
    } else {
      console.log("[ states ][ add ]");
      dict[fileName] = state;
      return /* () */0;
    }
  };
  var rename = function (oldName, newName) {
    var delete_ = (function (dict, key) {delete dict[key]});
    return Belt_Option.forEach(Js_dict.get(dict, oldName), (function (state) {
                  console.log("[ states ][ rename ]", oldName, newName);
                  delete_(dict, oldName);
                  return add(newName, state);
                }));
  };
  var destroy = function (fileName) {
    var delete_ = (function (dict, key) {delete dict[key]});
    return Belt_Option.forEach(Js_dict.get(dict, fileName), (function (state) {
                  console.log("[ states ][ destroy ]");
                  Curry._1(State$1.destroy, state);
                  return delete_(dict, fileName);
                }));
  };
  var contains = function (fileName) {
    return Belt_Option.isSome(Js_dict.get(dict, fileName));
  };
  var destroyAll = function (param) {
    Belt_Array.map(Js_dict.entries(dict), (function (param) {
            return Curry._1(State$1.destroy, param[1]);
          }));
    return /* () */0;
  };
  return {
          State: State$1,
          dict: dict,
          get: get,
          getByEditor: getByEditor,
          add: add,
          rename: rename,
          destroy: destroy,
          contains: contains,
          destroyAll: destroyAll
        };
}

var StateDict = {
  Impl: Impl
};

var partial_arg = /\.gcl$/i;

function isGCL(param) {
  return partial_arg.test(param);
}

function Impl$1(Editor, State) {
  var State$1 = Curry._1(State, Editor);
  var dict = { };
  var get = function (fileName) {
    return Js_dict.get(dict, fileName);
  };
  var getByEditor = function (editor) {
    return Belt_Option.flatMap(Curry._1(Editor.getFileName, editor), get);
  };
  var add = function (fileName, state) {
    var match = Js_dict.get(dict, fileName);
    if (match !== undefined) {
      return /* () */0;
    } else {
      console.log("[ states ][ add ]");
      dict[fileName] = state;
      return /* () */0;
    }
  };
  var rename = function (oldName, newName) {
    var delete_ = (function (dict, key) {delete dict[key]});
    return Belt_Option.forEach(Js_dict.get(dict, oldName), (function (state) {
                  console.log("[ states ][ rename ]", oldName, newName);
                  delete_(dict, oldName);
                  return add(newName, state);
                }));
  };
  var destroy = function (fileName) {
    var delete_ = (function (dict, key) {delete dict[key]});
    return Belt_Option.forEach(Js_dict.get(dict, fileName), (function (state) {
                  console.log("[ states ][ destroy ]");
                  Curry._1(State$1.destroy, state);
                  return delete_(dict, fileName);
                }));
  };
  var contains = function (fileName) {
    return Belt_Option.isSome(Js_dict.get(dict, fileName));
  };
  var destroyAll = function (param) {
    Belt_Array.map(Js_dict.entries(dict), (function (param) {
            return Curry._1(State$1.destroy, param[1]);
          }));
    return /* () */0;
  };
  var States = {
    State: State$1,
    dict: dict,
    get: get,
    getByEditor: getByEditor,
    add: add,
    rename: rename,
    destroy: destroy,
    contains: contains,
    destroyAll: destroyAll
  };
  var State$2 = Curry._1(State, Editor);
  var addToSubscriptions = function (f, context) {
    context.subscriptions.push(f);
    return /* () */0;
  };
  var activate = function (context) {
    Curry._2(Editor.addToSubscriptions, Curry._1(Editor.onDidCloseEditor, destroy), context);
    Curry._2(Editor.addToSubscriptions, Curry._1(Editor.onDidChangeFileName, (function (oldName, newName) {
                return Belt_Option.forEach(oldName, (function (oldName) {
                              return Belt_Option.forEach(newName, (function (newName) {
                                            if (Curry._1(contains, oldName)) {
                                              if (isGCL(newName)) {
                                                return Curry._2(rename, oldName, newName);
                                              } else {
                                                return Curry._1(destroy, oldName);
                                              }
                                            } else {
                                              return 0;
                                            }
                                          }));
                            }));
              })), context);
    Curry._2(Editor.addToSubscriptions, Curry._1(Editor.onDidChangeActivation, (function (prev, next) {
                Belt_Option.forEach(Belt_Option.flatMap(prev, get), State$2.hide);
                return Belt_Option.forEach(Belt_Option.flatMap(next, get), State$2.show);
              })), context);
    Curry._2(Editor.addToSubscriptions, Curry._2(Editor.registerCommand, "toggle", (function (editor) {
                return Belt_Option.forEach(Curry._1(Editor.getFileName, editor), (function (fileName) {
                              var match = Curry._1(get, fileName);
                              if (match !== undefined) {
                                console.log("[ main ][ toggle deactivate ]");
                                return Curry._1(destroy, fileName);
                              } else {
                                console.log("[ main ][ toggle activate ]");
                                var state = Curry._2(State$2.make, context, editor);
                                return Curry._2(add, fileName, state);
                              }
                            }));
              })), context);
    return Curry._2(Editor.addToSubscriptions, Curry._2(Editor.registerCommand, "reload", (function (editor) {
                      $$Promise.get(Curry._1(Editor.save, editor), (function (succeed) {
                              console.log("[ main ][ save ]", succeed);
                              return /* () */0;
                            }));
                      console.log("[ main ][ reload ]");
                      return /* () */0;
                    })), context);
  };
  var deactivate = function (param) {
    return Curry._1(destroyAll, /* () */0);
  };
  return {
          States: States,
          State: State$2,
          addToSubscriptions: addToSubscriptions,
          activate: activate,
          deactivate: deactivate
        };
}

exports.StateDict = StateDict;
exports.isGCL = isGCL;
exports.Impl = Impl$1;
/* Promise Not a pure module */

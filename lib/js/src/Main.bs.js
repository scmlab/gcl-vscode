// Generated by ReScript, PLEASE EDIT WITH CARE
'use strict';

var Curry = require("bs-platform/lib/js/curry.js");
var VSCode = require("bs-vscode/lib/js/src/VSCode.bs.js");
var Vscode = require("vscode");
var $$Promise = require("reason-promise/lib/js/src/js/promise.bs.js");
var Belt_Array = require("bs-platform/lib/js/belt_Array.js");
var Belt_Option = require("bs-platform/lib/js/belt_Option.js");
var Util$Guacamole = require("./Util/Util.bs.js");
var View$Guacamole = require("./View.bs.js");
var State$Guacamole = require("./State.bs.js");
var SrcLoc$Guacamole = require("./SrcLoc.bs.js");
var Element$Guacamole = require("./View/Element.bs.js");
var Registry$Guacamole = require("./Registry.bs.js");
var Connection$Guacamole = require("./Connection.bs.js");
var Connection__Error$Guacamole = require("./Connection/Connection__Error.bs.js");

var partial_arg = /\.gcl$/i;

function isGCL(param) {
  return partial_arg.test(param);
}

var previouslyActivatedState = {
  contents: undefined
};

function handleResponse(response) {
  if (typeof response === "number") {
    return State$Guacamole.display(0, [Element$Guacamole.Block.block("Internal Error", undefined, Element$Guacamole.Inlines.string("Program source not loaded yet"))]);
  }
  switch (response.TAG | 0) {
    case /* Res */0 :
        var kinds = response._1;
        return Belt_Option.mapWithDefault(Registry$Guacamole.get(response._0), $$Promise.resolved(undefined), (function (state) {
                      return $$Promise.map(Util$Guacamole.$$Promise.oneByOne(Belt_Array.map(kinds, (function (param) {
                                            return State$Guacamole.handleResponseKind(state, param);
                                          }))), (function (param) {
                                    
                                  }));
                    }));
    case /* CannotDecodeResponse */1 :
        return State$Guacamole.display(0, [Element$Guacamole.Block.block("Client Internal Error", undefined, Element$Guacamole.Inlines.string("Cannot decode response from the server\n" + response._0 + "\n" + JSON.stringify(response._1)))]);
    case /* CannotDecodeRequest */2 :
        return State$Guacamole.display(0, [Element$Guacamole.Block.block("Server Internal Error", undefined, Element$Guacamole.Inlines.string("Cannot decode request from the client\n" + response._0))]);
    case /* CannotSendRequest */3 :
        return State$Guacamole.display(0, [Element$Guacamole.Block.block("Client Internal Error", undefined, Element$Guacamole.Inlines.string("Cannot send request to the server\n" + response._0))]);
    
  }
}

function sendLSPRequest(state, kind) {
  return $$Promise.flatMap(State$Guacamole.sendLSPRequest(state, kind), (function (result) {
                if (result.TAG === /* Ok */0) {
                  return handleResponse(result._0);
                }
                var match = Connection__Error$Guacamole.toString(result._0);
                return State$Guacamole.display(0, [Element$Guacamole.Block.block(match[0], undefined, Element$Guacamole.Inlines.string(match[1]))]);
              }));
}

function getState(param) {
  return previouslyActivatedState.contents;
}

function handleViewResponse(response) {
  return Belt_Option.forEach(previouslyActivatedState.contents, (function (state) {
                if (typeof response === "number") {
                  if (response !== 0) {
                    return ;
                  } else {
                    sendLSPRequest(state, /* ExportProofObligations */0);
                    return ;
                  }
                }
                var range = response._0;
                switch (range.TAG | 0) {
                  case /* MouseOver */0 :
                      var range$1 = range._0;
                      var key = SrcLoc$Guacamole.$$Range.toString(range$1);
                      var range$2 = SrcLoc$Guacamole.$$Range.toVSCodeRange(range$1);
                      return State$Guacamole.Decoration.addBackground(state, key, range$2, "statusBar.debuggingBackground");
                  case /* MouseOut */1 :
                      return State$Guacamole.Decoration.remove(SrcLoc$Guacamole.$$Range.toString(range._0));
                  case /* MouseClick */2 :
                      var range$3 = range._0;
                      var key$1 = SrcLoc$Guacamole.$$Range.toString(range$3);
                      State$Guacamole.Decoration.remove(key$1);
                      State$Guacamole.focus(state);
                      var range$4 = SrcLoc$Guacamole.$$Range.toVSCodeRange(range$3);
                      var selection = new Vscode.Selection(range$4.start, range$4.end);
                      state.editor.selection = selection;
                      return ;
                  
                }
              }));
}

function isGCL$1(editor) {
  return /\.gcl$/i.test(editor.document.fileName);
}

function isGCL$prime($$document) {
  return /\.gcl$/i.test($$document.fileName);
}

function onOpenEditor(callback) {
  var f = function (editor) {
    if (isGCL$1(editor)) {
      return Curry._1(callback, editor);
    }
    
  };
  Belt_Option.forEach(Vscode.window.activeTextEditor, f);
  return Vscode.window.onDidChangeActiveTextEditor(function (next) {
              return Belt_Option.forEach(next, f);
            });
}

function onCloseEditor(callback) {
  return Vscode.workspace.onDidCloseTextDocument(function ($$document) {
              if (isGCL$prime($$document)) {
                return Curry._1(callback, $$document);
              }
              
            });
}

function onActivateExtension(callback) {
  return onOpenEditor(function (param) {
              var visibleCount = Belt_Array.keep(Vscode.window.visibleTextEditors, isGCL$1).length;
              var shouldAcitvateView = visibleCount > 0 && !View$Guacamole.isActivated(undefined);
              if (shouldAcitvateView) {
                return Curry._1(callback, undefined);
              }
              
            });
}

function onDeactivateExtension(callback) {
  return onCloseEditor(function (param) {
              var openedCount = Registry$Guacamole.size(undefined);
              var shouldDeacitvateView = openedCount === 0 && View$Guacamole.isActivated(undefined);
              if (shouldDeacitvateView) {
                return Curry._1(callback, undefined);
              }
              
            });
}

function onChangeCursorPosition(callback) {
  return Vscode.window.onDidChangeTextEditorSelection(callback);
}

var Events = {
  isGCL: isGCL$1,
  isGCL$prime: isGCL$prime,
  onOpenEditor: onOpenEditor,
  onCloseEditor: onCloseEditor,
  onActivateExtension: onActivateExtension,
  onDeactivateExtension: onDeactivateExtension,
  onChangeCursorPosition: onChangeCursorPosition
};

function activate(context) {
  var globalStoragePath = context.globalStoragePath;
  var subscribe = function (x) {
    context.subscriptions.push(x);
    
  };
  subscribe(Connection$Guacamole.onResponse(function (result) {
            if (result.TAG === /* Ok */0) {
              handleResponse(result._0);
              return ;
            }
            var match = Connection__Error$Guacamole.toString(result._0);
            State$Guacamole.display(0, [Element$Guacamole.Block.block(match[0], undefined, Element$Guacamole.Inlines.string(match[1]))]);
            
          }));
  subscribe(Connection$Guacamole.onError(function (error) {
            var match = Connection__Error$Guacamole.toString(error);
            State$Guacamole.display(0, [Element$Guacamole.Block.block(match[0], undefined, Element$Guacamole.Inlines.string(match[1]))]);
            
          }));
  subscribe(onOpenEditor(function (editor) {
            var filePath = editor.document.fileName;
            var state = Registry$Guacamole.get(filePath);
            var state$1;
            if (state !== undefined) {
              state.editor = editor;
              state.document = editor.document;
              state.filePath = filePath;
              State$Guacamole.Spec.redecorate(state, state.specifications);
              state$1 = state;
            } else {
              var state$2 = State$Guacamole.make(globalStoragePath, editor);
              Registry$Guacamole.add(filePath, state$2);
              state$1 = state$2;
            }
            previouslyActivatedState.contents = state$1;
            
          }));
  subscribe(onCloseEditor(function ($$document) {
            return Registry$Guacamole.destroy($$document.fileName);
          }));
  subscribe(onActivateExtension(function (param) {
            var extensionPath = context.extensionPath;
            return $$Promise.get($$Promise.flatMap(View$Guacamole.activate(extensionPath), (function (param) {
                              return Connection$Guacamole.start(globalStoragePath);
                            })), (function (result) {
                          if (result.TAG === /* Ok */0) {
                            State$Guacamole.updateConnection(result._0);
                            return ;
                          }
                          console.log(result._0);
                          
                        }));
          }));
  subscribe(onDeactivateExtension(function (param) {
            View$Guacamole.deactivate(undefined);
            previouslyActivatedState.contents = undefined;
            Connection$Guacamole.stop(undefined);
            
          }));
  subscribe(Vscode.window.onDidChangeTextEditorSelection(function ($$event) {
            var selections = $$event.selections;
            var editor = $$event.textEditor;
            var filePath = editor.document.fileName;
            var match = VSCode.TextEditorSelectionChangeEvent.kind($$event);
            var shouldTrigger = match !== undefined ? match < 2 : false;
            if (shouldTrigger) {
              return Belt_Option.forEach(Registry$Guacamole.get(filePath), (function (state) {
                            return Belt_Option.forEach(Belt_Array.get(selections, 0), (function (selection) {
                                          var start = SrcLoc$Guacamole.Pos.fromVSCodePos(selection.start, state.document);
                                          var end = SrcLoc$Guacamole.Pos.fromVSCodePos(selection.end, state.document);
                                          sendLSPRequest(state, {
                                                TAG: 0,
                                                _0: {
                                                  _0: start,
                                                  _1: end,
                                                  [Symbol.for("name")]: "Range"
                                                },
                                                [Symbol.for("name")]: "Inspect"
                                              });
                                          
                                        }));
                          }));
            }
            
          }));
  $$Promise.get(View$Guacamole.on(handleViewResponse), subscribe);
  subscribe(Vscode.commands.registerCommand("guacamole.refine", (function (param) {
              return Belt_Option.mapWithDefault(previouslyActivatedState.contents, $$Promise.resolved(undefined), (function (state) {
                            var selection = state.editor.selection;
                            var start = SrcLoc$Guacamole.Pos.fromVSCodePos(selection.start, state.document);
                            var end = SrcLoc$Guacamole.Pos.fromVSCodePos(selection.end, state.document);
                            return sendLSPRequest(state, {
                                        TAG: 1,
                                        _0: {
                                          _0: start,
                                          _1: end,
                                          [Symbol.for("name")]: "Range"
                                        },
                                        [Symbol.for("name")]: "Refine"
                                      });
                          }));
            })));
  subscribe(Vscode.commands.registerCommand("guacamole.restart", (function (param) {
              return Belt_Option.mapWithDefault(previouslyActivatedState.contents, $$Promise.resolved(undefined), (function (state) {
                            previouslyActivatedState.contents = undefined;
                            var editor = state.editor;
                            var filePath = state.filePath;
                            Registry$Guacamole.destroy(filePath);
                            var state$1 = State$Guacamole.make(globalStoragePath, editor);
                            Registry$Guacamole.add(filePath, state$1);
                            previouslyActivatedState.contents = state$1;
                            var extensionPath = context.extensionPath;
                            View$Guacamole.deactivate(undefined);
                            $$Promise.get($$Promise.flatMap($$Promise.flatMap(View$Guacamole.activate(extensionPath), Connection$Guacamole.stop), (function (param) {
                                        return Connection$Guacamole.start(globalStoragePath);
                                      })), (function (result) {
                                    if (result.TAG === /* Ok */0) {
                                      State$Guacamole.updateConnection(result._0);
                                      return ;
                                    }
                                    console.log(result._0);
                                    
                                  }));
                            return $$Promise.resolved(undefined);
                          }));
            })));
  return subscribe(Vscode.commands.registerCommand("guacamole.debug", (function (param) {
                    return Belt_Option.mapWithDefault(previouslyActivatedState.contents, $$Promise.resolved(undefined), (function (state) {
                                  return sendLSPRequest(state, /* Debug */1);
                                }));
                  })));
}

function deactivate(param) {
  
}

exports.isGCL = isGCL;
exports.previouslyActivatedState = previouslyActivatedState;
exports.handleResponse = handleResponse;
exports.sendLSPRequest = sendLSPRequest;
exports.getState = getState;
exports.handleViewResponse = handleViewResponse;
exports.Events = Events;
exports.activate = activate;
exports.deactivate = deactivate;
/* VSCode Not a pure module */

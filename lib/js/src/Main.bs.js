// Generated by BUCKLESCRIPT, PLEASE EDIT WITH CARE
'use strict';

var Curry = require("bs-platform/lib/js/curry.js");
var Belt_Array = require("bs-platform/lib/js/belt_Array.js");
var Belt_Option = require("bs-platform/lib/js/belt_Option.js");
var Task$Guacamole = require("./Task/Task.bs.js");
var State$Guacamole = require("./State.bs.js");
var Command$Guacamole = require("./Command.bs.js");
var SigImpl$Guacamole = require("./SigImpl.bs.js");
var Registry$Guacamole = require("./Registry.bs.js");
var Caml_chrome_debugger = require("bs-platform/lib/js/caml_chrome_debugger.js");
var TaskRunner$Guacamole = require("./Task/TaskRunner.bs.js");

function Impl(Editor) {
  var States = Registry$Guacamole.Impl(Editor);
  var TaskRunner = TaskRunner$Guacamole.Impl(Editor);
  var Task = Task$Guacamole.Impl(Editor);
  var State = State$Guacamole.Impl(Editor);
  var partial_arg = /\.gcl$/i;
  var isGCL = function (param) {
    return partial_arg.test(param);
  };
  var addToSubscriptions = function (f, context) {
    context.subscriptions.push(f);
    
  };
  var activate = function (context) {
    Curry._2(Editor.addToSubscriptions, Curry._1(Editor.onDidCloseEditor, States.destroy), context);
    Curry._2(Editor.addToSubscriptions, Curry._1(Editor.onDidChangeFileName, (function (oldName, newName) {
                return Belt_Option.forEach(oldName, (function (oldName) {
                              return Belt_Option.forEach(newName, (function (newName) {
                                            if (Curry._1(States.contains, oldName)) {
                                              if (Curry._1(isGCL, newName)) {
                                                return Curry._2(States.rename, oldName, newName);
                                              } else {
                                                return Curry._1(States.destroy, oldName);
                                              }
                                            }
                                            
                                          }));
                            }));
              })), context);
    Curry._2(Editor.addToSubscriptions, Curry._1(Editor.onDidChangeActivation, (function (prev, next) {
                Belt_Option.forEach(Belt_Option.flatMap(prev, States.get), (function (param) {
                        return Curry._1(State.hide, param[0]);
                      }));
                return Belt_Option.forEach(Belt_Option.flatMap(next, States.get), (function (param) {
                              return Curry._1(State.show, param[0]);
                            }));
              })), context);
    Curry._2(Editor.addToSubscriptions, Curry._2(Editor.registerCommand, "toggle", (function (editor) {
                return Belt_Option.forEach(Curry._1(Editor.getFileName, editor), (function (fileName) {
                              var match = Curry._1(States.get, fileName);
                              if (match !== undefined) {
                                Curry._2(TaskRunner.addTask, match[1], /* DispatchCommand */Caml_chrome_debugger.variant("DispatchCommand", 1, [/* Quit */1]));
                                return Curry._1(States.destroy, fileName);
                              }
                              var state = Curry._2(State.make, context, editor);
                              var taskRunner = Curry._1(TaskRunner.make, state);
                              Curry._2(Editor.addToSubscriptions, Curry._2(State.onDestroy, state, (function (param) {
                                          return Curry._1(States.remove, fileName);
                                        })), context);
                              Curry._2(States.add, fileName, /* tuple */[
                                    state,
                                    taskRunner
                                  ]);
                              Curry._2(Editor.addToSubscriptions, Curry._2(Editor.View.recv, state.view, (function (response) {
                                          return Curry._2(TaskRunner.addTask, taskRunner, /* ViewResponse */Caml_chrome_debugger.variant("ViewResponse", 5, [response]));
                                        })), context);
                              return Curry._2(TaskRunner.addTask, taskRunner, /* DispatchCommand */Caml_chrome_debugger.variant("DispatchCommand", 1, [/* Load */0]));
                            }));
              })), context);
    return Belt_Array.forEach(Command$Guacamole.names, (function (param) {
                  var command = param[0];
                  return Curry._2(Editor.addToSubscriptions, Curry._2(Editor.registerCommand, param[1], (function (editor) {
                                    return Belt_Option.forEach(Curry._1(States.getByEditor, editor), (function (param) {
                                                  return Curry._2(TaskRunner.addTask, param[1], /* DispatchCommand */Caml_chrome_debugger.variant("DispatchCommand", 1, [command]));
                                                }));
                                  })), context);
                }));
  };
  var deactivate = function (param) {
    return Curry._1(States.destroyAll, undefined);
  };
  return {
          States: States,
          TaskRunner: TaskRunner,
          Task: Task,
          State: State,
          isGCL: isGCL,
          addToSubscriptions: addToSubscriptions,
          activate: activate,
          deactivate: deactivate
        };
}

var Editor_Point = {
  line: SigImpl$Guacamole.Point.line,
  column: SigImpl$Guacamole.Point.column,
  make: SigImpl$Guacamole.Point.make,
  translate: SigImpl$Guacamole.Point.translate,
  fromPos: SigImpl$Guacamole.Point.fromPos,
  toPos: SigImpl$Guacamole.Point.toPos
};

var Editor_Config = {
  getGCLPath: SigImpl$Guacamole.Config.getGCLPath,
  setGCLPath: SigImpl$Guacamole.Config.setGCLPath
};

var Editor_View = {
  make: SigImpl$Guacamole.View.make,
  destroy: SigImpl$Guacamole.View.destroy,
  show: SigImpl$Guacamole.View.show,
  hide: SigImpl$Guacamole.View.hide,
  send: SigImpl$Guacamole.View.send,
  recv: SigImpl$Guacamole.View.recv
};

var Editor = {
  Disposable: SigImpl$Guacamole.Disposable,
  Point: Editor_Point,
  $$Range: SigImpl$Guacamole.$$Range,
  editorType: SigImpl$Guacamole.editorType,
  getExtensionPath: SigImpl$Guacamole.getExtensionPath,
  getFileName: SigImpl$Guacamole.getFileName,
  save: SigImpl$Guacamole.save,
  onDidChangeFileName: SigImpl$Guacamole.onDidChangeFileName,
  onDidChangeActivation: SigImpl$Guacamole.onDidChangeActivation,
  onDidCloseEditor: SigImpl$Guacamole.onDidCloseEditor,
  registerCommand: SigImpl$Guacamole.registerCommand,
  addToSubscriptions: SigImpl$Guacamole.addToSubscriptions,
  Config: Editor_Config,
  View: Editor_View,
  Decoration: SigImpl$Guacamole.Decoration,
  getCursorPosition: SigImpl$Guacamole.getCursorPosition,
  rangeForLine: SigImpl$Guacamole.rangeForLine,
  getText: SigImpl$Guacamole.getText,
  selectText: SigImpl$Guacamole.selectText,
  insertText: SigImpl$Guacamole.insertText,
  deleteText: SigImpl$Guacamole.deleteText
};

var States = Registry$Guacamole.Impl(Editor);

var TaskRunner = TaskRunner$Guacamole.Impl(Editor);

var Task = Task$Guacamole.Impl(Editor);

var State = State$Guacamole.Impl(Editor);

var partial_arg = /\.gcl$/i;

function isGCL(param) {
  return partial_arg.test(param);
}

function addToSubscriptions(f, context) {
  context.subscriptions.push(f);
  
}

function activate(context) {
  SigImpl$Guacamole.addToSubscriptions(SigImpl$Guacamole.onDidCloseEditor(States.destroy), context);
  SigImpl$Guacamole.addToSubscriptions(SigImpl$Guacamole.onDidChangeFileName((function (oldName, newName) {
              return Belt_Option.forEach(oldName, (function (oldName) {
                            return Belt_Option.forEach(newName, (function (newName) {
                                          if (Curry._1(States.contains, oldName)) {
                                            if (Curry._1(isGCL, newName)) {
                                              return Curry._2(States.rename, oldName, newName);
                                            } else {
                                              return Curry._1(States.destroy, oldName);
                                            }
                                          }
                                          
                                        }));
                          }));
            })), context);
  SigImpl$Guacamole.addToSubscriptions(SigImpl$Guacamole.onDidChangeActivation((function (prev, next) {
              Belt_Option.forEach(Belt_Option.flatMap(prev, States.get), (function (param) {
                      return Curry._1(State.hide, param[0]);
                    }));
              return Belt_Option.forEach(Belt_Option.flatMap(next, States.get), (function (param) {
                            return Curry._1(State.show, param[0]);
                          }));
            })), context);
  SigImpl$Guacamole.addToSubscriptions(SigImpl$Guacamole.registerCommand("toggle", (function (editor) {
              return Belt_Option.forEach(SigImpl$Guacamole.getFileName(editor), (function (fileName) {
                            var match = Curry._1(States.get, fileName);
                            if (match !== undefined) {
                              Curry._2(TaskRunner.addTask, match[1], /* DispatchCommand */Caml_chrome_debugger.variant("DispatchCommand", 1, [/* Quit */1]));
                              return Curry._1(States.destroy, fileName);
                            }
                            var state = Curry._2(State.make, context, editor);
                            var taskRunner = Curry._1(TaskRunner.make, state);
                            SigImpl$Guacamole.addToSubscriptions(Curry._2(State.onDestroy, state, (function (param) {
                                        return Curry._1(States.remove, fileName);
                                      })), context);
                            Curry._2(States.add, fileName, /* tuple */[
                                  state,
                                  taskRunner
                                ]);
                            SigImpl$Guacamole.addToSubscriptions(Curry._2(Editor_View.recv, state.view, (function (response) {
                                        return Curry._2(TaskRunner.addTask, taskRunner, /* ViewResponse */Caml_chrome_debugger.variant("ViewResponse", 5, [response]));
                                      })), context);
                            return Curry._2(TaskRunner.addTask, taskRunner, /* DispatchCommand */Caml_chrome_debugger.variant("DispatchCommand", 1, [/* Load */0]));
                          }));
            })), context);
  return Belt_Array.forEach(Command$Guacamole.names, (function (param) {
                var command = param[0];
                return SigImpl$Guacamole.addToSubscriptions(SigImpl$Guacamole.registerCommand(param[1], (function (editor) {
                                  return Belt_Option.forEach(Curry._1(States.getByEditor, editor), (function (param) {
                                                return Curry._2(TaskRunner.addTask, param[1], /* DispatchCommand */Caml_chrome_debugger.variant("DispatchCommand", 1, [command]));
                                              }));
                                })), context);
              }));
}

function deactivate(param) {
  return Curry._1(States.destroyAll, undefined);
}

exports.Impl = Impl;
exports.States = States;
exports.TaskRunner = TaskRunner;
exports.Task = Task;
exports.State = State;
exports.isGCL = isGCL;
exports.addToSubscriptions = addToSubscriptions;
exports.activate = activate;
exports.deactivate = deactivate;
/* States Not a pure module */

// Generated by ReScript, PLEASE EDIT WITH CARE
'use strict';

var Curry = require("bs-platform/lib/js/curry.js");
var Vscode = require("vscode");
var Belt_Array = require("bs-platform/lib/js/belt_Array.js");
var Belt_Option = require("bs-platform/lib/js/belt_Option.js");
var View$Guacamole = require("./View.bs.js");
var State$Guacamole = require("./State.bs.js");
var Registry$Guacamole = require("./Registry.bs.js");

var partial_arg = /\.gcl$/i;

function isGCL(param) {
  return partial_arg.test(param);
}

function onOpen(context, doc) {
  var fileName = doc.fileName;
  if (Curry._1(isGCL, fileName)) {
    Belt_Option.map(Vscode.window.activeTextEditor, (function (editor) {
            var state = State$Guacamole.make(editor);
            Vscode.commands.registerCommand("guacamole.toggle", (function (param) {
                    var extensionPath = context.extensionPath;
                    state.view = View$Guacamole.make(extensionPath, editor);
                    Belt_Option.forEach(state.view, (function (view) {
                            View$Guacamole.send(view, {
                                  TAG: 1,
                                  _0: {
                                    TAG: 0,
                                    _0: "Proof Obligations",
                                    [Symbol.for("name")]: "Plain"
                                  },
                                  _1: {
                                    TAG: 0,
                                    _0: 0,
                                    _1: state.pos,
                                    _2: [],
                                    [Symbol.for("name")]: "ProofObligations"
                                  },
                                  [Symbol.for("name")]: "Display"
                                });
                            
                          }));
                    return Registry$Guacamole.add(fileName, state);
                  }));
            
          }));
    return ;
  }
  
}

function onClose(doc) {
  return Registry$Guacamole.destroy(doc.fileName);
}

function onDelete(deleteEvents) {
  return Belt_Array.forEach(deleteEvents.files, (function (uri) {
                return Registry$Guacamole.destroy(uri.path);
              }));
}

function onRename(renameEvents) {
  return Belt_Array.forEach(renameEvents.files, (function ($$event) {
                var oldName = $$event.oldUri.path;
                var newName = $$event.newUri.path;
                if (Registry$Guacamole.contains(oldName)) {
                  if (Curry._1(isGCL, newName)) {
                    return Registry$Guacamole.rename(oldName, newName);
                  } else {
                    return Registry$Guacamole.destroy(oldName);
                  }
                }
                
              }));
}

function onSelect($$event) {
  return Belt_Array.forEach($$event.selections, (function (_selection) {
                
              }));
}

var Handler = {
  isGCL: isGCL,
  onOpen: onOpen,
  onClose: onClose,
  onDelete: onDelete,
  onRename: onRename,
  onSelect: onSelect
};

function activate(context) {
  var subscribe = function (x) {
    context.subscriptions.push(x);
    
  };
  subscribe(Vscode.workspace.onDidOpenTextDocument(function (param) {
            return onOpen(context, param);
          }));
  Belt_Array.forEach(Vscode.workspace.textDocuments, (function (param) {
          return onOpen(context, param);
        }));
  subscribe(Vscode.workspace.onDidCloseTextDocument(onClose));
  subscribe(Vscode.workspace.onDidDeleteFiles(onDelete));
  subscribe(Vscode.workspace.onDidRenameFiles(onRename));
  return subscribe(Vscode.window.onDidChangeTextEditorSelection(onSelect));
}

function deactivate(param) {
  
}

exports.Handler = Handler;
exports.activate = activate;
exports.deactivate = deactivate;
/* vscode Not a pure module */

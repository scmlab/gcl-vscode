// Generated by ReScript, PLEASE EDIT WITH CARE
'use strict';

var Curry = require("bs-platform/lib/js/curry.js");
var Vscode = require("vscode");
var $$Promise = require("reason-promise/lib/js/src/js/promise.bs.js");
var Belt_Array = require("bs-platform/lib/js/belt_Array.js");
var Belt_Option = require("bs-platform/lib/js/belt_Option.js");
var Req$Guacamole = require("./Util/Req.bs.js");
var Chan$Guacamole = require("./Util/Chan.bs.js");
var View$Guacamole = require("./View.bs.js");
var State$Guacamole = require("./State.bs.js");
var Registry$Guacamole = require("./Registry.bs.js");

var partial_arg = /\.gcl$/i;

function isGCL(param) {
  return partial_arg.test(param);
}

var handle = {
  view: undefined,
  reqSubscription: undefined,
  resSubscription: undefined
};

function activate(extensionPath) {
  var view = View$Guacamole.make(extensionPath);
  handle.view = view;
  return $$Promise.get(View$Guacamole.onceDestroyed(view), (function (param) {
                handle.view = undefined;
                
              }));
}

function unwire(param) {
  return Belt_Option.forEach(handle.resSubscription, (function (disposable) {
                return Curry._1(disposable, undefined);
              }));
}

function deactivate(param) {
  Belt_Option.forEach(handle.view, View$Guacamole.destroy);
  handle.view = undefined;
  return unwire(undefined);
}

function isActivated(param) {
  return Belt_Option.isSome(handle.view);
}

function wire(state) {
  console.log("Wire " + state.filePath);
  unwire(undefined);
  return Belt_Option.forEach(handle.view, (function (view) {
                handle.reqSubscription = Req$Guacamole.handle(state.viewReq, (function (req) {
                        return View$Guacamole.send(view, req);
                      }));
                handle.resSubscription = Chan$Guacamole.on(view.onResponse, (function (res) {
                        return Chan$Guacamole.emit(state.viewResChan, res);
                      }));
                
              }));
}

var View2 = {
  activate: activate,
  deactivate: deactivate,
  isActivated: isActivated,
  wire: wire
};

function updateViewOnOpen(extensionPath, state) {
  var visibleCount = Belt_Array.keep(Vscode.window.visibleTextEditors, (function (editor) {
          return isGCL(editor.document.fileName);
        })).length;
  var shouldAcitvateView = visibleCount > 0 && !Belt_Option.isSome(handle.view);
  if (shouldAcitvateView) {
    activate(extensionPath);
  }
  return Belt_Option.forEach(state, wire);
}

function updateViewOnClose(param) {
  var openedCount = Registry$Guacamole.size(undefined);
  var shouldDeacitvateView = openedCount === 0 && Belt_Option.isSome(handle.view);
  if (shouldDeacitvateView) {
    return deactivate(undefined);
  }
  
}

function onSelect($$event) {
  var selections = $$event.selections;
  var editor = $$event.textEditor;
  var filePath = editor.document.fileName;
  return Belt_Option.forEach(Registry$Guacamole.get(filePath), (function (state) {
                return Belt_Option.forEach(Belt_Array.get(selections, 0), (function (selection) {
                              var start = state.document.offsetAt(selection.start);
                              var end_ = state.document.offsetAt(selection.end);
                              return $$Promise.getOk(State$Guacamole.sendRequest(state, {
                                              TAG: 1,
                                              _0: state.filePath,
                                              _1: start,
                                              _2: end_,
                                              [Symbol.for("name")]: "Inspect"
                                            }), (function (param) {
                                            return State$Guacamole.handleResponse(state, param);
                                          }));
                            }));
              }));
}

function onOpen(context, editor) {
  var filePath = editor.document.fileName;
  if (!isGCL(filePath)) {
    return ;
  }
  var match = Registry$Guacamole.get(filePath);
  if (match === undefined) {
    var state = State$Guacamole.make(editor);
    Registry$Guacamole.add(filePath, state);
  }
  return updateViewOnOpen(context.extensionPath, Registry$Guacamole.get(filePath));
}

function onClose(doc) {
  var filePath = doc.fileName;
  if (isGCL(filePath)) {
    console.log("CLOSE " + filePath);
    Registry$Guacamole.destroy(filePath);
    return updateViewOnClose(undefined);
  }
  
}

var Handler = {
  onSelect: onSelect,
  onOpen: onOpen,
  onClose: onClose
};

function activate$1(context) {
  var subscribe = function (x) {
    context.subscriptions.push(x);
    
  };
  Belt_Option.forEach(Vscode.window.activeTextEditor, (function (param) {
          return onOpen(context, param);
        }));
  subscribe(Vscode.window.onDidChangeActiveTextEditor(function (next) {
            return Belt_Option.forEach(next, (function (param) {
                          return onOpen(context, param);
                        }));
          }));
  subscribe(Vscode.workspace.onDidCloseTextDocument(onClose));
  subscribe(Vscode.window.onDidChangeTextEditorSelection(onSelect));
  
}

function deactivate$1(param) {
  
}

exports.isGCL = isGCL;
exports.View2 = View2;
exports.updateViewOnOpen = updateViewOnOpen;
exports.updateViewOnClose = updateViewOnClose;
exports.Handler = Handler;
exports.activate = activate$1;
exports.deactivate = deactivate$1;
/* vscode Not a pure module */

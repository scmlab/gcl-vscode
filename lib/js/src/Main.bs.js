// Generated by ReScript, PLEASE EDIT WITH CARE
'use strict';

var Curry = require("bs-platform/lib/js/curry.js");
var VSCode = require("bs-vscode/lib/js/src/VSCode.bs.js");
var Vscode = require("vscode");
var $$Promise = require("reason-promise/lib/js/src/js/promise.bs.js");
var Belt_Array = require("bs-platform/lib/js/belt_Array.js");
var Belt_Option = require("bs-platform/lib/js/belt_Option.js");
var GCL$Guacamole = require("./GCL.bs.js");
var LSP$Guacamole = require("./LSP.bs.js");
var Util$Guacamole = require("./Util/Util.bs.js");
var View$Guacamole = require("./View.bs.js");
var State$Guacamole = require("./State.bs.js");
var Registry$Guacamole = require("./Registry.bs.js");

var partial_arg = /\.gcl$/i;

function isGCL(param) {
  return partial_arg.test(param);
}

function handleResponse(response) {
  switch (response.TAG | 0) {
    case /* Res */0 :
        var kinds = response._1;
        return Belt_Option.mapWithDefault(Registry$Guacamole.get(response._0), $$Promise.resolved(undefined), (function (state) {
                      return $$Promise.map(Util$Guacamole.$$Promise.oneByOne(Belt_Array.map(kinds, (function (param) {
                                            return State$Guacamole.handleResponseKind(state, param);
                                          }))), (function (param) {
                                    
                                  }));
                    }));
    case /* CannotDecodeResponse */1 :
        return State$Guacamole.displayErrorMessages(["Client Internal Error\nCannot decode response from the server\n" + response._0 + "\n" + JSON.stringify(response._1)]);
    case /* CannotDecodeRequest */2 :
        return State$Guacamole.displayErrorMessages(["Server Internal Error\nCannot decode request from the client\n" + response._0]);
    case /* CannotSendRequest */3 :
        return State$Guacamole.displayErrorMessages(["Client Internal Error\nCannot send request to the server\n" + response._0]);
    
  }
}

function getState(param) {
  return Belt_Option.flatMap(Belt_Option.map(Belt_Option.map(Vscode.window.activeTextEditor, (function (prim) {
                        return prim.document;
                      })), (function (prim) {
                    return prim.fileName;
                  })), Registry$Guacamole.get);
}

function handleViewResponse(response) {
  return Belt_Option.forEach(getState(undefined), (function (state) {
                if (typeof response === "number") {
                  switch (response) {
                    case /* ExportProofObligations */0 :
                        $$Promise.flatMap(State$Guacamole.sendLSPRequest(state, /* ExportProofObligations */1), handleResponse);
                        return ;
                    case /* Initialized */1 :
                    case /* Destroyed */2 :
                        return ;
                    
                  }
                } else {
                  if (response.TAG) {
                    State$Guacamole.Decoration.removeAll(undefined);
                    $$Promise.flatMap(State$Guacamole.sendLSPRequest(state, {
                              TAG: 2,
                              _0: response._0,
                              _1: response._1,
                              _2: response._2,
                              [Symbol.for("name")]: "Substitute"
                            }), handleResponse);
                    return ;
                  }
                  var loc = response._0;
                  switch (loc.TAG | 0) {
                    case /* MouseOver */0 :
                        var loc$1 = loc._0;
                        var key = GCL$Guacamole.Loc.toString(loc$1);
                        var range = GCL$Guacamole.Loc.toRange(loc$1);
                        return State$Guacamole.Decoration.addBackground(state, key, range, "statusBar.debuggingBackground");
                    case /* MouseOut */1 :
                    case /* MouseClick */2 :
                        return State$Guacamole.Decoration.remove(GCL$Guacamole.Loc.toString(loc._0));
                    
                  }
                }
              }));
}

function registerInset(param) {
  
}

function isGCL$1(editor) {
  return /\.gcl$/i.test(editor.document.fileName);
}

function isGCL$prime($$document) {
  return /\.gcl$/i.test($$document.fileName);
}

function onOpenEditor(callback) {
  var f = function (editor) {
    if (isGCL$1(editor)) {
      return Curry._1(callback, editor);
    }
    
  };
  Belt_Option.forEach(Vscode.window.activeTextEditor, f);
  return Vscode.window.onDidChangeActiveTextEditor(function (next) {
              return Belt_Option.forEach(next, f);
            });
}

function onCloseEditor(callback) {
  return Vscode.workspace.onDidCloseTextDocument(function ($$document) {
              if (isGCL$prime($$document)) {
                return Curry._1(callback, $$document);
              }
              
            });
}

function onActivateExtension(callback) {
  return onOpenEditor(function (param) {
              var visibleCount = Belt_Array.keep(Vscode.window.visibleTextEditors, isGCL$1).length;
              var shouldAcitvateView = visibleCount > 0 && !View$Guacamole.isActivated(undefined);
              if (shouldAcitvateView) {
                return Curry._1(callback, undefined);
              }
              
            });
}

function onDeactivateExtension(callback) {
  return onCloseEditor(function (param) {
              var openedCount = Registry$Guacamole.size(undefined);
              var shouldDeacitvateView = openedCount === 0 && View$Guacamole.isActivated(undefined);
              if (shouldDeacitvateView) {
                return Curry._1(callback, undefined);
              }
              
            });
}

function onChangeCursorPosition(callback) {
  return Vscode.window.onDidChangeTextEditorSelection(callback);
}

var Events = {
  isGCL: isGCL$1,
  isGCL$prime: isGCL$prime,
  onOpenEditor: onOpenEditor,
  onCloseEditor: onCloseEditor,
  onActivateExtension: onActivateExtension,
  onDeactivateExtension: onDeactivateExtension,
  onChangeCursorPosition: onChangeCursorPosition
};

function activate(context) {
  var subscribe = function (x) {
    context.subscriptions.push(x);
    
  };
  subscribe(onOpenEditor(function (editor) {
            var filePath = editor.document.fileName;
            var state = Registry$Guacamole.get(filePath);
            var state$1;
            if (state !== undefined) {
              state.editor = editor;
              state.document = editor.document;
              state.filePath = filePath;
              state$1 = state;
            } else {
              var state$2 = State$Guacamole.make(editor);
              Registry$Guacamole.add(filePath, state$2);
              state$1 = state$2;
            }
            $$Promise.flatMap(State$Guacamole.sendLSPRequest(state$1, /* Load */0), handleResponse);
            
          }));
  subscribe(onCloseEditor(function ($$document) {
            return Registry$Guacamole.destroy($$document.fileName);
          }));
  subscribe(onActivateExtension(function (param) {
            View$Guacamole.activate(context.extensionPath);
            LSP$Guacamole.Client.start(undefined);
            
          }));
  subscribe(onDeactivateExtension(function (param) {
            View$Guacamole.deactivate(undefined);
            LSP$Guacamole.Client.stop(undefined);
            
          }));
  subscribe(Vscode.window.onDidChangeTextEditorSelection(function ($$event) {
            var selections = $$event.selections;
            var editor = $$event.textEditor;
            var filePath = editor.document.fileName;
            var match = VSCode.TextEditorSelectionChangeEvent.kind($$event);
            var shouldTrigger = match !== undefined ? match < 2 : false;
            if (shouldTrigger) {
              return Belt_Option.forEach(Registry$Guacamole.get(filePath), (function (state) {
                            return Belt_Option.forEach(Belt_Array.get(selections, 0), (function (selection) {
                                          var start = state.document.offsetAt(selection.start);
                                          var end_ = state.document.offsetAt(selection.end);
                                          $$Promise.flatMap(State$Guacamole.sendLSPRequest(state, {
                                                    TAG: 0,
                                                    _0: start,
                                                    _1: end_,
                                                    [Symbol.for("name")]: "Inspect"
                                                  }), handleResponse);
                                          
                                        }));
                          }));
            }
            
          }));
  LSP$Guacamole.Client.on(function (response) {
        handleResponse(response);
        
      });
  subscribe(View$Guacamole.on(handleViewResponse));
  return subscribe(Vscode.commands.registerCommand("guacamole.refine", (function (param) {
                    return Belt_Option.mapWithDefault(getState(undefined), $$Promise.resolved(undefined), (function (state) {
                                  return Belt_Option.mapWithDefault(State$Guacamole.Spec.fromCursorPosition(state), $$Promise.resolved(undefined), (function (spec) {
                                                var payload = State$Guacamole.Spec.getPayload(state.document, spec);
                                                return $$Promise.flatMap(State$Guacamole.sendLSPRequest(state, {
                                                                TAG: 1,
                                                                _0: spec.id,
                                                                _1: payload,
                                                                [Symbol.for("name")]: "Refine"
                                                              }), handleResponse);
                                              }));
                                }));
                  })));
}

function deactivate(param) {
  
}

exports.isGCL = isGCL;
exports.handleResponse = handleResponse;
exports.getState = getState;
exports.handleViewResponse = handleViewResponse;
exports.registerInset = registerInset;
exports.Events = Events;
exports.activate = activate;
exports.deactivate = deactivate;
/* VSCode Not a pure module */

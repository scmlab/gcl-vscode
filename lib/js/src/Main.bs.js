// Generated by BUCKLESCRIPT, PLEASE EDIT WITH CARE
'use strict';

var Vscode = require("vscode");
var Js_dict = require("bs-platform/lib/js/js_dict.js");
var Belt_Array = require("bs-platform/lib/js/belt_Array.js");
var Belt_Option = require("bs-platform/lib/js/belt_Option.js");
var Caml_option = require("bs-platform/lib/js/caml_option.js");
var View$GclVscode = require("./View.bs.js");
var State$GclVscode = require("./State.bs.js");
var Command$GclVscode = require("./Command.bs.js");

var dict = { };

function get(editor) {
  return Js_dict.get(dict, editor.document.fileName);
}

function getByFileName(fileName) {
  return Js_dict.get(dict, fileName);
}

function set(fileName, state) {
  dict[fileName] = state;
  return /* () */0;
}

function isLoaded(editor) {
  return Belt_Option.isSome(Js_dict.get(dict, editor.document.fileName));
}

function dispose(param) {
  return Belt_Array.map(Js_dict.entries(dict), (function (param) {
                return State$GclVscode.dispose(param[1]);
              }));
}

var States = {
  dict: dict,
  get: get,
  getByFileName: getByFileName,
  set: set,
  isLoaded: isLoaded,
  dispose: dispose
};

var partial_arg = /\.gcl$/i;

function isGCL(param) {
  return partial_arg.test(param);
}

function getOrMakeState(context) {
  return Belt_Option.map(Belt_Option.flatMap(Vscode.window.activeTextEditor, (function (editor) {
                    if (isGCL(editor.document.fileName)) {
                      return Caml_option.some(editor);
                    }
                    
                  })), (function (editor) {
                var match = get(editor);
                if (match !== undefined) {
                  return match;
                } else {
                  var state = State$GclVscode.make(context, editor);
                  set(editor.document.fileName, state);
                  return state;
                }
              }));
}

function activate(context) {
  context.subscriptions.push(Vscode.window.onDidChangeActiveTextEditor((function (editor) {
              return Belt_Option.forEach(Belt_Option.flatMap(editor, get), View$GclVscode.activate);
            })));
  context.subscriptions.push(Vscode.workspace.onDidCloseTextDocument((function (textDoc) {
              return Belt_Option.forEach(Belt_Option.flatMap(Belt_Option.map(textDoc, (function (prim) {
                                    return prim.fileName;
                                  })), getByFileName), State$GclVscode.dispose);
            })));
  context.subscriptions.push(Vscode.commands.registerCommand("extension.load", (function (param) {
              return Belt_Option.forEach(getOrMakeState(context), Command$GclVscode.load);
            })));
  return /* () */0;
}

function deactive(param) {
  return dispose(/* () */0);
}

exports.States = States;
exports.isGCL = isGCL;
exports.getOrMakeState = getOrMakeState;
exports.activate = activate;
exports.deactive = deactive;
/* vscode Not a pure module */

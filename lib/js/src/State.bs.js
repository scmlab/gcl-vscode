// Generated by ReScript, PLEASE EDIT WITH CARE
'use strict';

var Curry = require("bs-platform/lib/js/curry.js");
var $$String = require("bs-platform/lib/js/string.js");
var VSCode = require("bs-vscode/lib/js/src/VSCode.bs.js");
var Vscode = require("vscode");
var Js_dict = require("bs-platform/lib/js/js_dict.js");
var $$Promise = require("reason-promise/lib/js/src/js/promise.bs.js");
var Belt_Array = require("bs-platform/lib/js/belt_Array.js");
var Belt_Option = require("bs-platform/lib/js/belt_Option.js");
var Caml_option = require("bs-platform/lib/js/caml_option.js");
var GCL$Guacamole = require("./GCL.bs.js");
var View$Guacamole = require("./View.bs.js");
var Editor$Guacamole = require("./Util/Editor.bs.js");
var Response$Guacamole = require("./Response.bs.js");
var Connection$Guacamole = require("./Connection.bs.js");

function subscribe(disposable, state) {
  state.subscriptions.push(disposable);
  
}

function display(id, blocks) {
  return $$Promise.map(View$Guacamole.send({
                  TAG: 2,
                  _0: id,
                  _1: blocks,
                  [Symbol.for("name")]: "Display"
                }), (function (param) {
                
              }));
}

function updateConnection(status) {
  return $$Promise.map(View$Guacamole.send({
                  TAG: 0,
                  _0: status,
                  [Symbol.for("name")]: "UpdateConnection"
                }), (function (param) {
                
              }));
}

function focus(state) {
  Vscode.window.showTextDocument(state.document, /* Beside */1, undefined);
  
}

function sendLSPRequest(state, kind) {
  return Connection$Guacamole.sendRequest(state.globalStoragePath, {
              _0: state.filePath,
              _1: kind,
              [Symbol.for("name")]: "Req"
            });
}

function fromCursorPosition(state) {
  var cursor = state.editor.selection.end;
  var smallestHole = {
    contents: undefined
  };
  Belt_Array.forEach(Belt_Array.keep(state.specifications, (function (spec) {
              var range = GCL$Guacamole.Loc.toRange(spec.loc);
              return range.contains(cursor);
            })), (function (spec) {
          var spec$prime = smallestHole.contents;
          if (spec$prime !== undefined && !GCL$Guacamole.Loc.toRange(spec.loc).contains(GCL$Guacamole.Loc.toRange(spec$prime.loc))) {
            return ;
          } else {
            smallestHole.contents = spec;
            return ;
          }
        }));
  return smallestHole.contents;
}

function getPayloadRange(doc, spec) {
  var range = GCL$Guacamole.Loc.toRange(spec.loc);
  var startingLine = range.start.line + 1 | 0;
  var endingLine = range.end.line - 1 | 0;
  var start = doc.lineAt(startingLine).range.start;
  var end_ = doc.lineAt(endingLine).range.end;
  return new Vscode.Range(start, end_);
}

function getPayload(doc, spec) {
  var innerRange = getPayloadRange(doc, spec);
  var payload = doc.getText(Caml_option.some(innerRange));
  var payloadLines = Belt_Option.getWithDefault(Caml_option.null_to_opt(payload.match(/[^\r\n]+/g)), []);
  var partial_arg = /\S|$/;
  var indentLevels = Belt_Array.map(payloadLines, (function (param) {
          return param.search(partial_arg);
        }));
  var smallestLevel = {
    contents: undefined
  };
  Belt_Array.forEach(indentLevels, (function (lvl) {
          var n = smallestLevel.contents;
          if (n !== undefined && lvl >= n) {
            return ;
          } else {
            smallestLevel.contents = lvl;
            return ;
          }
        }));
  var smallestLevel$1 = Belt_Option.getWithDefault(smallestLevel.contents, 0);
  return Belt_Array.map(payloadLines, (function (param) {
                return param.slice(smallestLevel$1);
              }));
}

function resolve(state, i) {
  var spec = Belt_Array.get(Belt_Array.keep(state.specifications, (function (spec) {
              return spec.id === i;
            })), 0);
  if (spec === undefined) {
    return $$Promise.resolved(undefined);
  }
  var range = GCL$Guacamole.Loc.toRange(spec.loc);
  var start = range.start;
  var payload = getPayload(state.document, spec);
  var indentationLevel = start.character;
  var indentation = " ".repeat(indentationLevel);
  var indentedPayload = payload.join("\n" + indentation);
  return $$Promise.map($$Promise.flatMap(Editor$Guacamole.$$Text.$$delete(state.document, range), (function (result) {
                    if (result) {
                      return Editor$Guacamole.$$Text.insert(state.document, start, indentedPayload);
                    } else {
                      return $$Promise.resolved(false);
                    }
                  })), (function (param) {
                return Belt_Array.forEach(spec.decorations, (function (prim) {
                              prim.dispose();
                              
                            }));
              }));
}

function insert(state, lineNo, expr) {
  var assertion = "{ " + Curry._1(GCL$Guacamole.Syntax.Expr.toString, expr) + " }\n";
  var point = new Vscode.Position(lineNo - 1 | 0, 0);
  return Editor$Guacamole.$$Text.insert(state.document, point, assertion);
}

function redecorate(state, specs) {
  Belt_Array.forEach(state.specifications, (function (spec) {
          return Belt_Array.forEach(spec.decorations, (function (prim) {
                        prim.dispose();
                        
                      }));
        }));
  state.specifications = specs;
  return Belt_Array.forEach(state.specifications, (function (spec) {
                var range = GCL$Guacamole.Loc.toRange(spec.loc);
                var startPosition = range.start;
                var endPosition = range.end;
                var startRange = new Vscode.Range(startPosition, startPosition.translate(0, 2));
                var endRange = new Vscode.Range(endPosition.translate(0, -2), endPosition);
                var trim = function (s) {
                  if (s.length > 77) {
                    return $$String.sub(s, 0, 73) + " ...";
                  } else {
                    return s;
                  }
                };
                var preCondText = " " + trim(spec.pre);
                var postCondText = " " + trim(spec.post);
                var isQQ = preCondText === postCondText;
                var highlightBackground = function (ranges) {
                  var backgroundColor = VSCode.StringOr.others(new Vscode.ThemeColor("editor.wordHighlightStrongBackground"));
                  var rangeBehavior = VSCode.DecorationRangeBehavior.toEnum(/* ClosedClosed */1);
                  var options = {
                    backgroundColor: backgroundColor,
                    rangeBehavior: rangeBehavior
                  };
                  var decoration = Vscode.window.createTextEditorDecorationType(options);
                  state.editor.setDecorations(decoration, ranges);
                  return decoration;
                };
                var overlayText = function (text, ranges) {
                  var color = VSCode.StringOr.others(new Vscode.ThemeColor("descriptionForeground"));
                  var after = {
                    color: color,
                    contentText: text
                  };
                  var rangeBehavior = VSCode.DecorationRangeBehavior.toEnum(/* ClosedClosed */1);
                  var options = {
                    after: after,
                    rangeBehavior: rangeBehavior
                  };
                  var decoration = Vscode.window.createTextEditorDecorationType(options);
                  state.editor.setDecorations(decoration, ranges);
                  return decoration;
                };
                var decorations = [
                  overlayText(isQQ ? "" : preCondText, [startRange]),
                  overlayText(postCondText, [endRange]),
                  highlightBackground([
                        startRange,
                        endRange
                      ])
                ];
                spec.decorations = decorations;
                
              }));
}

function updateLocations(state, locations) {
  Belt_Array.forEachWithIndex(state.specifications, (function (index, spec) {
          return Belt_Option.forEach(Belt_Array.get(locations, index), (function (loc) {
                        spec.loc = loc;
                        
                      }));
        }));
  return redecorate(state, state.specifications);
}

var Spec = {
  fromCursorPosition: fromCursorPosition,
  getPayloadRange: getPayloadRange,
  getPayload: getPayload,
  resolve: resolve,
  insert: insert,
  redecorate: redecorate,
  updateLocations: updateLocations
};

function handleResponseKind(state, kind) {
  switch (kind.TAG | 0) {
    case /* Display */0 :
        return display(kind._0, kind._1);
    case /* UpdateSpecs */1 :
        redecorate(state, kind._0);
        return $$Promise.resolved(undefined);
    case /* Substitute */2 :
        return $$Promise.map(View$Guacamole.send({
                        TAG: 1,
                        _0: kind._0,
                        _1: kind._1,
                        [Symbol.for("name")]: "Substitute"
                      }), (function (param) {
                      
                    }));
    case /* ConsoleLog */3 :
        console.log(kind._0);
        return $$Promise.resolved(undefined);
    
  }
}

var dict = {};

var $$delete = (function (dict, id) {delete dict[id]});

function addBackground(state, key, range, color) {
  var backgroundColor = VSCode.StringOr.others(new Vscode.ThemeColor(color));
  var options = {
    backgroundColor: backgroundColor
  };
  var decoration = Vscode.window.createTextEditorDecorationType(options);
  state.editor.setDecorations(decoration, [range]);
  dict[key] = [decoration];
  
}

function remove(key) {
  Belt_Option.forEach(Js_dict.get(dict, key), (function (decos) {
          return Belt_Array.forEach(decos, (function (prim) {
                        prim.dispose();
                        
                      }));
        }));
  return $$delete(dict, key);
}

function removeAll(param) {
  return Belt_Array.forEach(Js_dict.entries(dict), (function (param) {
                $$delete(dict, param[0]);
                return Belt_Array.forEach(param[1], (function (prim) {
                              prim.dispose();
                              
                            }));
              }));
}

var Decoration = {
  addBackground: addBackground,
  remove: remove,
  removeAll: removeAll
};

function make(globalStoragePath, editor) {
  var $$document = editor.document;
  var filePath = $$document.fileName;
  return {
          editor: editor,
          document: $$document,
          filePath: filePath,
          globalStoragePath: globalStoragePath,
          specifications: [],
          subscriptions: []
        };
}

function destroy(state) {
  Belt_Array.forEach(state.subscriptions, (function (prim) {
          return prim.dispose();
        }));
  state.subscriptions = [];
  Belt_Array.forEach(state.specifications, Response$Guacamole.Specification.destroy);
  state.specifications = [];
  
}

exports.subscribe = subscribe;
exports.display = display;
exports.updateConnection = updateConnection;
exports.focus = focus;
exports.sendLSPRequest = sendLSPRequest;
exports.Spec = Spec;
exports.handleResponseKind = handleResponseKind;
exports.Decoration = Decoration;
exports.make = make;
exports.destroy = destroy;
/* VSCode Not a pure module */

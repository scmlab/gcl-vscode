// Generated by BUCKLESCRIPT, PLEASE EDIT WITH CARE
'use strict';

var Curry = require("bs-platform/lib/js/curry.js");
var $$Promise = require("reason-promise/lib/js/src/js/promise.js");
var Caml_chrome_debugger = require("bs-platform/lib/js/caml_chrome_debugger.js");
var Connection$Guacamole = require("./Connection.bs.js");

function toString(param) {
  if (param.tag) {
    return /* tuple */[
            "JSON Decode Error",
            param[0] + ("\nJSON from GCL: \n" + JSON.stringify(param[1]))
          ];
  } else {
    return Connection$Guacamole.$$Error.toString(param[0]);
  }
}

var $$Error = {
  toString: toString
};

function Impl(Editor) {
  var getEditor = function (state) {
    return state.editor;
  };
  var connect = function (state) {
    var match = state.connection;
    if (match !== undefined) {
      return $$Promise.resolved(/* Ok */Caml_chrome_debugger.variant("Ok", 0, [match]));
    } else {
      return $$Promise.tapOk($$Promise.mapError(Connection$Guacamole.make(Editor.getGCLPath, Editor.setGCLPath), (function (e) {
                        return /* Connection */Caml_chrome_debugger.variant("Connection", 0, [e]);
                      })), (function (conn) {
                    state.connection = conn;
                    return /* () */0;
                  }));
    }
  };
  var disconnect = function (state) {
    var match = state.connection;
    if (match !== undefined) {
      return Connection$Guacamole.disconnect(match);
    } else {
      return $$Promise.resolved(/* () */0);
    }
  };
  var make = function (context, editor) {
    var view = Curry._2(Editor.View.make, context, editor);
    var state = {
      editor: editor,
      context: context,
      connection: undefined,
      view: view
    };
    $$Promise.get(connect(state), (function (param) {
            if (param.tag) {
              console.log("[ connection error ]", toString(param[0]));
              return /* () */0;
            } else {
              console.log("[ connection success ]", param[0]);
              return /* () */0;
            }
          }));
    return state;
  };
  var destroy = function (state) {
    Curry._1(Editor.View.destroy, state.view);
    return disconnect(state);
  };
  return {
          getEditor: getEditor,
          make: make,
          destroy: destroy,
          connect: connect,
          disconnect: disconnect
        };
}

exports.$$Error = $$Error;
exports.Impl = Impl;
/* Promise Not a pure module */

// Generated by ReScript, PLEASE EDIT WITH CARE
'use strict';

var $$String = require("rescript/lib/js/string.js");
var VSCode = require("bs-vscode/lib/js/src/VSCode.bs.js");
var Vscode = require("vscode");
var Js_dict = require("rescript/lib/js/js_dict.js");
var $$Promise = require("reason-promise/lib/js/src/js/promise.bs.js");
var Belt_Array = require("rescript/lib/js/belt_Array.js");
var Belt_Option = require("rescript/lib/js/belt_Option.js");
var View$Guabao = require("./View.bs.js");
var SrcLoc$Guabao = require("./SrcLoc.bs.js");
var Response$Guabao = require("./Response.bs.js");
var Connection$Guabao = require("./Connection.bs.js");
var Element__Inlines$Guabao = require("./View/Element/Element__Inlines.bs.js");

function subscribe(disposable, state) {
  state.subscriptions.push(disposable);
  
}

function display(id, sections) {
  return $$Promise.map(View$Guabao.send({
                  TAG: /* Display */1,
                  _0: id,
                  _1: sections
                }), (function (param) {
                
              }));
}

function displayError(header, message) {
  return display(0, [{
                deco: /* Red */1,
                blocks: [
                  {
                    TAG: /* Header */0,
                    _0: header,
                    _1: undefined
                  },
                  {
                    TAG: /* Paragraph */2,
                    _0: Element__Inlines$Guabao.string(message)
                  }
                ]
              }]);
}

function updateConnectionStatus(status) {
  return $$Promise.map(View$Guabao.send({
                  TAG: /* UpdateConnectionStatus */0,
                  _0: status
                }), (function (param) {
                
              }));
}

function focus(state) {
  Vscode.window.showTextDocument(state.document, /* Beside */1, undefined);
  
}

function sendLSPRequest(state, kind) {
  return Connection$Guabao.sendRequest(state.globalStoragePath, /* Req */{
              _0: state.filePath,
              _1: kind
            });
}

function redecorate(state, specs) {
  Belt_Array.forEach(state.specifications, (function (spec) {
          return Belt_Array.forEach(spec.decorations, (function (prim) {
                        prim.dispose();
                        
                      }));
        }));
  state.specifications = specs;
  return Belt_Array.forEach(state.specifications, (function (spec) {
                var range = SrcLoc$Guabao.$$Range.toVSCodeRange(spec.range);
                var startPosition = range.start;
                var endPosition = range.end;
                var singleLine = startPosition.line === endPosition.line;
                var startRange = new Vscode.Range(startPosition, startPosition.translate(0, 2));
                var endRange = new Vscode.Range(endPosition.translate(0, -2), endPosition);
                var trim = function (s) {
                  if (s.length > 77) {
                    return $$String.sub(s, 0, 73) + " ...";
                  } else {
                    return s;
                  }
                };
                var preCondText = " " + trim(spec.pre);
                var postCondText = " " + trim(spec.post);
                var isQQ = preCondText === postCondText;
                var highlightBackground = function (ranges) {
                  var backgroundColor = VSCode.StringOr.others(new Vscode.ThemeColor("editor.wordHighlightStrongBackground"));
                  var rangeBehavior = VSCode.DecorationRangeBehavior.toEnum(/* ClosedClosed */1);
                  var options = {
                    backgroundColor: backgroundColor,
                    rangeBehavior: rangeBehavior
                  };
                  var decoration = Vscode.window.createTextEditorDecorationType(options);
                  state.editor.setDecorations(decoration, ranges);
                  return decoration;
                };
                var overlayText = function (text, ranges) {
                  var color = VSCode.StringOr.others(new Vscode.ThemeColor("descriptionForeground"));
                  var after = {
                    color: color,
                    contentText: text
                  };
                  var rangeBehavior = VSCode.DecorationRangeBehavior.toEnum(/* ClosedClosed */1);
                  var options = {
                    after: after,
                    rangeBehavior: rangeBehavior
                  };
                  var decoration = Vscode.window.createTextEditorDecorationType(options);
                  state.editor.setDecorations(decoration, ranges);
                  return decoration;
                };
                var decorations = singleLine ? [highlightBackground([
                          startRange,
                          endRange
                        ])] : [
                    overlayText(isQQ ? "" : preCondText, [startRange]),
                    overlayText(postCondText, [endRange]),
                    highlightBackground([
                          startRange,
                          endRange
                        ])
                  ];
                spec.decorations = decorations;
                
              }));
}

var Spec = {
  redecorate: redecorate
};

function handleResponseKind(state, kind) {
  switch (kind.TAG | 0) {
    case /* Display */0 :
        return display(kind._0, kind._1);
    case /* UpdateSpecs */1 :
        redecorate(state, kind._0);
        return $$Promise.resolved(undefined);
    case /* ConsoleLog */2 :
        console.log(kind._0);
        return $$Promise.resolved(undefined);
    
  }
}

var dict = {};

var $$delete = (function (dict, id) {delete dict[id]});

function addBackground(state, key, range, color) {
  var match = Js_dict.get(dict, key);
  if (match !== undefined) {
    return ;
  }
  var backgroundColor = VSCode.StringOr.others(new Vscode.ThemeColor(color));
  var options = {
    backgroundColor: backgroundColor
  };
  var decoration = Vscode.window.createTextEditorDecorationType(options);
  state.editor.setDecorations(decoration, [range]);
  dict[key] = [decoration];
  
}

function remove(key) {
  Belt_Option.forEach(Js_dict.get(dict, key), (function (decos) {
          return Belt_Array.forEach(decos, (function (prim) {
                        prim.dispose();
                        
                      }));
        }));
  return $$delete(dict, key);
}

function removeAll(param) {
  return Belt_Array.forEach(Js_dict.entries(dict), (function (param) {
                $$delete(dict, param[0]);
                return Belt_Array.forEach(param[1], (function (prim) {
                              prim.dispose();
                              
                            }));
              }));
}

var Decoration = {
  addBackground: addBackground,
  remove: remove,
  removeAll: removeAll
};

function make(globalStoragePath, editor) {
  var $$document = editor.document;
  var filePath = $$document.fileName;
  return {
          editor: editor,
          document: $$document,
          filePath: filePath,
          globalStoragePath: globalStoragePath,
          specifications: [],
          subscriptions: []
        };
}

function destroy(state) {
  Belt_Array.forEach(state.subscriptions, (function (prim) {
          return prim.dispose();
        }));
  state.subscriptions = [];
  Belt_Array.forEach(state.specifications, Response$Guabao.Specification.destroy);
  state.specifications = [];
  
}

exports.subscribe = subscribe;
exports.display = display;
exports.displayError = displayError;
exports.updateConnectionStatus = updateConnectionStatus;
exports.focus = focus;
exports.sendLSPRequest = sendLSPRequest;
exports.Spec = Spec;
exports.handleResponseKind = handleResponseKind;
exports.Decoration = Decoration;
exports.make = make;
exports.destroy = destroy;
/* VSCode Not a pure module */

// Generated by BUCKLESCRIPT, PLEASE EDIT WITH CARE
'use strict';

var Curry = require("bs-platform/lib/js/curry.js");
var $$Promise = require("reason-promise/lib/js/src/js/promise.js");
var Belt_Option = require("bs-platform/lib/js/belt_Option.js");
var Caml_chrome_debugger = require("bs-platform/lib/js/caml_chrome_debugger.js");
var Connection$Guacamole = require("./Connection.bs.js");

function toString(param) {
  if (param.tag) {
    return /* tuple */[
            "JSON Decode Error",
            param[0] + ("\nJSON from GCL: \n" + JSON.stringify(param[1]))
          ];
  } else {
    return Connection$Guacamole.$$Error.toString(param[0]);
  }
}

var $$Error = {
  toString: toString
};

function Impl(Editor) {
  var connect = function (state) {
    var match = state.connection;
    if (match !== undefined) {
      return $$Promise.resolved(/* Ok */Caml_chrome_debugger.variant("Ok", 0, [match]));
    } else {
      return $$Promise.tapOk($$Promise.mapError(Connection$Guacamole.make(Editor.getGCLPath, Editor.setGCLPath), (function (e) {
                        return /* Connection */Caml_chrome_debugger.variant("Connection", 0, [e]);
                      })), (function (conn) {
                    state.connection = conn;
                    return /* () */0;
                  }));
    }
  };
  var disconnect = function (state) {
    var match = state.connection;
    if (match !== undefined) {
      return Connection$Guacamole.disconnect(match);
    } else {
      return $$Promise.resolved(/* () */0);
    }
  };
  var make = function (context, editor) {
    return {
            editor: Curry._2(Editor.make, editor, context),
            connection: undefined,
            panel: undefined
          };
  };
  var destroy = function (state) {
    Belt_Option.forEach(state.panel, (function (panel) {
            panel.dispose();
            return /* () */0;
          }));
    return $$Promise.resolved(/* () */0);
  };
  return {
          make: make,
          destroy: destroy,
          connect: connect,
          disconnect: disconnect
        };
}

exports.$$Error = $$Error;
exports.Impl = Impl;
/* Promise Not a pure module */

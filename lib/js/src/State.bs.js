// Generated by ReScript, PLEASE EDIT WITH CARE
'use strict';

var VSCode = require("bs-vscode/lib/js/src/VSCode.bs.js");
var Vscode = require("vscode");
var $$Promise = require("reason-promise/lib/js/src/js/promise.bs.js");
var Belt_Array = require("bs-platform/lib/js/belt_Array.js");
var Json_decode = require("@glennsl/bs-json/lib/js/src/Json_decode.bs.js");
var GCL$Guacamole = require("./GCL.bs.js");
var LSP$Guacamole = require("./LSP.bs.js");
var Req$Guacamole = require("./Util/Req.bs.js");
var Chan$Guacamole = require("./Util/Chan.bs.js");
var Request$Guacamole = require("./Request.bs.js");
var Caml_js_exceptions = require("bs-platform/lib/js/caml_js_exceptions.js");
var Response$Guacamole = require("./Response.bs.js");
var VscodeLanguageclient = require("vscode-languageclient");

function subscribe(disposable, state) {
  state.subscriptions.push(disposable);
  
}

function handleResponse(state, response) {
  switch (response.TAG | 0) {
    case /* Decorate */0 :
        Belt_Array.forEach(state.decorations, (function (prim) {
                prim.dispose();
                
              }));
        state.decorations = [];
        var ranges = Belt_Array.map(response._0, GCL$Guacamole.Loc.toRange);
        var rangeBehavior = VSCode.DecorationRangeBehavior.toEnum(/* ClosedClosed */1);
        var rulerColor = VSCode.StringOr.others(new Vscode.ThemeColor("editorOverviewRuler.warningForeground"));
        var overviewRulerLane = VSCode.OverviewRulerLane.toEnum(/* Left */0);
        var backgroundColor = VSCode.StringOr.others(new Vscode.ThemeColor("editorOverviewRuler.warningForeground"));
        var after = {
          color: backgroundColor,
          contentText: "*"
        };
        var options = {
          after: after,
          overviewRulerColor: rulerColor,
          overviewRulerLane: overviewRulerLane,
          rangeBehavior: rangeBehavior
        };
        var decoration = Vscode.window.createTextEditorDecorationType(options);
        state.decorations.push(decoration);
        state.editor.setDecorations(decoration, ranges);
        return ;
    case /* Error */1 :
        console.log(response._0);
        return ;
    case /* OK */2 :
        Req$Guacamole.send(state.viewReq, {
              TAG: 1,
              _0: {
                TAG: 0,
                _0: "Proof Obligations",
                [Symbol.for("name")]: "Plain"
              },
              _1: {
                TAG: 0,
                _0: response._0,
                _1: response._1,
                _2: response._3,
                [Symbol.for("name")]: "ProofObligations"
              },
              [Symbol.for("name")]: "Display"
            });
        return ;
    default:
      return ;
  }
}

function decodeResponse(json) {
  try {
    return Response$Guacamole.decode(json);
  }
  catch (raw_msg){
    var msg = Caml_js_exceptions.internalToOCamlException(raw_msg);
    if (msg.RE_EXN_ID === Json_decode.DecodeError) {
      return {
              TAG: 1,
              _0: [{
                  _0: /* Others */0,
                  _1: {
                    TAG: 5,
                    _0: msg._1,
                    _1: json,
                    [Symbol.for("name")]: "CannotDecodeResponse"
                  },
                  [Symbol.for("name")]: "Error"
                }],
              [Symbol.for("name")]: "Error"
            };
    }
    throw msg;
  }
}

function make(editor) {
  var setupLSPClient = function (param) {
    var serverOptions = LSP$Guacamole.ServerOptions.makeCommand("gcl");
    var documentSelector = [VSCode.StringOr.others({
            language: "guacamole",
            pattern: undefined,
            scheme: "file"
          })];
    var synchronize = Vscode.workspace.createFileSystemWatcher('**/.clientrc', false, false, false);
    var clientOptions = LSP$Guacamole.LanguageClientOptions.make(documentSelector, synchronize);
    return new VscodeLanguageclient.LanguageClient("guacamoleLanguageServer", "Guacamole Language Server", serverOptions, clientOptions);
  };
  var client = setupLSPClient(undefined);
  client.start();
  var $$document = editor.document;
  var filePath = $$document.fileName;
  var state = {
    editor: editor,
    document: $$document,
    filePath: filePath,
    client: client,
    viewReq: Req$Guacamole.make(undefined),
    viewResChan: Chan$Guacamole.make(undefined),
    decorations: [],
    subscriptions: []
  };
  $$Promise.getOk($$Promise.Js.toResult(client.onReady()), (function (param) {
          client.onNotification("guacamole", (function (json) {
                  var response = decodeResponse(json);
                  return handleResponse(state, response);
                }));
          
        }));
  return state;
}

function sendRequest(state, request) {
  var value = Request$Guacamole.encode(request);
  return $$Promise.flatMapOk($$Promise.flatMapOk($$Promise.Js.toResult(state.client.onReady()), (function (param) {
                    return $$Promise.Js.toResult(state.client.sendRequest("guacamole", value));
                  })), (function (json) {
                var response = decodeResponse(json);
                return $$Promise.resolved({
                            TAG: 0,
                            _0: response,
                            [Symbol.for("name")]: "Ok"
                          });
              }));
}

function destroy(state) {
  state.client.stop();
  Belt_Array.forEach(state.decorations, (function (prim) {
          prim.dispose();
          
        }));
  state.decorations = [];
  Belt_Array.forEach(state.subscriptions, (function (prim) {
          return prim.dispose();
        }));
  state.subscriptions = [];
  
}

exports.subscribe = subscribe;
exports.handleResponse = handleResponse;
exports.decodeResponse = decodeResponse;
exports.make = make;
exports.sendRequest = sendRequest;
exports.destroy = destroy;
/* VSCode Not a pure module */

// Generated by ReScript, PLEASE EDIT WITH CARE
'use strict';

var VSCode = require("bs-vscode/lib/js/src/VSCode.bs.js");
var Vscode = require("vscode");
var Caml_option = require("bs-platform/lib/js/caml_option.js");

function decorate(editor, decoration, ranges) {
  editor.setDecorations(decoration, ranges);
  
}

function highlightBackgroundPrim(editor, backgroundColor, ranges) {
  var rangeBehavior = VSCode.DecorationRangeBehavior.toEnum(/* ClosedClosed */1);
  var options = {
    backgroundColor: backgroundColor,
    rangeBehavior: rangeBehavior
  };
  var decoration = Vscode.window.createTextEditorDecorationType(options);
  decorate(editor, decoration, ranges);
  return decoration;
}

function highlightBackground(editor, style, ranges) {
  return highlightBackgroundPrim(editor, VSCode.ThemeColor.themeColor(new Vscode.ThemeColor(style)), ranges);
}

function highlightBackgroundWithColor(editor, color, ranges) {
  return highlightBackgroundPrim(editor, VSCode.ThemeColor.string(color), ranges);
}

function decorateTextPrim(editor, color, ranges) {
  var rangeBehavior = VSCode.DecorationRangeBehavior.toEnum(/* ClosedClosed */1);
  var options = {
    color: color,
    rangeBehavior: rangeBehavior
  };
  var decoration = Vscode.window.createTextEditorDecorationType(options);
  decorate(editor, decoration, ranges);
  return decoration;
}

function decorateText(editor, style, ranges) {
  return decorateTextPrim(editor, VSCode.ThemeColor.themeColor(new Vscode.ThemeColor(style)), ranges);
}

function decorateTextWithColor(editor, color, ranges) {
  return decorateTextPrim(editor, VSCode.ThemeColor.string(color), ranges);
}

function overlayTextPrim(editor, color, text, range) {
  var after = {
    color: color,
    contentText: text
  };
  var options = {
    after: after
  };
  var decoration = Vscode.window.createTextEditorDecorationType(options);
  decorate(editor, decoration, [range]);
  return decoration;
}

function overlayText(editor, style, text, range) {
  return overlayTextPrim(editor, VSCode.ThemeColor.themeColor(new Vscode.ThemeColor(style)), text, range);
}

function overlayTextWithColor(editor, color, text, range) {
  return overlayTextPrim(editor, VSCode.ThemeColor.string(color), text, range);
}

function underlineText(editor, range) {
  var rangeBehavior = VSCode.DecorationRangeBehavior.toEnum(/* OpenOpen */0);
  var options = {
    rangeBehavior: rangeBehavior,
    textDecoration: "underline dotted"
  };
  var decoration = Vscode.window.createTextEditorDecorationType(options);
  decorate(editor, decoration, [range]);
  return decoration;
}

function destroy(prim) {
  prim.dispose();
  
}

var Decoration = {
  decorate: decorate,
  highlightBackgroundPrim: highlightBackgroundPrim,
  highlightBackground: highlightBackground,
  highlightBackgroundWithColor: highlightBackgroundWithColor,
  decorateTextPrim: decorateTextPrim,
  decorateText: decorateText,
  decorateTextWithColor: decorateTextWithColor,
  overlayTextPrim: overlayTextPrim,
  overlayText: overlayText,
  overlayTextWithColor: overlayTextWithColor,
  underlineText: underlineText,
  destroy: destroy
};

function getAll($$document) {
  return $$document.getText(undefined);
}

function get($$document, range) {
  return $$document.getText(Caml_option.some(range));
}

function insert($$document, point, text) {
  var workspaceEdit = new Vscode.WorkspaceEdit();
  workspaceEdit.insert($$document.uri, point, text, undefined);
  return Vscode.workspace.applyEdit(workspaceEdit);
}

function select(editor, range) {
  var start = range.start;
  var end_ = range.end;
  var selection = new Vscode.Selection(start, end_);
  editor.selection = selection;
  
}

function replace($$document, range, text) {
  var workspaceEdit = new Vscode.WorkspaceEdit();
  workspaceEdit.replace($$document.uri, range, text, undefined);
  return Vscode.workspace.applyEdit(workspaceEdit);
}

function $$delete($$document, range) {
  var workspaceEdit = new Vscode.WorkspaceEdit();
  workspaceEdit.delete($$document.uri, range, undefined);
  return Vscode.workspace.applyEdit(workspaceEdit);
}

var $$Text = {
  getAll: getAll,
  get: get,
  insert: insert,
  select: select,
  replace: replace,
  $$delete: $$delete
};

exports.Decoration = Decoration;
exports.$$Text = $$Text;
/* VSCode Not a pure module */

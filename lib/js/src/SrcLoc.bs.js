// Generated by ReScript, PLEASE EDIT WITH CARE
'use strict';

var Vscode = require("vscode");
var Json_decode = require("@glennsl/bs-json/lib/js/src/Json_decode.bs.js");
var Json_encode = require("@glennsl/bs-json/lib/js/src/Json_encode.bs.js");
var Util$Guacamole = require("./Util/Util.bs.js");

function toVSCodePos(pos) {
  return new Vscode.Position(pos.line - 1 | 0, pos.column - 1 | 0);
}

function fromVSCodePos(pos, $$document) {
  return {
          path: $$document.fileName,
          line: pos.line + 1 | 0,
          column: pos.character + 1 | 0,
          offset: $$document.offsetAt(pos)
        };
}

function toString(pos) {
  return String(pos.line) + ":" + String(pos.column);
}

function translate(by, pos) {
  return {
          path: pos.path,
          line: pos.line + by.line | 0,
          column: pos.column + by.column | 0,
          offset: pos.offset + by.offset | 0
        };
}

function translateBy(line, column, offset, pos) {
  return {
          path: pos.path,
          line: pos.line + line | 0,
          column: pos.column + column | 0,
          offset: pos.offset + offset | 0
        };
}

function decode(param) {
  return Json_decode.map((function (param) {
                return {
                        path: param[0],
                        line: param[1],
                        column: param[2],
                        offset: param[3]
                      };
              }), (function (param) {
                return Json_decode.tuple4(Json_decode.string, Json_decode.$$int, Json_decode.$$int, Json_decode.$$int, param);
              }), param);
}

function encode(pos) {
  return Json_encode.tuple4((function (prim) {
                return prim;
              }), (function (prim) {
                return prim;
              }), (function (prim) {
                return prim;
              }), (function (prim) {
                return prim;
              }), [
              pos.path,
              pos.line,
              pos.column,
              pos.offset
            ]);
}

var Pos = {
  toVSCodePos: toVSCodePos,
  fromVSCodePos: fromVSCodePos,
  toString: toString,
  translate: translate,
  translateBy: translateBy,
  decode: decode,
  encode: encode
};

function toVSCodeRange(x) {
  return new Vscode.Range(toVSCodePos(x._0), toVSCodePos(x._1));
}

function toString$1(range) {
  var end = range._1;
  var start = range._0;
  if (start.line === end.line) {
    return String(start.line) + ":" + String(start.column) + "-" + String(end.column);
  } else {
    return String(start.line) + ":" + String(start.column) + "-" + String(end.line) + ":" + String(end.column);
  }
}

function translate$1(by, x) {
  return {
          _0: translate(x._0, by._0),
          _1: translate(x._1, by._1),
          [Symbol.for("name")]: "Range"
        };
}

function translateBy$1(startY, startX, startZ, endY, endX, endZ, x) {
  return {
          _0: translateBy(startY, startX, startZ, x._0),
          _1: translateBy(endY, endX, endZ, x._1),
          [Symbol.for("name")]: "Range"
        };
}

function decode$1(param) {
  return Json_decode.map((function (param) {
                return {
                        _0: param[0],
                        _1: param[1],
                        [Symbol.for("name")]: "Range"
                      };
              }), (function (param) {
                return Json_decode.pair(decode, decode, param);
              }), param);
}

function encode$1(x) {
  return Json_encode.pair(encode, encode, [
              x._0,
              x._1
            ]);
}

var $$Range = {
  toVSCodeRange: toVSCodeRange,
  toString: toString$1,
  translate: translate$1,
  translateBy: translateBy$1,
  decode: decode$1,
  encode: encode$1
};

function toVSCodeRange$1(x) {
  if (x) {
    return new Vscode.Range(toVSCodePos(x._0), toVSCodePos(x._1));
  } else {
    return new Vscode.Range(new Vscode.Position(0, 0), new Vscode.Position(0, 0));
  }
}

function toString$2(x) {
  if (x) {
    return toString(x._0) + ("-" + toString(x._1));
  } else {
    return "NoLoc";
  }
}

function translate$2(by, x) {
  if (!x) {
    return by;
  }
  var y = x._1;
  var x$1 = x._0;
  if (by) {
    return {
            _0: translate(x$1, by._0),
            _1: translate(y, by._1),
            [Symbol.for("name")]: "Loc"
          };
  } else {
    return {
            _0: x$1,
            _1: y,
            [Symbol.for("name")]: "Loc"
          };
  }
}

function translateBy$2(startY, startX, startZ, endY, endX, endZ, x) {
  if (x) {
    return {
            _0: translateBy(startY, startX, startZ, x._0),
            _1: translateBy(endY, endX, endZ, x._1),
            [Symbol.for("name")]: "Loc"
          };
  } else {
    return {
            _0: {
              path: "",
              line: startY,
              column: startX,
              offset: startZ
            },
            _1: {
              path: "",
              line: endY,
              column: endX,
              offset: endZ
            },
            [Symbol.for("name")]: "Loc"
          };
  }
}

var decode$2 = Util$Guacamole.Decode.sum(function (x) {
      switch (x) {
        case "Loc" :
            return {
                    TAG: 0,
                    _0: (function (param) {
                        return Json_decode.map((function (param) {
                                      return {
                                              _0: param[0],
                                              _1: param[1],
                                              [Symbol.for("name")]: "Loc"
                                            };
                                    }), (function (param) {
                                      return Json_decode.pair(decode, decode, param);
                                    }), param);
                      }),
                    [Symbol.for("name")]: "Contents"
                  };
        case "NoLoc" :
            return {
                    TAG: 1,
                    _0: (function (param) {
                        return /* NoLoc */0;
                      }),
                    [Symbol.for("name")]: "TagOnly"
                  };
        default:
          throw {
                RE_EXN_ID: Json_decode.DecodeError,
                _1: "[Loc] Unknown constructor: " + x,
                Error: new Error()
              };
      }
    });

function encode$2(x) {
  if (x) {
    return Json_encode.object_({
                hd: [
                  "tag",
                  "Loc"
                ],
                tl: {
                  hd: [
                    "contents",
                    Json_encode.pair(encode, encode, [
                          x._0,
                          x._1
                        ])
                  ],
                  tl: /* [] */0
                }
              });
  } else {
    return Json_encode.object_({
                hd: [
                  "tag",
                  "NoLoc"
                ],
                tl: /* [] */0
              });
  }
}

var Loc = {
  toVSCodeRange: toVSCodeRange$1,
  toString: toString$2,
  translate: translate$2,
  translateBy: translateBy$2,
  decode: decode$2,
  encode: encode$2
};

exports.Pos = Pos;
exports.$$Range = $$Range;
exports.Loc = Loc;
/* decode Not a pure module */

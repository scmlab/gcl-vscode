// Generated by ReScript, PLEASE EDIT WITH CARE
'use strict';

var Curry = require("rescript/lib/js/curry.js");
var $$Promise = require("reason-promise/lib/js/src/js/promise.bs.js");
var Belt_Array = require("rescript/lib/js/belt_Array.js");
var Json_decode = require("@glennsl/bs-json/lib/js/src/Json_decode.bs.js");
var Config$Guabao = require("./Config.bs.js");
var Request$Guabao = require("./Request.bs.js");
var Response$Guabao = require("./Response.bs.js");
var Caml_js_exceptions = require("rescript/lib/js/caml_js_exceptions.js");
var Connection__Error$Guabao = require("./Connection/Connection__Error.bs.js");
var Connection__Client$Guabao = require("./Connection/Connection__Client.bs.js");
var Source__Path$LanguageServerMule = require("language-server-mule/lib/js/src/Source/Source__Path.bs.js");
var Source__Port$LanguageServerMule = require("language-server-mule/lib/js/src/Source/Source__Port.bs.js");
var Source__Prebuilt$LanguageServerMule = require("language-server-mule/lib/js/src/Source/Source__Prebuilt.bs.js");

function probe(globalStoragePath) {
  console.log("globalStoragePath", globalStoragePath);
  return $$Promise.flatMapError($$Promise.flatMapError($$Promise.map(Source__Port$LanguageServerMule.probe(3000, "localhost"), (function (result) {
                        if (result.TAG === /* Ok */0) {
                          return {
                                  TAG: /* Ok */0,
                                  _0: {
                                    TAG: /* ViaTCP */1,
                                    _0: 3000
                                  }
                                };
                        } else {
                          return {
                                  TAG: /* Error */1,
                                  _0: {
                                    TAG: /* CannotConnectViaTCP */1,
                                    _0: result._0
                                  }
                                };
                        }
                      })), (function (error) {
                    console.log(Connection__Error$Guabao.toString(error));
                    var context = {
                      username: "scmlab",
                      repository: "gcl",
                      userAgent: "gcl-vscode",
                      globalStoragePath: globalStoragePath,
                      expectedVersion: Config$Guabao.version
                    };
                    return $$Promise.mapError($$Promise.mapOk(Source__Prebuilt$LanguageServerMule.get(context), (function (path) {
                                      return {
                                              TAG: /* ViaPrebuilt */2,
                                              _0: Config$Guabao.version,
                                              _1: path.trim()
                                            };
                                    })), (function (e) {
                                  return {
                                          TAG: /* CannotConnectViaPrebuilt */2,
                                          _0: e
                                        };
                                }));
                  })), (function (error) {
                console.log(Connection__Error$Guabao.toString(error));
                var name = "gcl";
                return $$Promise.mapError($$Promise.mapOk(Source__Path$LanguageServerMule.search(name), (function (path) {
                                  return {
                                          TAG: /* ViaStdIO */0,
                                          _0: name,
                                          _1: path.trim()
                                        };
                                })), (function (e) {
                              return {
                                      TAG: /* CannotConnectViaStdIO */0,
                                      _0: e
                                    };
                            }));
              }));
}

var singleton = {
  contents: /* Disconnected */0
};

function getPendingRequests(param) {
  var match = singleton.contents;
  if (typeof match === "number") {
    return [];
  } else if (match.TAG === /* Connecting */0) {
    return match._0;
  } else {
    return [];
  }
}

function decodeResponse(json) {
  var response;
  try {
    response = Response$Guabao.decode(json);
  }
  catch (raw_msg){
    var msg = Caml_js_exceptions.internalToOCamlException(raw_msg);
    if (msg.RE_EXN_ID === Json_decode.DecodeError) {
      return {
              TAG: /* Error */1,
              _0: {
                TAG: /* CannotDecodeResponse */5,
                _0: msg._1,
                _1: json
              }
            };
    }
    throw msg;
  }
  return {
          TAG: /* Ok */0,
          _0: response
        };
}

function start(globalStoragePath) {
  var client = singleton.contents;
  if (typeof client !== "number") {
    if (client.TAG === /* Connecting */0) {
      return client._1;
    } else {
      return $$Promise.resolved({
                  TAG: /* Ok */0,
                  _0: Connection__Client$Guabao.getMethod(client._0)
                });
    }
  }
  var match = $$Promise.pending(undefined);
  var resolve = match[1];
  singleton.contents = {
    TAG: /* Connecting */0,
    _0: [],
    _1: match[0]
  };
  return $$Promise.map($$Promise.flatMapOk(probe(globalStoragePath), Connection__Client$Guabao.make), (function (result) {
                if (result.TAG === /* Ok */0) {
                  var client = result._0;
                  singleton.contents = {
                    TAG: /* Connected */1,
                    _0: client
                  };
                  Belt_Array.forEach(getPendingRequests(undefined), (function (param) {
                          return $$Promise.get($$Promise.flatMapOk(Connection__Client$Guabao.sendRequest(client, Request$Guabao.encode(param[0])), (function (json) {
                                            return $$Promise.resolved(decodeResponse(json));
                                          })), param[1]);
                        }));
                  Curry._1(resolve, {
                        TAG: /* Ok */0,
                        _0: Connection__Client$Guabao.getMethod(client)
                      });
                  console.log("[ connection ] established");
                  return {
                          TAG: /* Ok */0,
                          _0: Connection__Client$Guabao.getMethod(client)
                        };
                }
                var error = result._0;
                singleton.contents = /* Disconnected */0;
                Belt_Array.forEach(getPendingRequests(undefined), (function (param) {
                        return Curry._1(param[1], {
                                    TAG: /* Error */1,
                                    _0: error
                                  });
                      }));
                Curry._1(resolve, {
                      TAG: /* Error */1,
                      _0: error
                    });
                return {
                        TAG: /* Error */1,
                        _0: error
                      };
              }));
}

function stop(param) {
  var client = singleton.contents;
  if (typeof client === "number") {
    return $$Promise.resolved(undefined);
  }
  if (client.TAG === /* Connecting */0) {
    return $$Promise.flatMap(client._1, (function (param) {
                  return stop(undefined);
                }));
  }
  singleton.contents = /* Disconnected */0;
  console.log("[ connection ] severed");
  return Connection__Client$Guabao.destroy(client._0);
}

function sendRequest(globalStoragePath, request) {
  var client = singleton.contents;
  if (typeof client === "number") {
    return $$Promise.flatMapOk(start(globalStoragePath), (function (param) {
                  return sendRequest(globalStoragePath, request);
                }));
  }
  if (client.TAG !== /* Connecting */0) {
    return $$Promise.flatMapOk(Connection__Client$Guabao.sendRequest(client._0, Request$Guabao.encode(request)), (function (json) {
                  return $$Promise.resolved(decodeResponse(json));
                }));
  }
  var match = $$Promise.pending(undefined);
  client._0.push([
        request,
        match[1]
      ]);
  return match[0];
}

function onResponse(handler) {
  return Connection__Client$Guabao.onResponse(function (json) {
              return Curry._1(handler, decodeResponse(json));
            });
}

var Module = {
  start: start,
  stop: stop,
  sendRequest: sendRequest,
  onResponse: onResponse,
  onError: Connection__Client$Guabao.onError
};

var Client;

var $$Error;

var onError = Connection__Client$Guabao.onError;

exports.Client = Client;
exports.$$Error = $$Error;
exports.Module = Module;
exports.start = start;
exports.stop = stop;
exports.sendRequest = sendRequest;
exports.onResponse = onResponse;
exports.onError = onError;
/* Promise Not a pure module */

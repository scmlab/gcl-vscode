// Generated by BUCKLESCRIPT, PLEASE EDIT WITH CARE
'use strict';

var Json = require("@glennsl/bs-json/lib/js/src/Json.bs.js");
var Curry = require("bs-platform/lib/js/curry.js");
var $$Promise = require("reason-promise/lib/js/src/js/promise.js");
var Belt_Option = require("bs-platform/lib/js/belt_Option.js");
var Caml_option = require("bs-platform/lib/js/caml_option.js");
var Event$Guacamole = require("./Util/Event.bs.js");
var Process$AgdaMode = require("agda-mode/lib/js/src/Process.bs.js");
var Caml_chrome_debugger = require("bs-platform/lib/js/caml_chrome_debugger.js");

function Impl(Interface) {
  var toString = function (param) {
    switch (param.tag | 0) {
      case /* PathSearch */0 :
          return Curry._1(Process$AgdaMode.PathSearch.$$Error.toString, param[0]);
      case /* Validation */1 :
          return Curry._1(Process$AgdaMode.Validation.$$Error.toString, param[0]);
      case /* Process */2 :
          return Process$AgdaMode.$$Error.toString(param[0]);
      
    }
  };
  var $$Error = {
    toString: toString
  };
  var isConnected = function (connection) {
    return Curry._1(connection.process.isConnected, /* () */0);
  };
  var disconnect = function (connection) {
    return Curry._1(connection.process.disconnect, /* () */0);
  };
  var wire = function (connection) {
    var unfinishedMsg = {
      contents: undefined
    };
    Curry._1(connection.process.emitter.on, (function (param) {
            if (param.tag) {
              return Curry._1(connection.emitter.emit, /* Error */Caml_chrome_debugger.variant("Error", 1, [/* Process */Caml_chrome_debugger.variant("Process", 2, [param[0]])]));
            } else {
              var data = param[0];
              var match = unfinishedMsg.contents;
              var augmented = match !== undefined ? match + data : data;
              var match$1 = Json.parse(augmented);
              if (match$1 !== undefined) {
                unfinishedMsg.contents = undefined;
                Curry._1(connection.emitter.emit, /* Ok */Caml_chrome_debugger.variant("Ok", 0, [Caml_option.valFromOption(match$1)]));
                return /* () */0;
              } else {
                unfinishedMsg.contents = augmented;
                return /* () */0;
              }
            }
          }));
    return /* () */0;
  };
  var getGCLPath = function (param) {
    var storedPath = Belt_Option.mapWithDefault(Curry._1(Interface.getGCLPath, /* () */0), "", (function (prim) {
            return prim.trim();
          }));
    if (storedPath === "" || storedPath === ".") {
      return $$Promise.mapError($$Promise.mapOk(Process$AgdaMode.PathSearch.run("gcl"), (function (prim) {
                        return prim.trim();
                      })), (function (e) {
                    return /* PathSearch */Caml_chrome_debugger.variant("PathSearch", 0, [e]);
                  }));
    } else {
      return $$Promise.resolved(/* Ok */Caml_chrome_debugger.variant("Ok", 0, [storedPath]));
    }
  };
  var validateGCLPath = function (path) {
    return $$Promise.mapError(Process$AgdaMode.Validation.run(path + " --help", (function (output) {
                      if (/^GCL/.test(output)) {
                        return /* Ok */Caml_chrome_debugger.variant("Ok", 0, [path]);
                      } else {
                        return /* Error */Caml_chrome_debugger.variant("Error", 1, [path]);
                      }
                    })), (function (e) {
                  return /* Validation */Caml_chrome_debugger.variant("Validation", 1, [e]);
                }));
  };
  var make = function (param) {
    return $$Promise.tapOk($$Promise.mapOk($$Promise.flatMapOk($$Promise.flatMapOk(getGCLPath(/* () */0), validateGCLPath), (function (path) {
                          return $$Promise.map(Curry._1(Interface.setGCLPath, path), (function (param) {
                                        return /* Ok */Caml_chrome_debugger.variant("Ok", 0, [path]);
                                      }));
                        })), (function (path) {
                      var $$process = Process$AgdaMode.make(path, []);
                      return {
                              path: path,
                              process: $$process,
                              emitter: Event$Guacamole.make(/* () */0)
                            };
                    })), wire);
  };
  var send = function (request, connection) {
    var promise = Curry._1(connection.emitter.once, /* () */0);
    var result = Curry._1(connection.process.send, request);
    if (result.tag) {
      return $$Promise.resolved(/* Error */Caml_chrome_debugger.variant("Error", 1, [/* Process */Caml_chrome_debugger.variant("Process", 2, [result[0]])]));
    } else {
      return promise;
    }
  };
  return {
          Process: /* alias */0,
          $$Error: $$Error,
          isConnected: isConnected,
          disconnect: disconnect,
          wire: wire,
          getGCLPath: getGCLPath,
          validateGCLPath: validateGCLPath,
          make: make,
          send: send
        };
}

exports.Impl = Impl;
/* Promise Not a pure module */

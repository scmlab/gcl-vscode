// Generated by BUCKLESCRIPT, PLEASE EDIT WITH CARE
'use strict';

var Curry = require("bs-platform/lib/js/curry.js");
var Belt_Option = require("bs-platform/lib/js/belt_Option.js");
var Caml_chrome_debugger = require("bs-platform/lib/js/caml_chrome_debugger.js");

function onMessage(callback) {
  window.addEventListener("message", (function (_event) {
          return Curry._1(callback, _event.data);
        }));
  return /* () */0;
}

var Api = {
  onMessage: onMessage
};

var Disposable = { };

var Memento = { };

var ExtensionContext = { };

var simple = { };

function sized(v) {
  return v;
}

var Layout = {
  simple: simple,
  sized: sized
};

var Commands = {
  Layout: Layout
};

function makeChange(authority, fragment, path, query, scheme, param) {
  return {
          authority: authority,
          fragment: fragment,
          path: path,
          query: query,
          scheme: scheme
        };
}

var Uri = {
  makeChange: makeChange
};

function toEnum(param) {
  switch (param) {
    case /* Active */0 :
        return -1;
    case /* Beside */1 :
        return -2;
    case /* Eight */2 :
        return 8;
    case /* Five */3 :
        return 5;
    case /* Four */4 :
        return 4;
    case /* Nine */5 :
        return 9;
    case /* One */6 :
        return 1;
    case /* Seven */7 :
        return 7;
    case /* Six */8 :
        return 6;
    case /* Three */9 :
        return 3;
    case /* Two */10 :
        return 2;
    
  }
}

function fromEnum(param) {
  switch (param) {
    case -2 :
        return /* Beside */1;
    case -1 :
        return /* Active */0;
    case 1 :
        return /* One */6;
    case 0 :
    case 2 :
        return /* Two */10;
    case 3 :
        return /* Three */9;
    case 4 :
        return /* Four */4;
    case 5 :
        return /* Five */3;
    case 6 :
        return /* Six */8;
    case 7 :
        return /* Seven */7;
    case 8 :
        return /* Eight */2;
    case 9 :
        return /* Nine */5;
    default:
      return /* Two */10;
  }
}

var ViewColumn = {
  toEnum: toEnum,
  fromEnum: fromEnum
};

var WebviewOptions = { };

var Webview = { };

function single(uri) {
  return uri;
}

function both(dark, light) {
  return {
          dark: dark,
          light: light
        };
}

function classify(param) {
  if ((v.dark === undefined)) {
    return /* Single */Caml_chrome_debugger.variant("Single", 0, [param]);
  } else {
    return /* Both */Caml_chrome_debugger.variant("Both", 1, [
              param,
              param
            ]);
  }
}

var IconPath = {
  single: single,
  both: both,
  classify: classify
};

var Options = { };

var WebviewPanel = {
  IconPath: IconPath,
  Options: Options
};

var Position = { };

var $$Range = { };

var TextLine = { };

function toEnum$1(param) {
  if (param) {
    return 1;
  } else {
    return 2;
  }
}

function fromEnum$1(param) {
  if (param !== 2) {
    return /* LF */1;
  } else {
    return /* CRLF */0;
  }
}

var EndOfLine = {
  toEnum: toEnum$1,
  fromEnum: fromEnum$1
};

function eol(self) {
  return fromEnum$1(self.eol);
}

var TextDocument = {
  eol: eol
};

var TextEditorCursorStyle = { };

var TextEditorOptions = { };

var $$Selection = { };

function setEndOfLine(self, eol) {
  self.setEndOfLine(eol ? 1 : 2);
  return /* () */0;
}

var TextEditorEdit = {
  setEndOfLine: setEndOfLine
};

var SnippetString = { };

var TextEditorRevealType = { };

var TextEditorDecorationType = { };

var DecorationOptions = { };

function viewColumn(self) {
  return Belt_Option.map(self.viewColumn, fromEnum);
}

function show(self, viewColumn) {
  self.show(Belt_Option.map(viewColumn, toEnum));
  return /* () */0;
}

var TextEditor = {
  viewColumn: viewColumn,
  show: show
};

var Terminal = { };

var WindowState = { };

var TextEditorOptionsChangeEvent = { };

var TextEditorSelectionChangeEvent = { };

var TextEditorSelectionChangeKind = { };

var TextEditorViewColumnChangeEvent = { };

var TextEditorVisibleRangesChangeEvent = { };

var InputBox = { };

var OutputChannel = { };

var QuickPickItem = { };

var QuickPick = { };

var StatusBarItem = { };

var TerminalOptions = { };

var ExtensionTerminalOptions = { };

var DecorationRenderOptions = { };

var TreeViewOptions = { };

var TreeView = { };

function make(enableCommandUris, enableScripts, localResourceRoots, portMapping, enableFindWidget, retainContextWhenHidden, param) {
  return {
          enableCommandUris: enableCommandUris,
          enableScripts: enableScripts,
          localResourceRoots: localResourceRoots,
          portMapping: portMapping,
          enableFindWidget: enableFindWidget,
          retainContextWhenHidden: retainContextWhenHidden
        };
}

var WebviewAndWebviewPanelOptions = {
  make: make
};

var ViewColumnAndPreserveFocus = { };

var TreeDataProvider = { };

var UriHandler = { };

var WebviewPanelSerializer = { };

var MessageOptions = { };

var MessageItem = { };

var InputBoxOptions = { };

var CancellationToken = { };

var OpenDialogOptions = { };

var QuickPickOptions = { };

var SaveDialogOptions = { };

var WorkspaceFolderPickOptions = { };

var WorkspaceFolder = { };

var ProgressOptions = { };

var Progress = { };

var $$Window = { };

var FileSystem = { };

var ConfigurationChangeEvent = { };

var TextDocumentContentChangeEvent = { };

var TextDocumentChangeEvent = { };

var WorkspaceFoldersChangeEvent = { };

var FileCreateEvent = { };

var FileDeleteEvent = { };

var FileRenameEvent = { };

var WorkspaceEdit = { };

var FileWillCreateEvent = { };

var FileWillDeleteEvent = { };

var FileWillRenameEvent = { };

function toEnum$2(param) {
  switch (param) {
    case /* AfterDelay */0 :
        return 2;
    case /* FocusOut */1 :
        return 3;
    case /* Manual */2 :
        return 1;
    
  }
}

function fromEnum$2(param) {
  if (param !== 2) {
    if (param !== 3) {
      return /* Manual */2;
    } else {
      return /* FocusOut */1;
    }
  } else {
    return /* AfterDelay */0;
  }
}

var TextDocumentSaveReason = {
  toEnum: toEnum$2,
  fromEnum: fromEnum$2
};

var TextEdit = { };

function reason(self) {
  return fromEnum$2(self.reason);
}

var TextDocumentWillSaveEvent = {
  reason: reason
};

var GlobPattern = { };

var FileSystemWatcher = { };

var ConfigurationScope = { };

var WorkspaceConfiguration = { };

var TextDocumentContentProvider = { };

var TaskProvider = { };

var FileSystemProvider = { };

var Workspace = { };

exports.Api = Api;
exports.Disposable = Disposable;
exports.Memento = Memento;
exports.ExtensionContext = ExtensionContext;
exports.Commands = Commands;
exports.Uri = Uri;
exports.ViewColumn = ViewColumn;
exports.WebviewOptions = WebviewOptions;
exports.Webview = Webview;
exports.WebviewPanel = WebviewPanel;
exports.Position = Position;
exports.$$Range = $$Range;
exports.TextLine = TextLine;
exports.EndOfLine = EndOfLine;
exports.TextDocument = TextDocument;
exports.TextEditorCursorStyle = TextEditorCursorStyle;
exports.TextEditorOptions = TextEditorOptions;
exports.$$Selection = $$Selection;
exports.TextEditorEdit = TextEditorEdit;
exports.SnippetString = SnippetString;
exports.TextEditorRevealType = TextEditorRevealType;
exports.TextEditorDecorationType = TextEditorDecorationType;
exports.DecorationOptions = DecorationOptions;
exports.TextEditor = TextEditor;
exports.Terminal = Terminal;
exports.WindowState = WindowState;
exports.TextEditorOptionsChangeEvent = TextEditorOptionsChangeEvent;
exports.TextEditorSelectionChangeEvent = TextEditorSelectionChangeEvent;
exports.TextEditorSelectionChangeKind = TextEditorSelectionChangeKind;
exports.TextEditorViewColumnChangeEvent = TextEditorViewColumnChangeEvent;
exports.TextEditorVisibleRangesChangeEvent = TextEditorVisibleRangesChangeEvent;
exports.InputBox = InputBox;
exports.OutputChannel = OutputChannel;
exports.QuickPickItem = QuickPickItem;
exports.QuickPick = QuickPick;
exports.StatusBarItem = StatusBarItem;
exports.TerminalOptions = TerminalOptions;
exports.ExtensionTerminalOptions = ExtensionTerminalOptions;
exports.DecorationRenderOptions = DecorationRenderOptions;
exports.TreeViewOptions = TreeViewOptions;
exports.TreeView = TreeView;
exports.WebviewAndWebviewPanelOptions = WebviewAndWebviewPanelOptions;
exports.ViewColumnAndPreserveFocus = ViewColumnAndPreserveFocus;
exports.TreeDataProvider = TreeDataProvider;
exports.UriHandler = UriHandler;
exports.WebviewPanelSerializer = WebviewPanelSerializer;
exports.MessageOptions = MessageOptions;
exports.MessageItem = MessageItem;
exports.InputBoxOptions = InputBoxOptions;
exports.CancellationToken = CancellationToken;
exports.OpenDialogOptions = OpenDialogOptions;
exports.QuickPickOptions = QuickPickOptions;
exports.SaveDialogOptions = SaveDialogOptions;
exports.WorkspaceFolderPickOptions = WorkspaceFolderPickOptions;
exports.WorkspaceFolder = WorkspaceFolder;
exports.ProgressOptions = ProgressOptions;
exports.Progress = Progress;
exports.$$Window = $$Window;
exports.FileSystem = FileSystem;
exports.ConfigurationChangeEvent = ConfigurationChangeEvent;
exports.TextDocumentContentChangeEvent = TextDocumentContentChangeEvent;
exports.TextDocumentChangeEvent = TextDocumentChangeEvent;
exports.WorkspaceFoldersChangeEvent = WorkspaceFoldersChangeEvent;
exports.FileCreateEvent = FileCreateEvent;
exports.FileDeleteEvent = FileDeleteEvent;
exports.FileRenameEvent = FileRenameEvent;
exports.WorkspaceEdit = WorkspaceEdit;
exports.FileWillCreateEvent = FileWillCreateEvent;
exports.FileWillDeleteEvent = FileWillDeleteEvent;
exports.FileWillRenameEvent = FileWillRenameEvent;
exports.TextDocumentSaveReason = TextDocumentSaveReason;
exports.TextEdit = TextEdit;
exports.TextDocumentWillSaveEvent = TextDocumentWillSaveEvent;
exports.GlobPattern = GlobPattern;
exports.FileSystemWatcher = FileSystemWatcher;
exports.ConfigurationScope = ConfigurationScope;
exports.WorkspaceConfiguration = WorkspaceConfiguration;
exports.TextDocumentContentProvider = TextDocumentContentProvider;
exports.TaskProvider = TaskProvider;
exports.FileSystemProvider = FileSystemProvider;
exports.Workspace = Workspace;
/* No side effect */

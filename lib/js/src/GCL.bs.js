// Generated by BUCKLESCRIPT, PLEASE EDIT WITH CARE
'use strict';

var Curry = require("bs-platform/lib/js/curry.js");
var Belt_List = require("bs-platform/lib/js/belt_List.js");
var Belt_Array = require("bs-platform/lib/js/belt_Array.js");
var Belt_Option = require("bs-platform/lib/js/belt_Option.js");
var Json_decode = require("@glennsl/bs-json/lib/js/src/Json_decode.bs.js");
var Json_encode = require("@glennsl/bs-json/lib/js/src/Json_encode.bs.js");
var Util$Guacamole = require("./Util/Util.bs.js");
var Caml_splice_call = require("bs-platform/lib/js/caml_splice_call.js");
var Caml_chrome_debugger = require("bs-platform/lib/js/caml_chrome_debugger.js");

function toString(param) {
  return String(param[1]) + (":" + String(param[2]));
}

function translate(by, param) {
  return /* Pos */Caml_chrome_debugger.simpleVariant("Pos", [
            param[0],
            param[1] + by[1] | 0,
            param[2] + by[2] | 0
          ]);
}

function translateBy(y, x, param) {
  return /* Pos */Caml_chrome_debugger.simpleVariant("Pos", [
            param[0],
            param[1] + y | 0,
            param[2] + x | 0
          ]);
}

function decode(json) {
  return /* Pos */Caml_chrome_debugger.simpleVariant("Pos", [
            Json_decode.field("filepath", Json_decode.string, json),
            Json_decode.field("line", Json_decode.$$int, json),
            Json_decode.field("column", Json_decode.$$int, json)
          ]);
}

function encode(param) {
  return Json_encode.object_(/* :: */Caml_chrome_debugger.simpleVariant("::", [
                /* tuple */[
                  "filepath",
                  param[0]
                ],
                /* :: */Caml_chrome_debugger.simpleVariant("::", [
                    /* tuple */[
                      "line",
                      param[1]
                    ],
                    /* :: */Caml_chrome_debugger.simpleVariant("::", [
                        /* tuple */[
                          "column",
                          param[2]
                        ],
                        /* [] */0
                      ])
                  ])
              ]));
}

var Pos = {
  toString: toString,
  translate: translate,
  translateBy: translateBy,
  decode: decode,
  encode: encode
};

function toString$1(param) {
  if (param) {
    return toString(param[0]) + ("-" + toString(param[1]));
  } else {
    return "NoLoc";
  }
}

function translate$1(by, param) {
  if (param) {
    var y = param[1];
    var x = param[0];
    if (by) {
      return /* Loc */Caml_chrome_debugger.simpleVariant("Loc", [
                translate(x, by[0]),
                translate(y, by[1])
              ]);
    } else {
      return /* Loc */Caml_chrome_debugger.simpleVariant("Loc", [
                x,
                y
              ]);
    }
  } else {
    return by;
  }
}

function translateBy$1(startY, startX, endY, endX, param) {
  if (param) {
    return /* Loc */Caml_chrome_debugger.simpleVariant("Loc", [
              translateBy(startY, startX, param[0]),
              translateBy(endY, endX, param[1])
            ]);
  } else {
    return /* Loc */Caml_chrome_debugger.simpleVariant("Loc", [
              /* Pos */Caml_chrome_debugger.simpleVariant("Pos", [
                  "",
                  startY,
                  startX
                ]),
              /* Pos */Caml_chrome_debugger.simpleVariant("Pos", [
                  "",
                  endY,
                  endX
                ])
            ]);
  }
}

var decode$1 = Util$Guacamole.Decode.sum((function (tag) {
        switch (tag) {
          case "Loc" :
              return /* Contents */Caml_chrome_debugger.variant("Contents", 0, [(function (json) {
                            return /* Loc */Caml_chrome_debugger.simpleVariant("Loc", [
                                      Json_decode.field("start", decode, json),
                                      Json_decode.field("end", decode, json)
                                    ]);
                          })]);
          case "NoLoc" :
              return /* TagOnly */Caml_chrome_debugger.variant("TagOnly", 1, [(function (param) {
                            return /* NoLoc */0;
                          })]);
          default:
            throw [
                  Json_decode.DecodeError,
                  "[Loc] Unknown constructor: " + tag
                ];
        }
      }));

function encode$1(param) {
  if (param) {
    return Json_encode.object_(/* :: */Caml_chrome_debugger.simpleVariant("::", [
                  /* tuple */[
                    "tag",
                    "Loc"
                  ],
                  /* :: */Caml_chrome_debugger.simpleVariant("::", [
                      /* tuple */[
                        "contents",
                        Json_encode.object_(/* :: */Caml_chrome_debugger.simpleVariant("::", [
                                /* tuple */[
                                  "start",
                                  encode(param[0])
                                ],
                                /* :: */Caml_chrome_debugger.simpleVariant("::", [
                                    /* tuple */[
                                      "end",
                                      encode(param[1])
                                    ],
                                    /* [] */0
                                  ])
                              ]))
                      ],
                      /* [] */0
                    ])
                ]));
  } else {
    return Json_encode.object_(/* :: */Caml_chrome_debugger.simpleVariant("::", [
                  /* tuple */[
                    "tag",
                    "NoLoc"
                  ],
                  /* [] */0
                ]));
  }
}

var Loc = {
  toString: toString$1,
  translate: translate$1,
  translateBy: translateBy$1,
  decode: decode$1,
  encode: encode$1
};

function $$return(x) {
  return /* Complete */Caml_chrome_debugger.variant("Complete", 1, [x]);
}

function flatMap(x, f) {
  if (x.tag) {
    return Curry._1(f, x[0]);
  } else {
    var g = x[0];
    return /* Expect */Caml_chrome_debugger.variant("Expect", 0, [(function (x) {
                  return flatMap(Curry._1(g, x), f);
                })]);
  }
}

var $$var = /* Expect */Caml_chrome_debugger.variant("Expect", 0, [(function (x) {
        return /* Complete */Caml_chrome_debugger.variant("Complete", 1, [x]);
      })]);

var VarArg = {
  $$return: $$return,
  flatMap: flatMap,
  let_: flatMap,
  $$var: $$var
};

function toString$2(param) {
  if (param.tag) {
    if (param[0]) {
      return "True";
    } else {
      return "False";
    }
  } else {
    return String(param[0]);
  }
}

function decode$2(json) {
  return Util$Guacamole.Decode.sum((function (tag) {
                  switch (tag) {
                    case "Bol" :
                        return /* Contents */Caml_chrome_debugger.variant("Contents", 0, [(function (param) {
                                      return Json_decode.map((function (x) {
                                                    return /* Bool */Caml_chrome_debugger.variant("Bool", 1, [x]);
                                                  }), Json_decode.bool, param);
                                    })]);
                    case "Num" :
                        return /* Contents */Caml_chrome_debugger.variant("Contents", 0, [(function (param) {
                                      return Json_decode.map((function (x) {
                                                    return /* Num */Caml_chrome_debugger.variant("Num", 0, [x]);
                                                  }), Json_decode.$$int, param);
                                    })]);
                    default:
                      throw [
                            Json_decode.DecodeError,
                            "[Lit] Unknown constructor: " + tag
                          ];
                  }
                }))(json);
}

function encode$2(param) {
  if (param.tag) {
    return Json_encode.object_(/* :: */Caml_chrome_debugger.simpleVariant("::", [
                  /* tuple */[
                    "tag",
                    "Bol"
                  ],
                  /* :: */Caml_chrome_debugger.simpleVariant("::", [
                      /* tuple */[
                        "contents",
                        param[0]
                      ],
                      /* [] */0
                    ])
                ]));
  } else {
    return Json_encode.object_(/* :: */Caml_chrome_debugger.simpleVariant("::", [
                  /* tuple */[
                    "tag",
                    "Num"
                  ],
                  /* :: */Caml_chrome_debugger.simpleVariant("::", [
                      /* tuple */[
                        "contents",
                        param[0]
                      ],
                      /* [] */0
                    ])
                ]));
  }
}

var Lit = {
  toString: toString$2,
  decode: decode$2,
  encode: encode$2
};

function toString$3(param) {
  switch (param) {
    case /* EQ */0 :
        return "=";
    case /* NEQ */1 :
        return "≠";
    case /* LTE */2 :
        return "≤";
    case /* GTE */3 :
        return "≥";
    case /* LT */4 :
        return "<";
    case /* GT */5 :
        return ">";
    case /* Implies */6 :
        return "→";
    case /* Conj */7 :
        return "∧";
    case /* Disj */8 :
        return "∨";
    case /* Neg */9 :
        return "¬";
    case /* Add */10 :
        return "+";
    case /* Sub */11 :
        return "-";
    case /* Mul */12 :
        return "×";
    case /* Div */13 :
        return "÷";
    case /* Mod */14 :
        return "%";
    
  }
}

function decode$3(param) {
  return Json_decode.map((function (tag) {
                switch (tag) {
                  case "Add" :
                      return /* Add */10;
                  case "Conj" :
                      return /* Conj */7;
                  case "Disj" :
                      return /* Disj */8;
                  case "Div" :
                      return /* Div */13;
                  case "EQ" :
                      return /* EQ */0;
                  case "GT" :
                      return /* GT */5;
                  case "GTE" :
                      return /* GTE */3;
                  case "Implies" :
                      return /* Implies */6;
                  case "LT" :
                      return /* LT */4;
                  case "LTE" :
                      return /* LTE */2;
                  case "Mod" :
                      return /* Mod */14;
                  case "Mul" :
                      return /* Mul */12;
                  case "NEQ" :
                      return /* NEQ */1;
                  case "Neg" :
                      return /* Neg */9;
                  case "Sub" :
                      return /* Sub */11;
                  default:
                    throw [
                          Json_decode.DecodeError,
                          "[Op] Unknown constructor: " + tag
                        ];
                }
              }), Json_decode.string, param);
}

function encode$3(param) {
  switch (param) {
    case /* EQ */0 :
        return "EQ";
    case /* NEQ */1 :
        return "NEQ";
    case /* LTE */2 :
        return "LTE";
    case /* GTE */3 :
        return "GTE";
    case /* LT */4 :
        return "LT";
    case /* GT */5 :
        return "GT";
    case /* Implies */6 :
        return "Implies";
    case /* Conj */7 :
        return "Conj";
    case /* Disj */8 :
        return "Disj";
    case /* Neg */9 :
        return "Neg";
    case /* Add */10 :
        return "Add";
    case /* Sub */11 :
        return "Sub";
    case /* Mul */12 :
        return "Mul";
    case /* Div */13 :
        return "Div";
    case /* Mod */14 :
        return "Mod";
    
  }
}

var Op = {
  toString: toString$3,
  decode: decode$3,
  encode: encode$3
};

function toString$4(param) {
  return param[0];
}

function decode$4(param) {
  return Json_decode.map((function (param) {
                return /* Upper */Caml_chrome_debugger.simpleVariant("Upper", [
                          param[0],
                          param[1]
                        ]);
              }), (function (param) {
                return Json_decode.pair(Json_decode.string, decode$1, param);
              }), param);
}

function encode$4(param) {
  return Json_encode.pair((function (prim) {
                return prim;
              }), encode$1, /* tuple */[
              param[0],
              param[1]
            ]);
}

var Upper = {
  toString: toString$4,
  decode: decode$4,
  encode: encode$4
};

function toString$5(param) {
  return param[0];
}

function decode$5(param) {
  return Json_decode.map((function (param) {
                return /* Lower */Caml_chrome_debugger.simpleVariant("Lower", [
                          param[0],
                          param[1]
                        ]);
              }), (function (param) {
                return Json_decode.pair(Json_decode.string, decode$1, param);
              }), param);
}

function encode$5(param) {
  return Json_encode.pair((function (prim) {
                return prim;
              }), encode$1, /* tuple */[
              param[0],
              param[1]
            ]);
}

var Lower = {
  toString: toString$5,
  decode: decode$5,
  encode: encode$5
};

function locOf(param) {
  switch (param.tag | 0) {
    case /* App */4 :
        return param[2];
    case /* Quant */5 :
        return param[4];
    case /* Hole */6 :
        return param[0];
    default:
      return param[1];
  }
}

function negate(x) {
  return /* App */Caml_chrome_debugger.variant("App", 4, [
            /* Op */Caml_chrome_debugger.variant("Op", 3, [
                /* Neg */9,
                /* NoLoc */0
              ]),
            x,
            /* NoLoc */0
          ]);
}

function disj(x, y) {
  return /* App */Caml_chrome_debugger.variant("App", 4, [
            /* App */Caml_chrome_debugger.variant("App", 4, [
                /* Op */Caml_chrome_debugger.variant("Op", 3, [
                    /* Disj */8,
                    /* NoLoc */0
                  ]),
                x,
                /* NoLoc */0
              ]),
            y,
            /* NoLoc */0
          ]);
}

function conj(x, y) {
  return /* App */Caml_chrome_debugger.variant("App", 4, [
            /* App */Caml_chrome_debugger.variant("App", 4, [
                /* Op */Caml_chrome_debugger.variant("Op", 3, [
                    /* Conj */7,
                    /* NoLoc */0
                  ]),
                x,
                /* NoLoc */0
              ]),
            y,
            /* NoLoc */0
          ]);
}

function disjunct$prime(param) {
  if (param) {
    var xs = param[1];
    var x = param[0];
    if (xs) {
      return disj(x, disjunct$prime(xs));
    } else {
      return x;
    }
  } else {
    return /* Lit */Caml_chrome_debugger.variant("Lit", 2, [
              /* Bool */Caml_chrome_debugger.variant("Bool", 1, [true]),
              /* NoLoc */0
            ]);
  }
}

function conjunct$prime(param) {
  if (param) {
    var xs = param[1];
    var x = param[0];
    if (xs) {
      return conj(x, conjunct$prime(xs));
    } else {
      return x;
    }
  } else {
    return /* Lit */Caml_chrome_debugger.variant("Lit", 2, [
              /* Bool */Caml_chrome_debugger.variant("Bool", 1, [false]),
              /* NoLoc */0
            ]);
  }
}

function disjunct(xs) {
  return disjunct$prime(Belt_List.fromArray(xs));
}

function conjunct(xs) {
  return conjunct$prime(Belt_List.fromArray(xs));
}

function decode$6(json) {
  return Util$Guacamole.Decode.sum((function (tag) {
                  switch (tag) {
                    case "App" :
                        return /* Contents */Caml_chrome_debugger.variant("Contents", 0, [(function (param) {
                                      return Json_decode.map((function (param) {
                                                    return /* App */Caml_chrome_debugger.variant("App", 4, [
                                                              param[0],
                                                              param[1],
                                                              param[2]
                                                            ]);
                                                  }), (function (param) {
                                                    return Json_decode.tuple3(decode$6, decode$6, decode$1, param);
                                                  }), param);
                                    })]);
                    case "Const" :
                        return /* Contents */Caml_chrome_debugger.variant("Contents", 0, [(function (param) {
                                      return Json_decode.map((function (param) {
                                                    return /* Const */Caml_chrome_debugger.variant("Const", 1, [
                                                              param[0],
                                                              param[1]
                                                            ]);
                                                  }), (function (param) {
                                                    return Json_decode.pair(decode$4, decode$1, param);
                                                  }), param);
                                    })]);
                    case "Hole" :
                        return /* Contents */Caml_chrome_debugger.variant("Contents", 0, [(function (param) {
                                      return Json_decode.map((function (r) {
                                                    return /* Hole */Caml_chrome_debugger.variant("Hole", 6, [r]);
                                                  }), decode$1, param);
                                    })]);
                    case "Lit" :
                        return /* Contents */Caml_chrome_debugger.variant("Contents", 0, [(function (param) {
                                      return Json_decode.map((function (param) {
                                                    return /* Lit */Caml_chrome_debugger.variant("Lit", 2, [
                                                              param[0],
                                                              param[1]
                                                            ]);
                                                  }), (function (param) {
                                                    return Json_decode.pair(decode$2, decode$1, param);
                                                  }), param);
                                    })]);
                    case "Op" :
                        return /* Contents */Caml_chrome_debugger.variant("Contents", 0, [(function (param) {
                                      return Json_decode.map((function (param) {
                                                    return /* Op */Caml_chrome_debugger.variant("Op", 3, [
                                                              param[0],
                                                              param[1]
                                                            ]);
                                                  }), (function (param) {
                                                    return Json_decode.pair(decode$3, decode$1, param);
                                                  }), param);
                                    })]);
                    case "Quant" :
                        return /* Contents */Caml_chrome_debugger.variant("Contents", 0, [(function (param) {
                                      return Json_decode.map((function (param) {
                                                    return /* Quant */Caml_chrome_debugger.variant("Quant", 5, [
                                                              param[0],
                                                              param[1],
                                                              param[2],
                                                              param[3],
                                                              param[4]
                                                            ]);
                                                  }), (function (param) {
                                                    return Util$Guacamole.Decode.tuple5(decode$6, (function (param) {
                                                                  return Json_decode.array(decode$5, param);
                                                                }), decode$6, decode$6, decode$1, param);
                                                  }), param);
                                    })]);
                    case "Var" :
                        return /* Contents */Caml_chrome_debugger.variant("Contents", 0, [(function (param) {
                                      return Json_decode.map((function (param) {
                                                    return /* Var */Caml_chrome_debugger.variant("Var", 0, [
                                                              param[0],
                                                              param[1]
                                                            ]);
                                                  }), (function (param) {
                                                    return Json_decode.pair(decode$5, decode$1, param);
                                                  }), param);
                                    })]);
                    default:
                      throw [
                            Json_decode.DecodeError,
                            "[Expr] Unknown constructor: " + tag
                          ];
                  }
                }))(json);
}

function decodeSubst(json) {
  return Json_decode.dict(decode$6, json);
}

function encode$6(param) {
  switch (param.tag | 0) {
    case /* Var */0 :
        return Json_encode.object_(/* :: */Caml_chrome_debugger.simpleVariant("::", [
                      /* tuple */[
                        "tag",
                        "Var"
                      ],
                      /* :: */Caml_chrome_debugger.simpleVariant("::", [
                          /* tuple */[
                            "contents",
                            Json_encode.pair(encode$5, encode$1, /* tuple */[
                                  param[0],
                                  param[1]
                                ])
                          ],
                          /* [] */0
                        ])
                    ]));
    case /* Const */1 :
        return Json_encode.object_(/* :: */Caml_chrome_debugger.simpleVariant("::", [
                      /* tuple */[
                        "tag",
                        "Const"
                      ],
                      /* :: */Caml_chrome_debugger.simpleVariant("::", [
                          /* tuple */[
                            "contents",
                            Json_encode.pair(encode$4, encode$1, /* tuple */[
                                  param[0],
                                  param[1]
                                ])
                          ],
                          /* [] */0
                        ])
                    ]));
    case /* Lit */2 :
        return Json_encode.object_(/* :: */Caml_chrome_debugger.simpleVariant("::", [
                      /* tuple */[
                        "tag",
                        "Lit"
                      ],
                      /* :: */Caml_chrome_debugger.simpleVariant("::", [
                          /* tuple */[
                            "contents",
                            Json_encode.pair(encode$2, encode$1, /* tuple */[
                                  param[0],
                                  param[1]
                                ])
                          ],
                          /* [] */0
                        ])
                    ]));
    case /* Op */3 :
        return Json_encode.object_(/* :: */Caml_chrome_debugger.simpleVariant("::", [
                      /* tuple */[
                        "tag",
                        "Op"
                      ],
                      /* :: */Caml_chrome_debugger.simpleVariant("::", [
                          /* tuple */[
                            "contents",
                            Json_encode.pair(encode$3, encode$1, /* tuple */[
                                  param[0],
                                  param[1]
                                ])
                          ],
                          /* [] */0
                        ])
                    ]));
    case /* App */4 :
        return Json_encode.object_(/* :: */Caml_chrome_debugger.simpleVariant("::", [
                      /* tuple */[
                        "tag",
                        "App"
                      ],
                      /* :: */Caml_chrome_debugger.simpleVariant("::", [
                          /* tuple */[
                            "contents",
                            Json_encode.tuple3(encode$6, encode$6, encode$1, /* tuple */[
                                  param[0],
                                  param[1],
                                  param[2]
                                ])
                          ],
                          /* [] */0
                        ])
                    ]));
    case /* Quant */5 :
        return Json_encode.object_(/* :: */Caml_chrome_debugger.simpleVariant("::", [
                      /* tuple */[
                        "tag",
                        "Quant"
                      ],
                      /* :: */Caml_chrome_debugger.simpleVariant("::", [
                          /* tuple */[
                            "contents",
                            Util$Guacamole.Encode.tuple5(encode$6, (function (param) {
                                    return Json_encode.array(encode$5, param);
                                  }), encode$6, encode$6, encode$1, /* tuple */[
                                  param[0],
                                  param[1],
                                  param[2],
                                  param[3],
                                  param[4]
                                ])
                          ],
                          /* [] */0
                        ])
                    ]));
    case /* Hole */6 :
        return Json_encode.object_(/* :: */Caml_chrome_debugger.simpleVariant("::", [
                      /* tuple */[
                        "tag",
                        "Hole"
                      ],
                      /* :: */Caml_chrome_debugger.simpleVariant("::", [
                          /* tuple */[
                            "contents",
                            encode$1(param[0])
                          ],
                          /* [] */0
                        ])
                    ]));
    
  }
}

function classify(param) {
  switch (param) {
    case /* EQ */0 :
        return /* Infix */Caml_chrome_debugger.variant("Infix", 2, [5]);
    case /* NEQ */1 :
    case /* LTE */2 :
    case /* GTE */3 :
    case /* LT */4 :
    case /* GT */5 :
        return /* Infix */Caml_chrome_debugger.variant("Infix", 2, [6]);
    case /* Implies */6 :
        return /* InfixR */Caml_chrome_debugger.variant("InfixR", 1, [1]);
    case /* Conj */7 :
        return /* InfixL */Caml_chrome_debugger.variant("InfixL", 0, [3]);
    case /* Disj */8 :
        return /* InfixL */Caml_chrome_debugger.variant("InfixL", 0, [2]);
    case /* Neg */9 :
        return /* Prefix */Caml_chrome_debugger.variant("Prefix", 3, [4]);
    case /* Add */10 :
    case /* Sub */11 :
        return /* InfixL */Caml_chrome_debugger.variant("InfixL", 0, [7]);
    case /* Mul */12 :
    case /* Div */13 :
        return /* InfixL */Caml_chrome_debugger.variant("InfixL", 0, [8]);
    case /* Mod */14 :
        return /* InfixL */Caml_chrome_debugger.variant("InfixL", 0, [9]);
    
  }
}

function parensIf(p, s) {
  if (p) {
    return "(" + (s + ")");
  } else {
    return s;
  }
}

function handleOperator(n, op) {
  var match = classify(op);
  switch (match.tag | 0) {
    case /* InfixL */0 :
        var m = match[0];
        return flatMap($$var, (function (p) {
                      return flatMap($$var, (function (q) {
                                    return /* Complete */Caml_chrome_debugger.variant("Complete", 1, [parensIf(n > m, toString$6(m, p) + (" " + (toString$3(op) + (" " + toString$6(m + 1 | 0, q)))))]);
                                  }));
                    }));
    case /* InfixR */1 :
        var m$1 = match[0];
        return flatMap($$var, (function (p) {
                      return flatMap($$var, (function (q) {
                                    return /* Complete */Caml_chrome_debugger.variant("Complete", 1, [parensIf(n > m$1, toString$6(m$1 + 1 | 0, p) + (" " + (toString$3(op) + (" " + toString$6(m$1, q)))))]);
                                  }));
                    }));
    case /* Infix */2 :
        var m$2 = match[0];
        return flatMap($$var, (function (p) {
                      return flatMap($$var, (function (q) {
                                    return /* Complete */Caml_chrome_debugger.variant("Complete", 1, [parensIf(n > m$2, toString$6(m$2 + 1 | 0, p) + (" " + (toString$3(op) + (" " + toString$6(m$2 + 1 | 0, q)))))]);
                                  }));
                    }));
    case /* Prefix */3 :
        var m$3 = match[0];
        return flatMap($$var, (function (p) {
                      return /* Complete */Caml_chrome_debugger.variant("Complete", 1, [parensIf(n > m$3, toString$3(op) + (" " + toString$6(m$3, p)))]);
                    }));
    case /* Postfix */4 :
        var m$4 = match[0];
        return flatMap($$var, (function (p) {
                      return /* Complete */Caml_chrome_debugger.variant("Complete", 1, [parensIf(n > m$4, toString$6(m$4, p) + (" " + toString$3(op)))]);
                    }));
    
  }
}

function handleExpr(n, param) {
  switch (param.tag | 0) {
    case /* Var */0 :
        return /* Complete */Caml_chrome_debugger.variant("Complete", 1, [toString$5(param[0])]);
    case /* Const */1 :
        return /* Complete */Caml_chrome_debugger.variant("Complete", 1, [toString$4(param[0])]);
    case /* Lit */2 :
        return /* Complete */Caml_chrome_debugger.variant("Complete", 1, [toString$2(param[0])]);
    case /* Op */3 :
        return handleOperator(n, param[0]);
    case /* App */4 :
        var q = param[1];
        var match = handleExpr(n, param[0]);
        if (match.tag) {
          var s = match[0];
          var match$1 = handleExpr(n, q);
          if (match$1.tag) {
            var t = match$1[0];
            if (q.tag === /* App */4) {
              return /* Complete */Caml_chrome_debugger.variant("Complete", 1, [s + (" " + parensIf(true, t))]);
            } else {
              return /* Complete */Caml_chrome_debugger.variant("Complete", 1, [s + (" " + t)]);
            }
          } else {
            return /* Expect */Caml_chrome_debugger.variant("Expect", 0, [match$1[0]]);
          }
        } else {
          return Curry._1(match[0], q);
        }
    case /* Quant */5 :
        return /* Complete */Caml_chrome_debugger.variant("Complete", 1, ["< " + (toString$6(0, param[0]) + (" " + (Caml_splice_call.spliceObjApply(" ", "concat", [Belt_Array.map(param[1], toString$5)]) + (" : " + (toString$6(0, param[2]) + (" : " + (toString$6(0, param[3]) + " >")))))))]);
    case /* Hole */6 :
        return /* Complete */Caml_chrome_debugger.variant("Complete", 1, ["[?]"]);
    
  }
}

function toString$6(n, p) {
  var match = handleExpr(n, p);
  if (match.tag) {
    return match[0];
  } else {
    return "";
  }
}

var Precedence = {
  classify: classify,
  parensIf: parensIf,
  handleOperator: handleOperator,
  handleExpr: handleExpr,
  toString: toString$6
};

function toString$7(param) {
  return toString$6(0, param);
}

var Expr = {
  locOf: locOf,
  negate: negate,
  disj: disj,
  conj: conj,
  disjunct$prime: disjunct$prime,
  conjunct$prime: conjunct$prime,
  disjunct: disjunct,
  conjunct: conjunct,
  decode: decode$6,
  decodeSubst: decodeSubst,
  encode: encode$6,
  Precedence: Precedence,
  toString: toString$7
};

function decode$7(json) {
  return Util$Guacamole.Decode.sum((function (tag) {
                  switch (tag) {
                    case "Assertion" :
                        return /* Contents */Caml_chrome_debugger.variant("Contents", 0, [(function (param) {
                                      return Json_decode.map((function (param) {
                                                    return /* Assertion */Caml_chrome_debugger.variant("Assertion", 2, [
                                                              param[0],
                                                              param[1]
                                                            ]);
                                                  }), (function (param) {
                                                    return Json_decode.pair(decode$6, decode$1, param);
                                                  }), param);
                                    })]);
                    case "Bound" :
                        return /* Contents */Caml_chrome_debugger.variant("Contents", 0, [(function (param) {
                                      return Json_decode.map((function (param) {
                                                    return /* Bound */Caml_chrome_debugger.variant("Bound", 1, [
                                                              param[0],
                                                              param[1]
                                                            ]);
                                                  }), (function (param) {
                                                    return Json_decode.pair(decode$6, decode$1, param);
                                                  }), param);
                                    })]);
                    case "Conjunct" :
                        return /* Contents */Caml_chrome_debugger.variant("Contents", 0, [(function (param) {
                                      return Json_decode.map((function (xs) {
                                                    return /* Conjunct */Caml_chrome_debugger.variant("Conjunct", 6, [xs]);
                                                  }), (function (param) {
                                                    return Json_decode.array(decode$7, param);
                                                  }), param);
                                    })]);
                    case "Constant" :
                        return /* Contents */Caml_chrome_debugger.variant("Contents", 0, [(function (param) {
                                      return Json_decode.map((function (x) {
                                                    return /* Constant */Caml_chrome_debugger.variant("Constant", 0, [x]);
                                                  }), decode$6, param);
                                    })]);
                    case "Disjunct" :
                        return /* Contents */Caml_chrome_debugger.variant("Contents", 0, [(function (param) {
                                      return Json_decode.map((function (xs) {
                                                    return /* Disjunct */Caml_chrome_debugger.variant("Disjunct", 7, [xs]);
                                                  }), (function (param) {
                                                    return Json_decode.array(decode$7, param);
                                                  }), param);
                                    })]);
                    case "GuardIf" :
                        return /* Contents */Caml_chrome_debugger.variant("Contents", 0, [(function (param) {
                                      return Json_decode.map((function (param) {
                                                    return /* GuardIf */Caml_chrome_debugger.variant("GuardIf", 4, [
                                                              param[0],
                                                              param[1]
                                                            ]);
                                                  }), (function (param) {
                                                    return Json_decode.pair(decode$6, decode$1, param);
                                                  }), param);
                                    })]);
                    case "GuardLoop" :
                        return /* Contents */Caml_chrome_debugger.variant("Contents", 0, [(function (param) {
                                      return Json_decode.map((function (param) {
                                                    return /* GuardLoop */Caml_chrome_debugger.variant("GuardLoop", 5, [
                                                              param[0],
                                                              param[1]
                                                            ]);
                                                  }), (function (param) {
                                                    return Json_decode.pair(decode$6, decode$1, param);
                                                  }), param);
                                    })]);
                    case "LoopInvariant" :
                        return /* Contents */Caml_chrome_debugger.variant("Contents", 0, [(function (param) {
                                      return Json_decode.map((function (param) {
                                                    return /* LoopInvariant */Caml_chrome_debugger.variant("LoopInvariant", 3, [
                                                              param[0],
                                                              param[1],
                                                              param[2]
                                                            ]);
                                                  }), (function (param) {
                                                    return Json_decode.tuple3(decode$6, decode$6, decode$1, param);
                                                  }), param);
                                    })]);
                    case "Negate" :
                        return /* Contents */Caml_chrome_debugger.variant("Contents", 0, [(function (param) {
                                      return Json_decode.map((function (x) {
                                                    return /* Negate */Caml_chrome_debugger.variant("Negate", 8, [x]);
                                                  }), decode$7, param);
                                    })]);
                    default:
                      throw [
                            Json_decode.DecodeError,
                            "[Pred] Unknown constructor: " + tag
                          ];
                  }
                }))(json);
}

function encode$7(param) {
  switch (param.tag | 0) {
    case /* Constant */0 :
        return Json_encode.object_(/* :: */Caml_chrome_debugger.simpleVariant("::", [
                      /* tuple */[
                        "tag",
                        "Constant"
                      ],
                      /* :: */Caml_chrome_debugger.simpleVariant("::", [
                          /* tuple */[
                            "contents",
                            encode$6(param[0])
                          ],
                          /* [] */0
                        ])
                    ]));
    case /* Bound */1 :
        return Json_encode.object_(/* :: */Caml_chrome_debugger.simpleVariant("::", [
                      /* tuple */[
                        "tag",
                        "Bound"
                      ],
                      /* :: */Caml_chrome_debugger.simpleVariant("::", [
                          /* tuple */[
                            "contents",
                            Json_encode.pair(encode$6, encode$1, /* tuple */[
                                  param[0],
                                  param[1]
                                ])
                          ],
                          /* [] */0
                        ])
                    ]));
    case /* Assertion */2 :
        return Json_encode.object_(/* :: */Caml_chrome_debugger.simpleVariant("::", [
                      /* tuple */[
                        "tag",
                        "Assertion"
                      ],
                      /* :: */Caml_chrome_debugger.simpleVariant("::", [
                          /* tuple */[
                            "contents",
                            Json_encode.pair(encode$6, encode$1, /* tuple */[
                                  param[0],
                                  param[1]
                                ])
                          ],
                          /* [] */0
                        ])
                    ]));
    case /* LoopInvariant */3 :
        return Json_encode.object_(/* :: */Caml_chrome_debugger.simpleVariant("::", [
                      /* tuple */[
                        "tag",
                        "LoopInvariant"
                      ],
                      /* :: */Caml_chrome_debugger.simpleVariant("::", [
                          /* tuple */[
                            "contents",
                            Json_encode.tuple3(encode$6, encode$6, encode$1, /* tuple */[
                                  param[0],
                                  param[1],
                                  param[2]
                                ])
                          ],
                          /* [] */0
                        ])
                    ]));
    case /* GuardIf */4 :
        return Json_encode.object_(/* :: */Caml_chrome_debugger.simpleVariant("::", [
                      /* tuple */[
                        "tag",
                        "GuardIf"
                      ],
                      /* :: */Caml_chrome_debugger.simpleVariant("::", [
                          /* tuple */[
                            "contents",
                            Json_encode.pair(encode$6, encode$1, /* tuple */[
                                  param[0],
                                  param[1]
                                ])
                          ],
                          /* [] */0
                        ])
                    ]));
    case /* GuardLoop */5 :
        return Json_encode.object_(/* :: */Caml_chrome_debugger.simpleVariant("::", [
                      /* tuple */[
                        "tag",
                        "GuardLoop"
                      ],
                      /* :: */Caml_chrome_debugger.simpleVariant("::", [
                          /* tuple */[
                            "contents",
                            Json_encode.pair(encode$6, encode$1, /* tuple */[
                                  param[0],
                                  param[1]
                                ])
                          ],
                          /* [] */0
                        ])
                    ]));
    case /* Conjunct */6 :
        return Json_encode.object_(/* :: */Caml_chrome_debugger.simpleVariant("::", [
                      /* tuple */[
                        "tag",
                        "Conjunct"
                      ],
                      /* :: */Caml_chrome_debugger.simpleVariant("::", [
                          /* tuple */[
                            "contents",
                            Json_encode.array(encode$7, param[0])
                          ],
                          /* [] */0
                        ])
                    ]));
    case /* Disjunct */7 :
        return Json_encode.object_(/* :: */Caml_chrome_debugger.simpleVariant("::", [
                      /* tuple */[
                        "tag",
                        "Disjunct"
                      ],
                      /* :: */Caml_chrome_debugger.simpleVariant("::", [
                          /* tuple */[
                            "contents",
                            Json_encode.array(encode$7, param[0])
                          ],
                          /* [] */0
                        ])
                    ]));
    case /* Negate */8 :
        return Json_encode.object_(/* :: */Caml_chrome_debugger.simpleVariant("::", [
                      /* tuple */[
                        "tag",
                        "Negate"
                      ],
                      /* :: */Caml_chrome_debugger.simpleVariant("::", [
                          /* tuple */[
                            "contents",
                            encode$7(param[0])
                          ],
                          /* [] */0
                        ])
                    ]));
    
  }
}

function toExpr(param) {
  switch (param.tag | 0) {
    case /* Conjunct */6 :
        var xs = Belt_Array.map(param[0], toExpr);
        return conjunct$prime(Belt_List.fromArray(xs));
    case /* Disjunct */7 :
        var xs$1 = Belt_Array.map(param[0], toExpr);
        return disjunct$prime(Belt_List.fromArray(xs$1));
    case /* Negate */8 :
        return negate(toExpr(param[0]));
    default:
      return param[0];
  }
}

function toString$8(xs) {
  return toString$6(0, toExpr(xs));
}

var Pred = {
  decode: decode$7,
  encode: encode$7,
  toExpr: toExpr,
  toString: toString$8
};

function toString$9(param) {
  if (param) {
    return "Bool";
  } else {
    return "Int";
  }
}

function decode$8(param) {
  return Json_decode.map((function (tag) {
                switch (tag) {
                  case "TBool" :
                      return /* Bool */1;
                  case "TInt" :
                      return /* Int */0;
                  default:
                    throw [
                          Json_decode.DecodeError,
                          "Unknown constructor: " + tag
                        ];
                }
              }), Json_decode.string, param);
}

var Base = {
  toString: toString$9,
  decode: decode$8
};

function toString$10(param) {
  switch (param.tag | 0) {
    case /* Base */0 :
        if (param[0]) {
          return "Bool";
        } else {
          return "Int";
        }
    case /* Array */1 :
        return "Array " + toString$10(param[0]);
    case /* Func */2 :
        return toString$10(param[0]) + (" -> " + toString$10(param[1]));
    case /* Var */3 :
        return "Var " + String(param[0]);
    
  }
}

function decode$9(json) {
  return Util$Guacamole.Decode.sum((function (tag) {
                  switch (tag) {
                    case "TArray" :
                        return /* Contents */Caml_chrome_debugger.variant("Contents", 0, [(function (param) {
                                      return Json_decode.map((function (x) {
                                                    return /* Array */Caml_chrome_debugger.variant("Array", 1, [x]);
                                                  }), decode$9, param);
                                    })]);
                    case "TBase" :
                        return /* Contents */Caml_chrome_debugger.variant("Contents", 0, [(function (param) {
                                      return Json_decode.map((function (x) {
                                                    return /* Base */Caml_chrome_debugger.variant("Base", 0, [x]);
                                                  }), decode$8, param);
                                    })]);
                    case "TFun" :
                        return /* Contents */Caml_chrome_debugger.variant("Contents", 0, [(function (param) {
                                      return Json_decode.map((function (param) {
                                                    return /* Func */Caml_chrome_debugger.variant("Func", 2, [
                                                              param[0],
                                                              param[1]
                                                            ]);
                                                  }), (function (param) {
                                                    return Json_decode.pair(decode$9, decode$9, param);
                                                  }), param);
                                    })]);
                    case "TVar" :
                        return /* Contents */Caml_chrome_debugger.variant("Contents", 0, [(function (param) {
                                      return Json_decode.map((function (x) {
                                                    return /* Var */Caml_chrome_debugger.variant("Var", 3, [x]);
                                                  }), Json_decode.$$int, param);
                                    })]);
                    default:
                      throw [
                            Json_decode.DecodeError,
                            "Unknown constructor: " + tag
                          ];
                  }
                }))(json);
}

var Type = {
  Base: Base,
  toString: toString$10,
  decode: decode$9
};

var Syntax = {
  VarArg: VarArg,
  Lit: Lit,
  Op: Op,
  Upper: Upper,
  Lower: Lower,
  Expr: Expr,
  Pred: Pred,
  Type: Type
};

function toString$11(param) {
  switch (param.tag | 0) {
    case /* AtAbort */0 :
        return "Abort";
    case /* AtSkip */1 :
        return "Skip";
    case /* AtSpec */2 :
        return "Spec";
    case /* AtAssignment */3 :
        return "Assignment";
    case /* AtAssertion */4 :
        return "Assertion";
    case /* AtLoopInvariant */5 :
        return "Loop Invariant";
    case /* AtIf */6 :
        return "Conditional";
    case /* AtLoop */7 :
        return "Loop";
    case /* AtTermination */8 :
        return "Termination";
    case /* AtBoundDecrement */9 :
        return "Bound Decrement";
    
  }
}

function locOf$1(param) {
  return param[0];
}

var decode$10 = Util$Guacamole.Decode.sum((function (tag) {
        switch (tag) {
          case "AtAbort" :
              return /* Contents */Caml_chrome_debugger.variant("Contents", 0, [(function (param) {
                            return Json_decode.map((function (x) {
                                          return /* AtAbort */Caml_chrome_debugger.variant("AtAbort", 0, [x]);
                                        }), decode$1, param);
                          })]);
          case "AtAssertion" :
              return /* Contents */Caml_chrome_debugger.variant("Contents", 0, [(function (param) {
                            return Json_decode.map((function (x) {
                                          return /* AtAssertion */Caml_chrome_debugger.variant("AtAssertion", 4, [x]);
                                        }), decode$1, param);
                          })]);
          case "AtAssignment" :
              return /* Contents */Caml_chrome_debugger.variant("Contents", 0, [(function (param) {
                            return Json_decode.map((function (x) {
                                          return /* AtAssignment */Caml_chrome_debugger.variant("AtAssignment", 3, [x]);
                                        }), decode$1, param);
                          })]);
          case "AtBoundDecrement" :
              return /* Contents */Caml_chrome_debugger.variant("Contents", 0, [(function (param) {
                            return Json_decode.map((function (x) {
                                          return /* AtBoundDecrement */Caml_chrome_debugger.variant("AtBoundDecrement", 9, [x]);
                                        }), decode$1, param);
                          })]);
          case "AtIf" :
              return /* Contents */Caml_chrome_debugger.variant("Contents", 0, [(function (param) {
                            return Json_decode.map((function (x) {
                                          return /* AtIf */Caml_chrome_debugger.variant("AtIf", 6, [x]);
                                        }), decode$1, param);
                          })]);
          case "AtLoop" :
              return /* Contents */Caml_chrome_debugger.variant("Contents", 0, [(function (param) {
                            return Json_decode.map((function (x) {
                                          return /* AtLoop */Caml_chrome_debugger.variant("AtLoop", 7, [x]);
                                        }), decode$1, param);
                          })]);
          case "AtLoopInvariant" :
              return /* Contents */Caml_chrome_debugger.variant("Contents", 0, [(function (param) {
                            return Json_decode.map((function (x) {
                                          return /* AtLoopInvariant */Caml_chrome_debugger.variant("AtLoopInvariant", 5, [x]);
                                        }), decode$1, param);
                          })]);
          case "AtSkip" :
              return /* Contents */Caml_chrome_debugger.variant("Contents", 0, [(function (param) {
                            return Json_decode.map((function (x) {
                                          return /* AtSkip */Caml_chrome_debugger.variant("AtSkip", 1, [x]);
                                        }), decode$1, param);
                          })]);
          case "AtSpec" :
              return /* Contents */Caml_chrome_debugger.variant("Contents", 0, [(function (param) {
                            return Json_decode.map((function (x) {
                                          return /* AtSpec */Caml_chrome_debugger.variant("AtSpec", 2, [x]);
                                        }), decode$1, param);
                          })]);
          case "AtTermination" :
              return /* Contents */Caml_chrome_debugger.variant("Contents", 0, [(function (param) {
                            return Json_decode.map((function (x) {
                                          return /* AtTermination */Caml_chrome_debugger.variant("AtTermination", 8, [x]);
                                        }), decode$1, param);
                          })]);
          default:
            throw [
                  Json_decode.DecodeError,
                  "Unknown constructor: " + tag
                ];
        }
      }));

function encode$8(param) {
  switch (param.tag | 0) {
    case /* AtAbort */0 :
        return Json_encode.object_(/* :: */Caml_chrome_debugger.simpleVariant("::", [
                      /* tuple */[
                        "tag",
                        "AtAbort"
                      ],
                      /* :: */Caml_chrome_debugger.simpleVariant("::", [
                          /* tuple */[
                            "contents",
                            encode$1(param[0])
                          ],
                          /* [] */0
                        ])
                    ]));
    case /* AtSkip */1 :
        return Json_encode.object_(/* :: */Caml_chrome_debugger.simpleVariant("::", [
                      /* tuple */[
                        "tag",
                        "AtSkip"
                      ],
                      /* :: */Caml_chrome_debugger.simpleVariant("::", [
                          /* tuple */[
                            "contents",
                            encode$1(param[0])
                          ],
                          /* [] */0
                        ])
                    ]));
    case /* AtSpec */2 :
        return Json_encode.object_(/* :: */Caml_chrome_debugger.simpleVariant("::", [
                      /* tuple */[
                        "tag",
                        "AtSpec"
                      ],
                      /* :: */Caml_chrome_debugger.simpleVariant("::", [
                          /* tuple */[
                            "contents",
                            encode$1(param[0])
                          ],
                          /* [] */0
                        ])
                    ]));
    case /* AtAssignment */3 :
        return Json_encode.object_(/* :: */Caml_chrome_debugger.simpleVariant("::", [
                      /* tuple */[
                        "tag",
                        "AtAssignment"
                      ],
                      /* :: */Caml_chrome_debugger.simpleVariant("::", [
                          /* tuple */[
                            "contents",
                            encode$1(param[0])
                          ],
                          /* [] */0
                        ])
                    ]));
    case /* AtAssertion */4 :
        return Json_encode.object_(/* :: */Caml_chrome_debugger.simpleVariant("::", [
                      /* tuple */[
                        "tag",
                        "AtAssertion"
                      ],
                      /* :: */Caml_chrome_debugger.simpleVariant("::", [
                          /* tuple */[
                            "contents",
                            encode$1(param[0])
                          ],
                          /* [] */0
                        ])
                    ]));
    case /* AtLoopInvariant */5 :
        return Json_encode.object_(/* :: */Caml_chrome_debugger.simpleVariant("::", [
                      /* tuple */[
                        "tag",
                        "AtLoopInvariant"
                      ],
                      /* :: */Caml_chrome_debugger.simpleVariant("::", [
                          /* tuple */[
                            "contents",
                            encode$1(param[0])
                          ],
                          /* [] */0
                        ])
                    ]));
    case /* AtIf */6 :
        return Json_encode.object_(/* :: */Caml_chrome_debugger.simpleVariant("::", [
                      /* tuple */[
                        "tag",
                        "AtIf"
                      ],
                      /* :: */Caml_chrome_debugger.simpleVariant("::", [
                          /* tuple */[
                            "contents",
                            encode$1(param[0])
                          ],
                          /* [] */0
                        ])
                    ]));
    case /* AtLoop */7 :
        return Json_encode.object_(/* :: */Caml_chrome_debugger.simpleVariant("::", [
                      /* tuple */[
                        "tag",
                        "AtLoop"
                      ],
                      /* :: */Caml_chrome_debugger.simpleVariant("::", [
                          /* tuple */[
                            "contents",
                            encode$1(param[0])
                          ],
                          /* [] */0
                        ])
                    ]));
    case /* AtTermination */8 :
        return Json_encode.object_(/* :: */Caml_chrome_debugger.simpleVariant("::", [
                      /* tuple */[
                        "tag",
                        "AtTermination"
                      ],
                      /* :: */Caml_chrome_debugger.simpleVariant("::", [
                          /* tuple */[
                            "contents",
                            encode$1(param[0])
                          ],
                          /* [] */0
                        ])
                    ]));
    case /* AtBoundDecrement */9 :
        return Json_encode.object_(/* :: */Caml_chrome_debugger.simpleVariant("::", [
                      /* tuple */[
                        "tag",
                        "AtBoundDecrement"
                      ],
                      /* :: */Caml_chrome_debugger.simpleVariant("::", [
                          /* tuple */[
                            "contents",
                            encode$1(param[0])
                          ],
                          /* [] */0
                        ])
                    ]));
    
  }
}

var Origin = {
  toString: toString$11,
  locOf: locOf$1,
  decode: decode$10,
  encode: encode$8
};

function decode$11(param) {
  return Json_decode.map((function (param) {
                return /* ProofObligation */Caml_chrome_debugger.simpleVariant("ProofObligation", [
                          param[0],
                          param[1],
                          param[2],
                          param[3]
                        ]);
              }), (function (param) {
                return Json_decode.tuple4(Json_decode.$$int, decode$7, decode$7, decode$10, param);
              }), param);
}

function encode$9(param) {
  return Json_encode.tuple4((function (prim) {
                return prim;
              }), encode$7, encode$7, encode$8, /* tuple */[
              param[0],
              param[1],
              param[2],
              param[3]
            ]);
}

var ProofObligation = {
  decode: decode$11,
  encode: encode$9
};

function decode$12(json) {
  return {
          id: Json_decode.field("specID", Json_decode.$$int, json),
          pre: Json_decode.field("specPreCond", decode$7, json),
          post: Json_decode.field("specPostCond", decode$7, json),
          loc: Json_decode.field("specLoc", decode$1, json)
        };
}

var Specification = {
  decode: decode$12
};

function toLoc(site, specifications) {
  if (site.tag) {
    var i = site[1];
    var loc = site[0];
    var specs = Belt_Array.keep(specifications, (function (spec) {
            return spec.id === i;
          }));
    return Belt_Option.mapWithDefault(Belt_Array.get(specs, 0), loc, (function (spec) {
                  return translateBy$1(1, 0, 1, 0, translate$1(loc, spec.loc));
                }));
  } else {
    return site[0];
  }
}

function toRange(site, specifications, locToRange) {
  return Curry._1(locToRange, toLoc(site, specifications));
}

function toString$12(site) {
  if (site.tag) {
    return "at " + (toString$1(site[0]) + (" in #" + String(site[1])));
  } else {
    return "at " + toString$1(site[0]);
  }
}

var decode$13 = Util$Guacamole.Decode.sum((function (tag) {
        switch (tag) {
          case "Global" :
              return /* Contents */Caml_chrome_debugger.variant("Contents", 0, [(function (json) {
                            return /* Global */Caml_chrome_debugger.variant("Global", 0, [Curry._1(decode$1, json)]);
                          })]);
          case "Local" :
              return /* Contents */Caml_chrome_debugger.variant("Contents", 0, [(function (param) {
                            return Json_decode.map((function (param) {
                                          return /* Local */Caml_chrome_debugger.variant("Local", 1, [
                                                    param[0],
                                                    param[1]
                                                  ]);
                                        }), (function (param) {
                                          return Json_decode.pair(decode$1, Json_decode.$$int, param);
                                        }), param);
                          })]);
          default:
            throw [
                  Json_decode.DecodeError,
                  "Unknown constructor: " + tag
                ];
        }
      }));

var Site = {
  toLoc: toLoc,
  toRange: toRange,
  toString: toString$12,
  decode: decode$13
};

var decode$14 = Util$Guacamole.Decode.sum((function (tag) {
        switch (tag) {
          case "NotFunction" :
              return /* Contents */Caml_chrome_debugger.variant("Contents", 0, [(function (param) {
                            return Json_decode.map((function (param) {
                                          return /* NotFunction */Caml_chrome_debugger.variant("NotFunction", 3, [param[0]]);
                                        }), (function (param) {
                                          return Json_decode.pair(decode$9, decode$1, param);
                                        }), param);
                          })]);
          case "NotInScope" :
              return /* Contents */Caml_chrome_debugger.variant("Contents", 0, [(function (param) {
                            return Json_decode.map((function (param) {
                                          return /* NotInScope */Caml_chrome_debugger.variant("NotInScope", 0, [param[0]]);
                                        }), (function (param) {
                                          return Json_decode.pair(Json_decode.string, decode$1, param);
                                        }), param);
                          })]);
          case "RecursiveType" :
              return /* Contents */Caml_chrome_debugger.variant("Contents", 0, [(function (param) {
                            return Json_decode.map((function (param) {
                                          return /* RecursiveType */Caml_chrome_debugger.variant("RecursiveType", 2, [
                                                    param[0],
                                                    param[1]
                                                  ]);
                                        }), (function (param) {
                                          return Json_decode.tuple3(Json_decode.$$int, decode$9, decode$1, param);
                                        }), param);
                          })]);
          case "UnifyFailed" :
              return /* Contents */Caml_chrome_debugger.variant("Contents", 0, [(function (param) {
                            return Json_decode.map((function (param) {
                                          return /* UnifyFailed */Caml_chrome_debugger.variant("UnifyFailed", 1, [
                                                    param[0],
                                                    param[1]
                                                  ]);
                                        }), (function (param) {
                                          return Json_decode.tuple3(decode$9, decode$9, decode$1, param);
                                        }), param);
                          })]);
          default:
            throw [
                  Json_decode.DecodeError,
                  "Unknown constructor: " + tag
                ];
        }
      }));

var $$TypeError = {
  decode: decode$14
};

var decode$15 = Util$Guacamole.Decode.sum((function (tag) {
        switch (tag) {
          case "DigHole" :
              return /* Contents */Caml_chrome_debugger.variant("Contents", 0, [(function (param) {
                            return /* DigHole */6;
                          })]);
          case "ExcessBound" :
              return /* Contents */Caml_chrome_debugger.variant("Contents", 0, [(function (param) {
                            return /* ExcessBound */3;
                          })]);
          case "MissingAssertion" :
              return /* Contents */Caml_chrome_debugger.variant("Contents", 0, [(function (param) {
                            return /* MissingAssertion */1;
                          })]);
          case "MissingBound" :
              return /* Contents */Caml_chrome_debugger.variant("Contents", 0, [(function (param) {
                            return /* MissingBound */0;
                          })]);
          case "MissingLoopInvariant" :
              return /* Contents */Caml_chrome_debugger.variant("Contents", 0, [(function (param) {
                            return /* MissingLoopInvariant */2;
                          })]);
          case "MissingPostcondition" :
              return /* Contents */Caml_chrome_debugger.variant("Contents", 0, [(function (param) {
                            return /* MissingPostcondition */5;
                          })]);
          case "MissingPrecondition" :
              return /* Contents */Caml_chrome_debugger.variant("Contents", 0, [(function (param) {
                            return /* MissingPrecondition */4;
                          })]);
          default:
            throw [
                  Json_decode.DecodeError,
                  "Unknown constructor: " + tag
                ];
        }
      }));

var StructError = {
  decode: decode$15
};

var decodeKind = Util$Guacamole.Decode.sum((function (tag) {
        switch (tag) {
          case "CannotReadFile" :
              return /* Contents */Caml_chrome_debugger.variant("Contents", 0, [(function (json) {
                            return /* CannotReadFile */Caml_chrome_debugger.variant("CannotReadFile", 3, [Json_decode.string(json)]);
                          })]);
          case "LexicalError" :
              return /* TagOnly */Caml_chrome_debugger.variant("TagOnly", 1, [(function (param) {
                            return /* LexicalError */0;
                          })]);
          case "NotLoaded" :
              return /* TagOnly */Caml_chrome_debugger.variant("TagOnly", 1, [(function (param) {
                            return /* NotLoaded */1;
                          })]);
          case "StructError2" :
              return /* Contents */Caml_chrome_debugger.variant("Contents", 0, [(function (json) {
                            return /* StructError */Caml_chrome_debugger.variant("StructError", 1, [Curry._1(decode$15, json)]);
                          })]);
          case "SyntacticError" :
              return /* Contents */Caml_chrome_debugger.variant("Contents", 0, [(function (param) {
                            return Json_decode.map((function (pairs) {
                                          return /* SyntacticError */Caml_chrome_debugger.variant("SyntacticError", 0, [Belt_Array.map(pairs, (function (prim) {
                                                            return prim[1];
                                                          }))]);
                                        }), (function (param) {
                                          return Json_decode.array((function (param) {
                                                        return Json_decode.pair(decode$1, Json_decode.string, param);
                                                      }), param);
                                        }), param);
                          })]);
          case "TypeError" :
              return /* Contents */Caml_chrome_debugger.variant("Contents", 0, [(function (json) {
                            return /* TypeError */Caml_chrome_debugger.variant("TypeError", 2, [Curry._1(decode$14, json)]);
                          })]);
          default:
            throw [
                  Json_decode.DecodeError,
                  "Unknown constructor: " + tag
                ];
        }
      }));

function decode$16(param) {
  return Json_decode.map((function (param) {
                return /* Error */Caml_chrome_debugger.simpleVariant("Error", [
                          param[0],
                          param[1]
                        ]);
              }), (function (param) {
                return Json_decode.pair(decode$13, decodeKind, param);
              }), param);
}

var $$Error = {
  Site: Site,
  $$TypeError: $$TypeError,
  StructError: StructError,
  decodeKind: decodeKind,
  decode: decode$16
};

var decode$17 = Util$Guacamole.Decode.sum((function (tag) {
        switch (tag) {
          case "Error" :
              return /* Contents */Caml_chrome_debugger.variant("Contents", 0, [(function (param) {
                            return Json_decode.map((function (errors) {
                                          return /* Error */Caml_chrome_debugger.variant("Error", 0, [errors]);
                                        }), (function (param) {
                                          return Json_decode.array(decode$16, param);
                                        }), param);
                          })]);
          case "Insert" :
              return /* Contents */Caml_chrome_debugger.variant("Contents", 0, [(function (param) {
                            return Json_decode.map((function (param) {
                                          return /* InsertAssertion */Caml_chrome_debugger.variant("InsertAssertion", 3, [
                                                    param[0],
                                                    param[1]
                                                  ]);
                                        }), (function (param) {
                                          return Json_decode.pair(Json_decode.$$int, decode$6, param);
                                        }), param);
                          })]);
          case "OK" :
              return /* Contents */Caml_chrome_debugger.variant("Contents", 0, [(function (param) {
                            return Json_decode.map((function (param) {
                                          return /* OK */Caml_chrome_debugger.variant("OK", 1, [
                                                    param[0],
                                                    param[1]
                                                  ]);
                                        }), (function (param) {
                                          return Json_decode.pair((function (param) {
                                                        return Json_decode.array(decode$11, param);
                                                      }), (function (param) {
                                                        return Json_decode.array(decode$12, param);
                                                      }), param);
                                        }), param);
                          })]);
          case "Resolve" :
              return /* Contents */Caml_chrome_debugger.variant("Contents", 0, [(function (param) {
                            return Json_decode.map((function (i) {
                                          return /* Resolve */Caml_chrome_debugger.variant("Resolve", 2, [i]);
                                        }), Json_decode.$$int, param);
                          })]);
          default:
            throw [
                  Json_decode.DecodeError,
                  "Unknown constructor: " + tag
                ];
        }
      }));

var $$Response = {
  Origin: Origin,
  ProofObligation: ProofObligation,
  Specification: Specification,
  $$Error: $$Error,
  decode: decode$17
};

exports.Pos = Pos;
exports.Loc = Loc;
exports.Syntax = Syntax;
exports.$$Response = $$Response;
/* decode Not a pure module */

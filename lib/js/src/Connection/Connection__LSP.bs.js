// Generated by ReScript, PLEASE EDIT WITH CARE
'use strict';

var Curry = require("bs-platform/lib/js/curry.js");
var VSCode = require("bs-vscode/lib/js/src/VSCode.bs.js");
var Vscode = require("vscode");
var $$Promise = require("reason-promise/lib/js/src/js/promise.bs.js");
var LSP$Guacamole = require("../LSP.bs.js");
var Chan$Guacamole = require("../Util/Chan.bs.js");
var VscodeLanguageclient = require("vscode-languageclient");

var $$Error;

var errorChan = Chan$Guacamole.make(undefined);

var dataChan = Chan$Guacamole.make(undefined);

function onError(callback) {
  return new Vscode.Disposable(Chan$Guacamole.on(errorChan, (function (e) {
                    return Curry._1(callback, {
                                TAG: 2,
                                _0: e,
                                [Symbol.for("name")]: "ConnectionError"
                              });
                  })));
}

function onResponse(callback) {
  return new Vscode.Disposable(Chan$Guacamole.on(dataChan, callback));
}

function sendRequest(self, data) {
  return $$Promise.mapError($$Promise.flatMapOk($$Promise.Js.toResult(self.client.onReady()), (function (param) {
                    return $$Promise.Js.toResult(self.client.sendRequest("guacamole", data));
                  })), (function (exn) {
                return {
                        TAG: 3,
                        _0: exn,
                        [Symbol.for("name")]: "CannotSendRequest"
                      };
              }));
}

function destroy(self) {
  self.subscription.dispose();
  return $$Promise.map($$Promise.Js.toResult(self.client.stop()), (function (param) {
                
              }));
}

function make(method) {
  var serverOptions;
  serverOptions = method.TAG === /* ViaStdIO */0 ? LSP$Guacamole.ServerOptions.makeWithCommand(method._0) : LSP$Guacamole.ServerOptions.makeWithStreamInfo(method._0);
  var documentSelector = [VSCode.StringOr.others({
          language: "guacamole",
          pattern: undefined,
          scheme: "file"
        })];
  var synchronize = Vscode.workspace.createFileSystemWatcher('**/.clientrc', false, false, false);
  var errorHandler = LSP$Guacamole.ErrorHandler.make((function (exn, _msg, _count) {
          Chan$Guacamole.emit(errorChan, exn);
          return /* Shutdown */1;
        }), (function (param) {
          return /* DoNotRestart */0;
        }));
  var clientOptions = LSP$Guacamole.LanguageClientOptions.make(documentSelector, synchronize, errorHandler);
  var languageClient = new VscodeLanguageclient.LanguageClient("guacamoleLanguageServer", "Guacamole Language Server", serverOptions, clientOptions);
  var self_subscription = languageClient.start();
  var self = {
    client: languageClient,
    subscription: self_subscription,
    method: method
  };
  return $$Promise.mapError($$Promise.map($$Promise.race({
                      hd: $$Promise.Js.toResult(languageClient.onReady()),
                      tl: {
                        hd: $$Promise.map(Chan$Guacamole.once(errorChan), (function (err) {
                                return {
                                        TAG: 1,
                                        _0: err,
                                        [Symbol.for("name")]: "Error"
                                      };
                              })),
                        tl: /* [] */0
                      }
                    }), (function (result) {
                    if (result.TAG !== /* Ok */0) {
                      return {
                              TAG: 1,
                              _0: result._0,
                              [Symbol.for("name")]: "Error"
                            };
                    }
                    languageClient.onNotification("guacamole", (function (json) {
                            return Chan$Guacamole.emit(dataChan, json);
                          }));
                    return {
                            TAG: 0,
                            _0: self,
                            [Symbol.for("name")]: "Ok"
                          };
                  })), (function (e) {
                return {
                        TAG: 2,
                        _0: e,
                        [Symbol.for("name")]: "ConnectionError"
                      };
              }));
}

var Client = {
  errorChan: errorChan,
  dataChan: dataChan,
  onError: onError,
  onResponse: onResponse,
  sendRequest: sendRequest,
  destroy: destroy,
  make: make
};

var Module = {
  $$Error: $$Error,
  Client: Client
};

exports.Module = Module;
exports.$$Error = $$Error;
exports.Client = Client;
/* errorChan Not a pure module */

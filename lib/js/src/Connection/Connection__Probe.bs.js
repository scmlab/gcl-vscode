// Generated by ReScript, PLEASE EDIT WITH CARE
'use strict';

var $$Promise = require("reason-promise/lib/js/src/js/promise.bs.js");
var Process = require("process");
var Belt_Array = require("rescript/lib/js/belt_Array.js");
var Belt_Option = require("rescript/lib/js/belt_Option.js");
var Config$Guabao = require("../Config.bs.js");
var Source$LanguageServerMule = require("language-server-mule/lib/js/src/Source.bs.js");

function chooseFromReleases(releases) {
  var chooseRelease = function (releases) {
    var matched = Belt_Array.keep(releases, (function (release) {
            return release.tagName === Config$Guabao.version;
          }));
    return Belt_Array.get(matched, 0);
  };
  var toFileName = function (release, asset) {
    var osName = asset.name.slice(4, -4);
    return release.tagName + "-" + osName;
  };
  var chooseAsset = function (release) {
    var os = Process.platform;
    var expectedName;
    switch (os) {
      case "darwin" :
          expectedName = "gcl-macos.zip";
          break;
      case "linux" :
          expectedName = "gcl-ubuntu.zip";
          break;
      case "win32" :
          expectedName = "gcl-windows.zip";
          break;
      default:
        expectedName = undefined;
    }
    return Belt_Option.map(Belt_Option.flatMap(expectedName, (function (name) {
                      var matched = Belt_Array.keep(release.assets, (function (asset) {
                              return asset.name === name;
                            }));
                      return Belt_Array.get(matched, 0);
                    })), (function (asset) {
                  return {
                          release: release,
                          asset: asset,
                          srcUrl: asset.url,
                          fileName: toFileName(release, asset)
                        };
                }));
  };
  return Belt_Option.flatMap(chooseRelease(releases), chooseAsset);
}

function probe(globalStoragePath) {
  return $$Promise.mapError(Source$LanguageServerMule.Module.searchUntilSuccess([
                  {
                    TAG: /* FromTCP */1,
                    _0: 3000,
                    _1: "localhost"
                  },
                  {
                    TAG: /* FromPath */0,
                    _0: "gcl"
                  },
                  {
                    TAG: /* FromGitHub */2,
                    _0: {
                      username: "scmlab",
                      repository: "gcl",
                      userAgent: "gcl-vscode",
                      globalStoragePath: globalStoragePath,
                      chooseFromReleases: chooseFromReleases
                    }
                  }
                ]), (function (e) {
                console.log("Source.searchUntilSuccess " + Source$LanguageServerMule.$$Error.toString(e));
                return {
                        TAG: /* CannotAcquireHandle */0,
                        _0: e
                      };
              }));
}

exports.chooseFromReleases = chooseFromReleases;
exports.probe = probe;
/* Promise Not a pure module */

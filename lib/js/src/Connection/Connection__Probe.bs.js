// Generated by ReScript, PLEASE EDIT WITH CARE
'use strict';

var Path = require("path");
var Curry = require("rescript/lib/js/curry.js");
var $$Promise = require("reason-promise/lib/js/src/js/promise.bs.js");
var Process = require("process");
var Belt_Array = require("rescript/lib/js/belt_Array.js");
var Belt_Option = require("rescript/lib/js/belt_Option.js");
var Util$Guabao = require("../Util/Util.bs.js");
var Source$LanguageServerMule = require("language-server-mule/lib/js/src/Source.bs.js");
var Source__GitHub$LanguageServerMule = require("language-server-mule/lib/js/src/Source/Source__GitHub.bs.js");

function chooseFromReleases(releases) {
  var chooseRelease = function (releases) {
    var matched = Belt_Array.keep(releases, (function (release) {
            var x = release.tagName;
            var lower = Util$Guabao.Version.compare(x, "v0.3.0");
            var upper = Util$Guabao.Version.compare(x, "v0.4.0");
            if (lower === /* EQ */1 || lower === /* GT */2) {
              return upper === /* LT */0;
            } else {
              return false;
            }
          }));
    var compare = function (x, y) {
      var match = Util$Guabao.Version.compare(x.tagName, y.tagName);
      switch (match) {
        case /* LT */0 :
            return 1;
        case /* EQ */1 :
            return 0;
        case /* GT */2 :
            return -1;
        
      }
    };
    var sorted = matched.sort(compare);
    return Belt_Array.get(sorted, 0);
  };
  var toFileName = function (release, asset) {
    var osName = asset.name.slice(4, -4);
    return release.tagName + "-" + osName;
  };
  var chooseAsset = function (release) {
    var os = Process.platform;
    var expectedName;
    switch (os) {
      case "darwin" :
          expectedName = "gcl-macos.zip";
          break;
      case "linux" :
          expectedName = "gcl-ubuntu.zip";
          break;
      case "win32" :
          expectedName = "gcl-windows.zip";
          break;
      default:
        expectedName = undefined;
    }
    return Belt_Option.map(Belt_Option.flatMap(expectedName, (function (name) {
                      var matched = Belt_Array.keep(release.assets, (function (asset) {
                              return asset.name === name;
                            }));
                      return Belt_Array.get(matched, 0);
                    })), (function (asset) {
                  return {
                          release: release,
                          asset: asset,
                          srcUrl: asset.url,
                          fileName: toFileName(release, asset)
                        };
                }));
  };
  return Belt_Option.flatMap(chooseRelease(releases), chooseAsset);
}

function afterDownload(fromCached, param) {
  var target = param[1];
  var executablePath = Path.join(param[0], "gcl");
  if (fromCached) {
    return $$Promise.resolved({
                TAG: /* Ok */0,
                _0: [
                  executablePath,
                  [],
                  undefined,
                  target
                ]
              });
  }
  var _others = Process.platform;
  if (_others === "win32") {
    return $$Promise.resolved({
                TAG: /* Ok */0,
                _0: [
                  executablePath,
                  [],
                  undefined,
                  target
                ]
              });
  } else {
    return $$Promise.flatMapOk(Source__GitHub$LanguageServerMule.chmodExecutable(executablePath), (function (param) {
                  var match = $$Promise.pending(undefined);
                  var resolve = match[1];
                  setTimeout((function (param) {
                          return Curry._1(resolve, {
                                      TAG: /* Ok */0,
                                      _0: [
                                        executablePath,
                                        [],
                                        undefined,
                                        target
                                      ]
                                    });
                        }), 100);
                  return match[0];
                }));
  }
}

function probe(globalStoragePath, onDownload) {
  var result = $$Promise.map(Source$LanguageServerMule.searchUntilSuccess([
            {
              TAG: /* FromTCP */2,
              _0: 3000,
              _1: "localhost"
            },
            {
              TAG: /* FromGitHub */3,
              _0: {
                username: "scmlab",
                repository: "gcl",
                userAgent: "gcl-vscode",
                globalStoragePath: globalStoragePath,
                chooseFromReleases: chooseFromReleases,
                onDownload: onDownload,
                afterDownload: afterDownload,
                cacheInvalidateExpirationSecs: 86400,
                log: (function (prim) {
                    console.log(prim);
                    
                  })
              }
            },
            {
              TAG: /* FromCommand */1,
              _0: "gcl"
            }
          ]), Source$LanguageServerMule.consumeResult);
  var commandPathP = $$Promise.map(result, (function (r) {
          if (r.TAG !== /* Ok */0) {
            return "";
          }
          var match = r._0;
          if (match.TAG === /* ViaCommand */0) {
            return match._0;
          } else {
            return "";
          }
        }));
  return [
          result,
          commandPathP
        ];
}

exports.chooseFromReleases = chooseFromReleases;
exports.afterDownload = afterDownload;
exports.probe = probe;
/* path Not a pure module */

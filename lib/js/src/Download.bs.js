// Generated by ReScript, PLEASE EDIT WITH CARE
'use strict';

var Fs = require("fs");
var Curry = require("bs-platform/lib/js/curry.js");
var Https = require("https");
var $$Promise = require("reason-promise/lib/js/src/js/promise.bs.js");
var Process = require("process");

var Fs$1 = {};

var Https$1 = {};

var Url = {};

var Nd = {
  Fs: Fs$1,
  Https: Https$1,
  Url: Url
};

function value(param) {
  var match = Process.platform;
  switch (match) {
    case "darwin" :
        return /* MacOS */0;
    case "linux" :
        return /* Linux */1;
    case "win32" :
        return /* Windows */2;
    default:
      return ;
  }
}

function toAssetSuffix(x) {
  switch (x) {
    case /* MacOS */0 :
        return "macos";
    case /* Linux */1 :
        return "linux";
    case /* Windows */2 :
        return "windows";
    
  }
}

var SupportedOS = {
  value: value,
  toAssetSuffix: toAssetSuffix
};

function getReleases(context) {
  var httpOptions = {
    host: "api.github.com",
    path: "/repos/scmlab/gcl/releases",
    headers: {
      "User-Agent": "gcl-vscode"
    }
  };
  var match = $$Promise.pending(undefined);
  var resolve = match[1];
  var body = {
    contents: ""
  };
  Https.get(httpOptions, (function (res) {
          res.on("data", (function (buf) {
                  body.contents = body.contents + buf.toString();
                  
                }));
          res.on("close", (function () {
                  return Curry._1(resolve, body.contents);
                }));
          
        }));
  return match[0];
}

function downloadLanguageServer(context) {
  var globalStoragePath = context.globalStoragePath;
  if (!Fs.existsSync(globalStoragePath)) {
    Fs.mkdirSync(globalStoragePath);
  }
  
}

exports.Nd = Nd;
exports.SupportedOS = SupportedOS;
exports.getReleases = getReleases;
exports.downloadLanguageServer = downloadLanguageServer;
/* fs Not a pure module */

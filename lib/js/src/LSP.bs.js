// Generated by ReScript, PLEASE EDIT WITH CARE
'use strict';

var Curry = require("bs-platform/lib/js/curry.js");
var VSCode = require("bs-vscode/lib/js/src/VSCode.bs.js");
var Vscode = require("vscode");
var $$Promise = require("reason-promise/lib/js/src/js/promise.bs.js");
var Belt_Array = require("bs-platform/lib/js/belt_Array.js");
var Belt_Option = require("bs-platform/lib/js/belt_Option.js");
var Json_decode = require("@glennsl/bs-json/lib/js/src/Json_decode.bs.js");
var Chan$Guacamole = require("./Util/Chan.bs.js");
var Util$Guacamole = require("./Util/Util.bs.js");
var Request$Guacamole = require("./Request.bs.js");
var Caml_js_exceptions = require("bs-platform/lib/js/caml_js_exceptions.js");
var Response$Guacamole = require("./Response.bs.js");
var VscodeLanguageclient = require("vscode-languageclient");

var Message = {};

function toEnum(x) {
  if (x) {
    return 2;
  } else {
    return 1;
  }
}

var ErrorAction = {
  toEnum: toEnum
};

function toEnum$1(x) {
  if (x) {
    return 2;
  } else {
    return 1;
  }
}

var CloseAction = {
  toEnum: toEnum$1
};

function make(error, closed) {
  var error$1 = function (a, b, c) {
    var x = Curry._3(error, a, b, c);
    if (x) {
      return 2;
    } else {
      return 1;
    }
  };
  var closed$1 = function (param) {
    var x = Curry._1(closed, undefined);
    if (x) {
      return 2;
    } else {
      return 1;
    }
  };
  return {
          error: error$1,
          closed: closed$1
        };
}

function makeDefault(name, maxRestartCount) {
  var restarts = [];
  return make((function (param, param$1, count) {
                if (count !== undefined && count <= 3) {
                  return /* Continue */0;
                } else {
                  return /* Shutdown */1;
                }
              }), (function (param) {
                restarts.push(Date.now());
                var length = restarts.length;
                if (length <= maxRestartCount) {
                  return /* Restart */1;
                }
                var diff = Belt_Option.flatMap(Belt_Array.get(restarts, length - 1 | 0), (function (latest) {
                        return Belt_Option.map(Belt_Array.get(restarts, 0), (function (first) {
                                      return latest - first;
                                    }));
                      }));
                if (diff === undefined) {
                  return /* Restart */1;
                }
                if ((diff | 0) <= 180000) {
                  var max = String(maxRestartCount + 1 | 0);
                  Vscode.window.showErrorMessage("The " + name + "server crashed " + max + " times in the last 3 minutes. The server will not be restarted.");
                  return /* DoNotRestart */0;
                }
                restarts.shift();
                return /* Restart */1;
              }));
}

var ErrorHandler = {
  make: make,
  makeDefault: makeDefault
};

var make$1 = (function (documentSelector, synchronize, errorHandler) {
      return {
		    documentSelector: documentSelector,
		    synchronize: synchronize,
        errorHandler: errorHandler
      }
    });

var LanguageClientOptions = {
  make: make$1
};

var makeWithCommand = (function (command) {
      return { command: command }
    });

var makeWithStreamInfo = (function (port) {
      const net = require('net');
      const socket = net.createConnection({ port: port })
      return (() => { return new Promise(resolve => resolve({
        writer: socket,
        reader: socket
      })
      )})
    });

var ServerOptions = {
  makeWithCommand: makeWithCommand,
  makeWithStreamInfo: makeWithStreamInfo
};

var WebviewEditorInset = {};

var WindowExt = {};

var LanguageClient = {};

var errorChan = Chan$Guacamole.make(undefined);

var dataChan = Chan$Guacamole.make(undefined);

function onError(callback) {
  return new Vscode.Disposable(Chan$Guacamole.on(errorChan, callback));
}

function onData(callback) {
  return new Vscode.Disposable(Chan$Guacamole.on(dataChan, callback));
}

function sendRequest(self, data) {
  return $$Promise.flatMapOk($$Promise.Js.toResult(self.client.onReady()), (function (param) {
                return $$Promise.Js.toResult(self.client.sendRequest("guacamole", data));
              }));
}

function destroy(self) {
  self.subscription.dispose();
  return $$Promise.map($$Promise.Js.toResult(self.client.stop()), (function (param) {
                
              }));
}

function make$2(devMode, method) {
  var serverOptions = method === /* ViaTCP */1 ? makeWithStreamInfo(3000) : makeWithCommand("gcl");
  var documentSelector = [VSCode.StringOr.others({
          language: "guacamole",
          pattern: undefined,
          scheme: "file"
        })];
  var synchronize = Vscode.workspace.createFileSystemWatcher('**/.clientrc', false, false, false);
  var errorHandler = devMode ? make((function (exn, _msg, _count) {
            Chan$Guacamole.emit(errorChan, exn);
            return /* Shutdown */1;
          }), (function (param) {
            return /* DoNotRestart */0;
          })) : makeDefault("Guacamole", 3);
  var clientOptions = make$1(documentSelector, synchronize, errorHandler);
  var languageClient = new VscodeLanguageclient.LanguageClient("guacamoleLanguageServer", "Guacamole Language Server", serverOptions, clientOptions);
  var self = {
    client: languageClient,
    queue: [],
    subscription: languageClient.start()
  };
  return $$Promise.map($$Promise.race({
                  hd: $$Promise.Js.toResult(self.client.onReady()),
                  tl: {
                    hd: $$Promise.map(Chan$Guacamole.once(errorChan), (function (err) {
                            return {
                                    TAG: 1,
                                    _0: err,
                                    [Symbol.for("name")]: "Error"
                                  };
                          })),
                    tl: /* [] */0
                  }
                }), (function (result) {
                if (result.TAG !== /* Ok */0) {
                  return {
                          TAG: 1,
                          _0: result._0,
                          [Symbol.for("name")]: "Error"
                        };
                }
                self.client.onNotification("guacamole", (function (json) {
                        return Chan$Guacamole.emit(dataChan, json);
                      }));
                return {
                        TAG: 0,
                        _0: self,
                        [Symbol.for("name")]: "Ok"
                      };
              }));
}

var Client = {
  onError: onError,
  onData: onData,
  sendRequest: sendRequest,
  destroy: destroy,
  make: make$2
};

var statusChan = Chan$Guacamole.make(undefined);

var methodChan = Chan$Guacamole.make(undefined);

var singleton = {
  state: /* Disconnected */0,
  method: /* ViaStdIO */0,
  devMode: false
};

function stop(param) {
  var client = singleton.state;
  if (typeof client === "number") {
    return $$Promise.resolved(undefined);
  }
  if (client.TAG === /* Connecting */0) {
    singleton.state = /* Disconnected */0;
    Chan$Guacamole.emit(statusChan, /* Disconnected */0);
    return $$Promise.resolved(undefined);
  }
  singleton.state = /* Disconnected */0;
  Chan$Guacamole.emit(statusChan, /* Disconnected */0);
  return destroy(client._0);
}

function decodeResponse(json) {
  try {
    return Response$Guacamole.decode(json);
  }
  catch (raw_msg){
    var msg = Caml_js_exceptions.internalToOCamlException(raw_msg);
    if (msg.RE_EXN_ID === Json_decode.DecodeError) {
      return {
              TAG: 1,
              _0: msg._1,
              _1: json,
              [Symbol.for("name")]: "CannotDecodeResponse"
            };
    }
    throw msg;
  }
}

function sendRequestWithClient(client, request) {
  return $$Promise.map(sendRequest(client, Request$Guacamole.encode(request)), (function (x) {
                if (x.TAG === /* Ok */0) {
                  return decodeResponse(x._0);
                }
                Chan$Guacamole.emit(statusChan, /* Disconnected */0);
                return {
                        TAG: 3,
                        _0: Response$Guacamole.$$Error.fromJsError(x._0),
                        [Symbol.for("name")]: "CannotSendRequest"
                      };
              }));
}

function startWithMethod(devMode, method) {
  var match = singleton.state;
  if (typeof match !== "number") {
    if (match.TAG === /* Connecting */0) {
      return match._1;
    } else {
      return $$Promise.resolved(true);
    }
  }
  var match$1 = $$Promise.pending(undefined);
  var resolve = match$1[1];
  singleton.state = {
    TAG: 0,
    _0: [],
    _1: match$1[0],
    [Symbol.for("name")]: "Connecting"
  };
  Chan$Guacamole.emit(statusChan, /* Connecting */1);
  return $$Promise.flatMap(make$2(devMode, method), (function (result) {
                if (result.TAG === /* Ok */0) {
                  var client = result._0;
                  var match = singleton.state;
                  var queuedRequest;
                  queuedRequest = typeof match === "number" ? [] : (
                      match.TAG === /* Connecting */0 ? match._0 : []
                    );
                  Curry._1(resolve, true);
                  singleton.state = {
                    TAG: 1,
                    _0: client,
                    [Symbol.for("name")]: "Connected"
                  };
                  Chan$Guacamole.emit(statusChan, /* Connected */2);
                  return $$Promise.map(Util$Guacamole.$$Promise.oneByOne(Belt_Array.map(queuedRequest, (function (param) {
                                        return $$Promise.tap(sendRequestWithClient(client, param[0]), param[1]);
                                      }))), (function (param) {
                                return true;
                              }));
                }
                var isECONNREFUSED = Belt_Option.mapWithDefault(result._0.message, false, (function (param) {
                        return param.startsWith("connect ECONNREFUSED");
                      }));
                var shouldSwitchToStdIO = isECONNREFUSED && method === /* ViaTCP */1;
                if (shouldSwitchToStdIO) {
                  console.log("Connecting via TCP failed, switch to StdIO");
                  singleton.method = /* ViaStdIO */0;
                  Chan$Guacamole.emit(methodChan, /* ViaStdIO */0);
                  singleton.state = /* Disconnected */0;
                  Chan$Guacamole.emit(statusChan, /* Disconnected */0);
                  return startWithMethod(devMode, /* ViaStdIO */0);
                } else {
                  singleton.state = /* Disconnected */0;
                  Chan$Guacamole.emit(statusChan, /* Disconnected */0);
                  Curry._1(resolve, false);
                  return $$Promise.resolved(false);
                }
              }));
}

function start(devMode) {
  singleton.devMode = devMode;
  singleton.method = devMode ? /* ViaTCP */1 : /* ViaStdIO */0;
  return startWithMethod(devMode, singleton.method);
}

function isConnected(param) {
  var match = singleton.state;
  if (typeof match === "number" || match.TAG === /* Connecting */0) {
    return false;
  } else {
    return true;
  }
}

function onResponse(handler) {
  return new Vscode.Disposable(Chan$Guacamole.on(dataChan, (function (json) {
                    return Curry._1(handler, decodeResponse(json));
                  })));
}

function onChangeStatus(callback) {
  return new Vscode.Disposable(Chan$Guacamole.on(statusChan, callback));
}

function onChangeMethod(callback) {
  return new Vscode.Disposable(Chan$Guacamole.on(methodChan, callback));
}

function sendRequest$1(request) {
  var client = singleton.state;
  if (typeof client === "number") {
    return $$Promise.resolved(undefined);
  }
  if (client.TAG !== /* Connecting */0) {
    return sendRequestWithClient(client._0, request);
  }
  var match = $$Promise.pending(undefined);
  client._0.push([
        request,
        match[1]
      ]);
  return match[0];
}

function changeMethod(method) {
  if (singleton.method !== method) {
    singleton.method = method;
    Chan$Guacamole.emit(methodChan, method);
    return $$Promise.flatMap(stop(undefined), (function (param) {
                  return start(singleton.devMode);
                }));
  } else {
    return $$Promise.resolved(false);
  }
}

var Module = {
  start: start,
  stop: stop,
  sendRequest: sendRequest$1,
  changeMethod: changeMethod,
  isConnected: isConnected,
  onResponse: onResponse,
  onError: onError,
  onChangeStatus: onChangeStatus,
  onChangeMethod: onChangeMethod
};

exports.Message = Message;
exports.ErrorAction = ErrorAction;
exports.CloseAction = CloseAction;
exports.ErrorHandler = ErrorHandler;
exports.LanguageClientOptions = LanguageClientOptions;
exports.ServerOptions = ServerOptions;
exports.WebviewEditorInset = WebviewEditorInset;
exports.WindowExt = WindowExt;
exports.LanguageClient = LanguageClient;
exports.Client = Client;
exports.Module = Module;
exports.start = start;
exports.stop = stop;
exports.sendRequest = sendRequest$1;
exports.changeMethod = changeMethod;
exports.isConnected = isConnected;
exports.onResponse = onResponse;
exports.onError = onError;
exports.onChangeStatus = onChangeStatus;
exports.onChangeMethod = onChangeMethod;
/* errorChan Not a pure module */

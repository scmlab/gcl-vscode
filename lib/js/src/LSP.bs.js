// Generated by ReScript, PLEASE EDIT WITH CARE
'use strict';

var Curry = require("bs-platform/lib/js/curry.js");
var Vscode = require("vscode");
var Belt_Array = require("bs-platform/lib/js/belt_Array.js");
var Belt_Option = require("bs-platform/lib/js/belt_Option.js");

var Message = {};

function toEnum(x) {
  if (x) {
    return 2;
  } else {
    return 1;
  }
}

var ErrorAction = {
  toEnum: toEnum
};

function toEnum$1(x) {
  if (x) {
    return 2;
  } else {
    return 1;
  }
}

var CloseAction = {
  toEnum: toEnum$1
};

function make(error, closed) {
  var error$1 = function (a, b, c) {
    var x = Curry._3(error, a, b, c);
    if (x) {
      return 2;
    } else {
      return 1;
    }
  };
  var closed$1 = function (param) {
    var x = Curry._1(closed, undefined);
    if (x) {
      return 2;
    } else {
      return 1;
    }
  };
  return {
          error: error$1,
          closed: closed$1
        };
}

function makeDefault(name, maxRestartCount) {
  var restarts = [];
  return make((function (param, param$1, count) {
                if (count !== undefined && count <= 3) {
                  return /* Continue */0;
                } else {
                  return /* Shutdown */1;
                }
              }), (function (param) {
                restarts.push(Date.now());
                var length = restarts.length;
                if (length <= maxRestartCount) {
                  return /* Restart */1;
                }
                var diff = Belt_Option.flatMap(Belt_Array.get(restarts, length - 1 | 0), (function (latest) {
                        return Belt_Option.map(Belt_Array.get(restarts, 0), (function (first) {
                                      return latest - first;
                                    }));
                      }));
                if (diff === undefined) {
                  return /* Restart */1;
                }
                if ((diff | 0) <= 180000) {
                  var max = String(maxRestartCount + 1 | 0);
                  Vscode.window.showErrorMessage("The " + name + "server crashed " + max + " times in the last 3 minutes. The server will not be restarted.");
                  return /* DoNotRestart */0;
                }
                restarts.shift();
                return /* Restart */1;
              }));
}

var ErrorHandler = {
  make: make,
  makeDefault: makeDefault
};

var make$1 = (function (documentSelector, synchronize, errorHandler) {
      return {
		    documentSelector: documentSelector,
		    synchronize: synchronize,
        errorHandler: errorHandler
      }
    });

var LanguageClientOptions = {
  make: make$1
};

var makeCommand = (function (command) {
      return { command: command }
    });

var ServerOptions = {
  makeCommand: makeCommand
};

var WebviewEditorInset = {};

var WindowExt = {};

var LanguageClient = {};

exports.Message = Message;
exports.ErrorAction = ErrorAction;
exports.CloseAction = CloseAction;
exports.ErrorHandler = ErrorHandler;
exports.LanguageClientOptions = LanguageClientOptions;
exports.ServerOptions = ServerOptions;
exports.WebviewEditorInset = WebviewEditorInset;
exports.WindowExt = WindowExt;
exports.LanguageClient = LanguageClient;
/* vscode Not a pure module */

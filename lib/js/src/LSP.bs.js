// Generated by ReScript, PLEASE EDIT WITH CARE
'use strict';

var Curry = require("bs-platform/lib/js/curry.js");
var VSCode = require("bs-vscode/lib/js/src/VSCode.bs.js");
var Vscode = require("vscode");
var $$Promise = require("reason-promise/lib/js/src/js/promise.bs.js");
var Belt_Array = require("bs-platform/lib/js/belt_Array.js");
var Belt_Option = require("bs-platform/lib/js/belt_Option.js");
var Json_decode = require("@glennsl/bs-json/lib/js/src/Json_decode.bs.js");
var Chan$Guacamole = require("./Util/Chan.bs.js");
var Request$Guacamole = require("./Request.bs.js");
var Caml_js_exceptions = require("bs-platform/lib/js/caml_js_exceptions.js");
var Response$Guacamole = require("./Response.bs.js");
var VscodeLanguageclient = require("vscode-languageclient");

var Message = {};

function toEnum(x) {
  if (x) {
    return 2;
  } else {
    return 1;
  }
}

var ErrorAction = {
  toEnum: toEnum
};

function toEnum$1(x) {
  if (x) {
    return 2;
  } else {
    return 1;
  }
}

var CloseAction = {
  toEnum: toEnum$1
};

function make(error, closed) {
  var error$1 = function (a, b, c) {
    var x = Curry._3(error, a, b, c);
    if (x) {
      return 2;
    } else {
      return 1;
    }
  };
  var closed$1 = function (param) {
    var x = Curry._1(closed, undefined);
    if (x) {
      return 2;
    } else {
      return 1;
    }
  };
  return {
          error: error$1,
          closed: closed$1
        };
}

function makeDefault(name, maxRestartCount) {
  var restarts = [];
  return make((function (param, param$1, count) {
                if (count !== undefined && count <= 3) {
                  return /* Continue */0;
                } else {
                  return /* Shutdown */1;
                }
              }), (function (param) {
                restarts.push(Date.now());
                var length = restarts.length;
                if (length <= maxRestartCount) {
                  return /* Restart */1;
                }
                var diff = Belt_Option.flatMap(Belt_Array.get(restarts, length - 1 | 0), (function (latest) {
                        return Belt_Option.map(Belt_Array.get(restarts, 0), (function (first) {
                                      return latest - first;
                                    }));
                      }));
                if (diff === undefined) {
                  return /* Restart */1;
                }
                if ((diff | 0) <= 180000) {
                  var max = String(maxRestartCount + 1 | 0);
                  Vscode.window.showErrorMessage("The " + name + "server crashed " + max + " times in the last 3 minutes. The server will not be restarted.");
                  return /* DoNotRestart */0;
                }
                restarts.shift();
                return /* Restart */1;
              }));
}

var ErrorHandler = {
  make: make,
  makeDefault: makeDefault
};

var make$1 = (function (documentSelector, synchronize, errorHandler) {
      return {
		    documentSelector: documentSelector,
		    synchronize: synchronize,
        errorHandler: errorHandler
      }
    });

var LanguageClientOptions = {
  make: make$1
};

var makeWithCommand = (function (command) {
      return { command: command }
    });

var makeWithStreamInfo = (function (port) {
      const net = require('net');
      const socket = net.createConnection({ port: port })
      return (() => { return new Promise(resolve => resolve({
        writer: socket,
        reader: socket
      })
      )})
    });

var ServerOptions = {
  makeWithCommand: makeWithCommand,
  makeWithStreamInfo: makeWithStreamInfo
};

var WebviewEditorInset = {};

var WindowExt = {};

var LanguageClient = {};

var statusChan = Chan$Guacamole.make(undefined);

var singleton = {
  contents: /* Disconnected */0
};

function make$2(viaTCP) {
  var serverOptions = viaTCP ? makeWithStreamInfo(3000) : makeWithCommand("gcl");
  var documentSelector = [VSCode.StringOr.others({
          language: "guacamole",
          pattern: undefined,
          scheme: "file"
        })];
  var synchronize = Vscode.workspace.createFileSystemWatcher('**/.clientrc', false, false, false);
  make((function (exn, msg, count) {
          console.log("error", exn, msg, count);
          return /* Shutdown */1;
        }), (function (param) {
          console.log("closed");
          return /* DoNotRestart */0;
        }));
  var clientOptions = make$1(documentSelector, synchronize, makeDefault("Guacamole", 3));
  return new VscodeLanguageclient.LanguageClient("guacamoleLanguageServer", "Guacamole Language Server", serverOptions, clientOptions);
}

function start(viaTCP) {
  var match = singleton.contents;
  if (typeof match !== "number") {
    return $$Promise.resolved(undefined);
  }
  var client = make$2(viaTCP);
  var subscription = client.start();
  var state = {
    client: client,
    queue: [],
    subscription: subscription
  };
  singleton.contents = {
    TAG: 0,
    _0: state,
    [Symbol.for("name")]: "Connecting"
  };
  Chan$Guacamole.emit(statusChan, /* Connecting */1);
  return $$Promise.map($$Promise.Js.toResult(client.onReady()), (function (result) {
                if (result.TAG !== /* Ok */0) {
                  return ;
                }
                Chan$Guacamole.emit(statusChan, /* Connected */2);
                singleton.contents = {
                  TAG: 1,
                  _0: state,
                  [Symbol.for("name")]: "Connected"
                };
                
              }));
}

function stop(param) {
  var match = singleton.contents;
  if (typeof match === "number") {
    return $$Promise.resolved(undefined);
  }
  var match$1 = match._0;
  var client = match$1.client;
  singleton.contents = /* Disconnected */0;
  Chan$Guacamole.emit(statusChan, /* Disconnected */0);
  match$1.subscription.dispose();
  return $$Promise.map($$Promise.Js.toResult(client.stop()), (function (param) {
                
              }));
}

function isConnected(param) {
  var match = singleton.contents;
  if (typeof match === "number") {
    return false;
  } else {
    return true;
  }
}

function decodeResponse(json) {
  try {
    return Response$Guacamole.decode(json);
  }
  catch (raw_msg){
    var msg = Caml_js_exceptions.internalToOCamlException(raw_msg);
    if (msg.RE_EXN_ID === Json_decode.DecodeError) {
      return {
              TAG: 1,
              _0: msg._1,
              _1: json,
              [Symbol.for("name")]: "CannotDecodeResponse"
            };
    }
    throw msg;
  }
}

function on(handler) {
  var match = singleton.contents;
  if (typeof match === "number") {
    return ;
  }
  var client = match._0.client;
  return $$Promise.getOk($$Promise.Js.toResult(client.onReady()), (function (param) {
                client.onNotification("guacamole", (function (json) {
                        return Curry._1(handler, decodeResponse(json));
                      }));
                
              }));
}

function onChangeConnectionStatus(callback) {
  return new Vscode.Disposable(Chan$Guacamole.on(statusChan, callback));
}

function send(request) {
  var match = singleton.contents;
  if (typeof match === "number") {
    return $$Promise.resolved(undefined);
  }
  if (match.TAG === /* Connecting */0) {
    console.log("queued");
    var match$1 = $$Promise.pending(undefined);
    match._0.queue.push([
          request,
          match$1[1]
        ]);
    return $$Promise.map(match$1[0], (function (x) {
                  return x;
                }));
  }
  var client = match._0.client;
  return $$Promise.map($$Promise.flatMapOk($$Promise.Js.toResult(client.onReady()), (function (param) {
                    var value = Request$Guacamole.encode(request);
                    return $$Promise.Js.toResult(client.sendRequest("guacamole", value));
                  })), (function (x) {
                if (x.TAG === /* Ok */0) {
                  return decodeResponse(x._0);
                }
                Chan$Guacamole.emit(statusChan, /* Disconnected */0);
                return {
                        TAG: 3,
                        _0: Response$Guacamole.$$Error.fromJsError(x._0),
                        [Symbol.for("name")]: "CannotSendRequest"
                      };
              }));
}

var Client = {
  start: start,
  stop: stop,
  isConnected: isConnected,
  on: on,
  onChangeConnectionStatus: onChangeConnectionStatus,
  send: send
};

exports.Message = Message;
exports.ErrorAction = ErrorAction;
exports.CloseAction = CloseAction;
exports.ErrorHandler = ErrorHandler;
exports.LanguageClientOptions = LanguageClientOptions;
exports.ServerOptions = ServerOptions;
exports.WebviewEditorInset = WebviewEditorInset;
exports.WindowExt = WindowExt;
exports.LanguageClient = LanguageClient;
exports.Client = Client;
/* statusChan Not a pure module */

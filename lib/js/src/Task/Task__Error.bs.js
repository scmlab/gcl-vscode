// Generated by BUCKLESCRIPT, PLEASE EDIT WITH CARE
'use strict';

var Curry = require("bs-platform/lib/js/curry.js");
var GCL$Guacamole = require("../GCL.bs.js");
var Caml_splice_call = require("bs-platform/lib/js/caml_splice_call.js");
var Caml_chrome_debugger = require("bs-platform/lib/js/caml_chrome_debugger.js");
var Impl__State$Guacamole = require("../Implementation/Impl__State.bs.js");
var Task__Types$Guacamole = require("./Task__Types.bs.js");

function Impl(Editor) {
  var State = Impl__State$Guacamole.Impl(Editor);
  var Task__Types = Task__Types$Guacamole.Impl(Editor);
  var handle = function (_site, param) {
    switch (param) {
      case /* MissingAssertion */0 :
          return /* :: */Caml_chrome_debugger.simpleVariant("::", [
                    /* AddDecorations */Caml_chrome_debugger.variant("AddDecorations", 2, [[]]),
                    /* :: */Caml_chrome_debugger.simpleVariant("::", [
                        /* Display */Caml_chrome_debugger.variant("Display", 5, [
                            /* Error */Caml_chrome_debugger.variant("Error", 1, ["Assertion Missing"]),
                            /* Plain */Caml_chrome_debugger.variant("Plain", 1, ["Assertion before the DO construct is missing"])
                          ]),
                        /* [] */0
                      ])
                  ]);
      case /* MissingBound */1 :
          return /* :: */Caml_chrome_debugger.simpleVariant("::", [
                    /* AddDecorations */Caml_chrome_debugger.variant("AddDecorations", 2, [[]]),
                    /* :: */Caml_chrome_debugger.simpleVariant("::", [
                        /* Display */Caml_chrome_debugger.variant("Display", 5, [
                            /* Error */Caml_chrome_debugger.variant("Error", 1, ["Bound Missing"]),
                            /* Plain */Caml_chrome_debugger.variant("Plain", 1, ["Bound missing at the end of the assertion before the DO construct \" , bnd : ... }\""])
                          ]),
                        /* [] */0
                      ])
                  ]);
      case /* ExcessBound */2 :
          return /* :: */Caml_chrome_debugger.simpleVariant("::", [
                    /* AddDecorations */Caml_chrome_debugger.variant("AddDecorations", 2, [[]]),
                    /* :: */Caml_chrome_debugger.simpleVariant("::", [
                        /* Display */Caml_chrome_debugger.variant("Display", 5, [
                            /* Error */Caml_chrome_debugger.variant("Error", 1, ["Excess Bound"]),
                            /* Plain */Caml_chrome_debugger.variant("Plain", 1, ["Unnecessary bound annotation at this assertion"])
                          ]),
                        /* [] */0
                      ])
                  ]);
      case /* MissingPostcondition */3 :
          return /* :: */Caml_chrome_debugger.simpleVariant("::", [
                    /* Display */Caml_chrome_debugger.variant("Display", 5, [
                        /* Error */Caml_chrome_debugger.variant("Error", 1, ["Postcondition Missing"]),
                        /* Plain */Caml_chrome_debugger.variant("Plain", 1, ["The last statement of the program should be an assertion"])
                      ]),
                    /* [] */0
                  ]);
      case /* DigHole */4 :
          return /* [] */0;
      
    }
  };
  var StructError = {
    handle: handle
  };
  var handle$1 = function (_site, param) {
    switch (param) {
      case /* MissingLoopInvariant */0 :
          return /* :: */Caml_chrome_debugger.simpleVariant("::", [
                    /* AddDecorations */Caml_chrome_debugger.variant("AddDecorations", 2, [[]]),
                    /* :: */Caml_chrome_debugger.simpleVariant("::", [
                        /* Display */Caml_chrome_debugger.variant("Display", 5, [
                            /* Error */Caml_chrome_debugger.variant("Error", 1, ["Loop Invariant Missing"]),
                            /* Plain */Caml_chrome_debugger.variant("Plain", 1, ["Loop invariant before the DO construct is missing"])
                          ]),
                        /* [] */0
                      ])
                  ]);
      case /* MissingBound */1 :
          return /* :: */Caml_chrome_debugger.simpleVariant("::", [
                    /* AddDecorations */Caml_chrome_debugger.variant("AddDecorations", 2, [[]]),
                    /* :: */Caml_chrome_debugger.simpleVariant("::", [
                        /* Display */Caml_chrome_debugger.variant("Display", 5, [
                            /* Error */Caml_chrome_debugger.variant("Error", 1, ["Bound Missing"]),
                            /* Plain */Caml_chrome_debugger.variant("Plain", 1, ["Bound missing at the end of the assertion before the DO construct \" , bnd : ... }\""])
                          ]),
                        /* [] */0
                      ])
                  ]);
      case /* MissingPrecondition */2 :
          return /* :: */Caml_chrome_debugger.simpleVariant("::", [
                    /* Display */Caml_chrome_debugger.variant("Display", 5, [
                        /* Error */Caml_chrome_debugger.variant("Error", 1, ["Precondition Missing"]),
                        /* Plain */Caml_chrome_debugger.variant("Plain", 1, ["The first statement of the program should be an assertion"])
                      ]),
                    /* [] */0
                  ]);
      case /* MissingPostcondition */3 :
          return /* :: */Caml_chrome_debugger.simpleVariant("::", [
                    /* Display */Caml_chrome_debugger.variant("Display", 5, [
                        /* Error */Caml_chrome_debugger.variant("Error", 1, ["Postcondition Missing"]),
                        /* Plain */Caml_chrome_debugger.variant("Plain", 1, ["The last statement of the program should be an assertion"])
                      ]),
                    /* [] */0
                  ]);
      case /* PreconditionUnknown */4 :
          return /* :: */Caml_chrome_debugger.simpleVariant("::", [
                    /* Display */Caml_chrome_debugger.variant("Display", 5, [
                        /* Error */Caml_chrome_debugger.variant("Error", 1, ["Precondition Unknown"]),
                        /* Plain */Caml_chrome_debugger.variant("Plain", 1, [""])
                      ]),
                    /* [] */0
                  ]);
      case /* DigHole */5 :
          return /* [] */0;
      
    }
  };
  var StructError2 = {
    handle: handle$1
  };
  var handle$2 = function (error) {
    var kind = error[1];
    var site = error[0];
    if (typeof kind === "number") {
      if (kind === /* LexicalError */0) {
        return /* :: */Caml_chrome_debugger.simpleVariant("::", [
                  /* AddDecorations */Caml_chrome_debugger.variant("AddDecorations", 2, [[]]),
                  /* :: */Caml_chrome_debugger.simpleVariant("::", [
                      /* Display */Caml_chrome_debugger.variant("Display", 5, [
                          /* Error */Caml_chrome_debugger.variant("Error", 1, ["Lexical Error"]),
                          /* Plain */Caml_chrome_debugger.variant("Plain", 1, [Curry._1(GCL$Guacamole.$$Response.$$Error.Site.toString, site)])
                        ]),
                      /* [] */0
                    ])
                ]);
      } else {
        return /* :: */Caml_chrome_debugger.simpleVariant("::", [
                  /* AddDecorations */Caml_chrome_debugger.variant("AddDecorations", 2, [[]]),
                  /* :: */Caml_chrome_debugger.simpleVariant("::", [
                      /* Display */Caml_chrome_debugger.variant("Display", 5, [
                          /* Error */Caml_chrome_debugger.variant("Error", 1, ["Not Loaded"]),
                          /* Plain */Caml_chrome_debugger.variant("Plain", 1, ["Please load the file first"])
                        ]),
                      /* [] */0
                    ])
                ]);
      }
    } else {
      switch (kind.tag | 0) {
        case /* SyntacticError */0 :
            return /* :: */Caml_chrome_debugger.simpleVariant("::", [
                      /* AddDecorations */Caml_chrome_debugger.variant("AddDecorations", 2, [[]]),
                      /* :: */Caml_chrome_debugger.simpleVariant("::", [
                          /* Display */Caml_chrome_debugger.variant("Display", 5, [
                              /* Error */Caml_chrome_debugger.variant("Error", 1, ["Parse Error"]),
                              /* Plain */Caml_chrome_debugger.variant("Plain", 1, [Caml_splice_call.spliceObjApply("\n", "concat", [kind[0]])])
                            ]),
                          /* [] */0
                        ])
                    ]);
        case /* StructError */1 :
            return handle(site, kind[0]);
        case /* StructError2 */2 :
            return handle$1(site, kind[0]);
        case /* TypeError */3 :
            var match = kind[0];
            switch (match.tag | 0) {
              case /* NotInScope */0 :
                  return /* :: */Caml_chrome_debugger.simpleVariant("::", [
                            /* AddDecorations */Caml_chrome_debugger.variant("AddDecorations", 2, [[]]),
                            /* :: */Caml_chrome_debugger.simpleVariant("::", [
                                /* Display */Caml_chrome_debugger.variant("Display", 5, [
                                    /* Error */Caml_chrome_debugger.variant("Error", 1, ["Type Error"]),
                                    /* Plain */Caml_chrome_debugger.variant("Plain", 1, ["The definition " + (match[0] + " is not in scope")])
                                  ]),
                                /* [] */0
                              ])
                          ]);
              case /* UnifyFailed */1 :
                  return /* :: */Caml_chrome_debugger.simpleVariant("::", [
                            /* AddDecorations */Caml_chrome_debugger.variant("AddDecorations", 2, [[]]),
                            /* :: */Caml_chrome_debugger.simpleVariant("::", [
                                /* Display */Caml_chrome_debugger.variant("Display", 5, [
                                    /* Error */Caml_chrome_debugger.variant("Error", 1, ["Type Error"]),
                                    /* Plain */Caml_chrome_debugger.variant("Plain", 1, ["Cannot unify: " + (Curry._1(GCL$Guacamole.Syntax.Type.toString, match[0]) + ("\nwith        : " + Curry._1(GCL$Guacamole.Syntax.Type.toString, match[1])))])
                                  ]),
                                /* [] */0
                              ])
                          ]);
              case /* RecursiveType */2 :
                  return /* :: */Caml_chrome_debugger.simpleVariant("::", [
                            /* AddDecorations */Caml_chrome_debugger.variant("AddDecorations", 2, [[]]),
                            /* :: */Caml_chrome_debugger.simpleVariant("::", [
                                /* Display */Caml_chrome_debugger.variant("Display", 5, [
                                    /* Error */Caml_chrome_debugger.variant("Error", 1, ["Type Error"]),
                                    /* Plain */Caml_chrome_debugger.variant("Plain", 1, ["Recursive type variable: " + (Curry._1(GCL$Guacamole.Syntax.Type.toString, /* Var */Caml_chrome_debugger.variant("Var", 3, [match[0]])) + ("\nin type             : " + Curry._1(GCL$Guacamole.Syntax.Type.toString, match[1])))])
                                  ]),
                                /* [] */0
                              ])
                          ]);
              case /* NotFunction */3 :
                  return /* :: */Caml_chrome_debugger.simpleVariant("::", [
                            /* AddDecorations */Caml_chrome_debugger.variant("AddDecorations", 2, [[]]),
                            /* :: */Caml_chrome_debugger.simpleVariant("::", [
                                /* Display */Caml_chrome_debugger.variant("Display", 5, [
                                    /* Error */Caml_chrome_debugger.variant("Error", 1, ["Type Error"]),
                                    /* Plain */Caml_chrome_debugger.variant("Plain", 1, ["The type " + (Curry._1(GCL$Guacamole.Syntax.Type.toString, match[0]) + " is not a function type")])
                                  ]),
                                /* [] */0
                              ])
                          ]);
              
            }
        case /* CannotReadFile */4 :
            return /* :: */Caml_chrome_debugger.simpleVariant("::", [
                      /* AddDecorations */Caml_chrome_debugger.variant("AddDecorations", 2, [[]]),
                      /* :: */Caml_chrome_debugger.simpleVariant("::", [
                          /* Display */Caml_chrome_debugger.variant("Display", 5, [
                              /* Error */Caml_chrome_debugger.variant("Error", 1, ["Cannot Read File"]),
                              /* Plain */Caml_chrome_debugger.variant("Plain", 1, ["Cannot read file of path: " + kind[0]])
                            ]),
                          /* [] */0
                        ])
                    ]);
        
      }
    }
  };
  return {
          State: State,
          Task__Types: Task__Types,
          StructError: StructError,
          StructError2: StructError2,
          handle: handle$2
        };
}

exports.Impl = Impl;
/* GCL-Guacamole Not a pure module */

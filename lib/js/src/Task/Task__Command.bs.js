// Generated by BUCKLESCRIPT, PLEASE EDIT WITH CARE
'use strict';

var $$Promise = require("reason-promise/lib/js/src/js/promise.js");
var Belt_Option = require("bs-platform/lib/js/belt_Option.js");
var GCL$Guacamole = require("../GCL.bs.js");
var State$Guacamole = require("../State.bs.js");
var Caml_chrome_debugger = require("bs-platform/lib/js/caml_chrome_debugger.js");

function dispatch(param) {
  switch (param) {
    case /* Load */0 :
        return /* :: */Caml_chrome_debugger.simpleVariant("::", [
                  /* Connect */0,
                  /* [] */0
                ]);
    case /* Quit */1 :
        return /* [] */0;
    case /* Reload */2 :
        return /* :: */Caml_chrome_debugger.simpleVariant("::", [
                  /* WithState */Caml_chrome_debugger.variant("WithState", 0, [(function (state) {
                          var doc = state.editor.document;
                          var fileName = doc.fileName;
                          return $$Promise.map(doc.save(), (function (saveSucceed) {
                                        if (!(saveSucceed && fileName !== "")) {
                                          return /* :: */Caml_chrome_debugger.simpleVariant("::", [
                                                    /* Display */Caml_chrome_debugger.variant("Display", 3, [
                                                        /* Error */Caml_chrome_debugger.variant("Error", 1, ["Cannot read filepath"]),
                                                        /* Plain */Caml_chrome_debugger.variant("Plain", 1, ["Please save the file first"])
                                                      ]),
                                                    /* [] */0
                                                  ]);
                                        }
                                        var match = state.mode;
                                        if (match) {
                                          return /* :: */Caml_chrome_debugger.simpleVariant("::", [
                                                    /* RemoveDecorations */1,
                                                    /* :: */Caml_chrome_debugger.simpleVariant("::", [
                                                        /* SendRequest */Caml_chrome_debugger.variant("SendRequest", 2, [/* Load */Caml_chrome_debugger.variant("Load", 0, [
                                                                fileName,
                                                                /* WP2 */1
                                                              ])]),
                                                        /* [] */0
                                                      ])
                                                  ]);
                                        } else {
                                          return /* :: */Caml_chrome_debugger.simpleVariant("::", [
                                                    /* RemoveDecorations */1,
                                                    /* :: */Caml_chrome_debugger.simpleVariant("::", [
                                                        /* SendRequest */Caml_chrome_debugger.variant("SendRequest", 2, [/* Load */Caml_chrome_debugger.variant("Load", 0, [
                                                                fileName,
                                                                /* WP1 */0
                                                              ])]),
                                                        /* [] */0
                                                      ])
                                                  ]);
                                        }
                                      }));
                        })]),
                  /* [] */0
                ]);
    case /* Refine */3 :
        return /* :: */Caml_chrome_debugger.simpleVariant("::", [
                  /* DispatchCommand */Caml_chrome_debugger.variant("DispatchCommand", 1, [/* Reload */2]),
                  /* :: */Caml_chrome_debugger.simpleVariant("::", [
                      /* WithState */Caml_chrome_debugger.variant("WithState", 0, [(function (state) {
                              return Belt_Option.mapWithDefault(State$Guacamole.Spec.fromCursorPosition(state), $$Promise.resolved(/* [] */0), (function (spec) {
                                            var doc = state.editor.document;
                                            var payload = State$Guacamole.Spec.getPayload(doc, spec);
                                            return $$Promise.resolved(/* :: */Caml_chrome_debugger.simpleVariant("::", [
                                                          /* SendRequest */Caml_chrome_debugger.variant("SendRequest", 2, [/* Refine */Caml_chrome_debugger.variant("Refine", 1, [
                                                                  spec.id,
                                                                  payload
                                                                ])]),
                                                          /* [] */0
                                                        ]));
                                          }));
                            })]),
                      /* [] */0
                    ])
                ]);
    case /* InsertAssertion */4 :
        return /* :: */Caml_chrome_debugger.simpleVariant("::", [
                  /* DispatchCommand */Caml_chrome_debugger.variant("DispatchCommand", 1, [/* Reload */2]),
                  /* :: */Caml_chrome_debugger.simpleVariant("::", [
                      /* WithState */Caml_chrome_debugger.variant("WithState", 0, [(function (state) {
                              var cursor = state.editor.selection.end;
                              var match = GCL$Guacamole.Pos.fromPoint(cursor, "whatever");
                              return $$Promise.resolved(/* :: */Caml_chrome_debugger.simpleVariant("::", [
                                            /* SendRequest */Caml_chrome_debugger.variant("SendRequest", 2, [/* InsertAssertion */Caml_chrome_debugger.variant("InsertAssertion", 2, [match[1]])]),
                                            /* [] */0
                                          ]));
                            })]),
                      /* [] */0
                    ])
                ]);
    case /* Debug */5 :
        return /* :: */Caml_chrome_debugger.simpleVariant("::", [
                  /* SendRequest */Caml_chrome_debugger.variant("SendRequest", 2, [/* Debug */0]),
                  /* [] */0
                ]);
    
  }
}

exports.dispatch = dispatch;
/* Promise Not a pure module */

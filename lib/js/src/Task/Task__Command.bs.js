// Generated by ReScript, PLEASE EDIT WITH CARE
'use strict';

var $$Promise = require("reason-promise/lib/js/src/js/promise.bs.js");
var Belt_Option = require("bs-platform/lib/js/belt_Option.js");
var GCL$Guacamole = require("../GCL.bs.js");
var State$Guacamole = require("../State.bs.js");

function dispatch(param) {
  switch (param) {
    case /* Load */0 :
        return {
                hd: /* Connect */0,
                tl: /* [] */0
              };
    case /* Quit */1 :
        return /* [] */0;
    case /* Reload */2 :
        return {
                hd: {
                  TAG: 0,
                  _0: (function (state) {
                      var doc = state.editor.document;
                      var fileName = doc.fileName;
                      return $$Promise.map(doc.save(), (function (saveSucceed) {
                                    if (!(saveSucceed && fileName !== "")) {
                                      return {
                                              hd: {
                                                TAG: 3,
                                                _0: {
                                                  TAG: 1,
                                                  _0: "Cannot read filepath",
                                                  [Symbol.for("name")]: "Error"
                                                },
                                                _1: {
                                                  TAG: 1,
                                                  _0: "Please save the file first",
                                                  [Symbol.for("name")]: "Plain"
                                                },
                                                [Symbol.for("name")]: "Display"
                                              },
                                              tl: /* [] */0
                                            };
                                    }
                                    var match = state.mode;
                                    if (match) {
                                      return {
                                              hd: /* RemoveDecorations */1,
                                              tl: {
                                                hd: {
                                                  TAG: 2,
                                                  _0: {
                                                    TAG: 0,
                                                    _0: fileName,
                                                    _1: /* WP2 */1,
                                                    [Symbol.for("name")]: "Load"
                                                  },
                                                  [Symbol.for("name")]: "SendRequest"
                                                },
                                                tl: /* [] */0
                                              }
                                            };
                                    } else {
                                      return {
                                              hd: /* RemoveDecorations */1,
                                              tl: {
                                                hd: {
                                                  TAG: 2,
                                                  _0: {
                                                    TAG: 0,
                                                    _0: fileName,
                                                    _1: /* WP1 */0,
                                                    [Symbol.for("name")]: "Load"
                                                  },
                                                  [Symbol.for("name")]: "SendRequest"
                                                },
                                                tl: /* [] */0
                                              }
                                            };
                                    }
                                  }));
                    }),
                  [Symbol.for("name")]: "WithState"
                },
                tl: /* [] */0
              };
    case /* Refine */3 :
        return {
                hd: {
                  TAG: 1,
                  _0: /* Reload */2,
                  [Symbol.for("name")]: "DispatchCommand"
                },
                tl: {
                  hd: {
                    TAG: 0,
                    _0: (function (state) {
                        return Belt_Option.mapWithDefault(State$Guacamole.Spec.fromCursorPosition(state), $$Promise.resolved(/* [] */0), (function (spec) {
                                      var doc = state.editor.document;
                                      var payload = State$Guacamole.Spec.getPayload(doc, spec);
                                      return $$Promise.resolved({
                                                  hd: {
                                                    TAG: 2,
                                                    _0: {
                                                      TAG: 1,
                                                      _0: spec.id,
                                                      _1: payload,
                                                      [Symbol.for("name")]: "Refine"
                                                    },
                                                    [Symbol.for("name")]: "SendRequest"
                                                  },
                                                  tl: /* [] */0
                                                });
                                    }));
                      }),
                    [Symbol.for("name")]: "WithState"
                  },
                  tl: /* [] */0
                }
              };
    case /* InsertAssertion */4 :
        return {
                hd: {
                  TAG: 1,
                  _0: /* Reload */2,
                  [Symbol.for("name")]: "DispatchCommand"
                },
                tl: {
                  hd: {
                    TAG: 0,
                    _0: (function (state) {
                        var cursor = state.editor.selection.end;
                        var match = GCL$Guacamole.Pos.fromPoint(cursor, "whatever");
                        return $$Promise.resolved({
                                    hd: {
                                      TAG: 2,
                                      _0: {
                                        TAG: 2,
                                        _0: match._1,
                                        [Symbol.for("name")]: "InsertAssertion"
                                      },
                                      [Symbol.for("name")]: "SendRequest"
                                    },
                                    tl: /* [] */0
                                  });
                      }),
                    [Symbol.for("name")]: "WithState"
                  },
                  tl: /* [] */0
                }
              };
    case /* Debug */5 :
        return {
                hd: {
                  TAG: 2,
                  _0: /* Debug */0,
                  [Symbol.for("name")]: "SendRequest"
                },
                tl: /* [] */0
              };
    
  }
}

exports.dispatch = dispatch;
/* Promise Not a pure module */

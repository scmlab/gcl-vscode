// Generated by BUCKLESCRIPT, PLEASE EDIT WITH CARE
'use strict';

var Curry = require("bs-platform/lib/js/curry.js");
var $$String = require("bs-platform/lib/js/string.js");
var $$Promise = require("reason-promise/lib/js/src/js/promise.js");
var Belt_List = require("bs-platform/lib/js/belt_List.js");
var Belt_Array = require("bs-platform/lib/js/belt_Array.js");
var GCL$Guacamole = require("../GCL.bs.js");
var Sig$Guacamole = require("../Sig.bs.js");
var Task$Guacamole = require("./Task.bs.js");
var Event$Guacamole = require("../Util/Event.bs.js");
var State$Guacamole = require("../State.bs.js");
var Response$Guacamole = require("../Response.bs.js");
var Caml_chrome_debugger = require("bs-platform/lib/js/caml_chrome_debugger.js");
var Task__Command$Guacamole = require("./Task__Command.bs.js");
var Task__Response$Guacamole = require("./Task__Response.bs.js");

function Impl(Editor) {
  var TaskCommand = Task__Command$Guacamole.Impl(Editor);
  var TaskResponse = Task__Response$Guacamole.Impl(Editor);
  var Task = Task$Guacamole.Impl(Editor);
  var State = State$Guacamole.Impl(Editor);
  var runTask = function (task, state) {
    if (typeof task === "number") {
      if (task === /* Connect */0) {
        return $$Promise.map(Curry._1(State.connect, state), (function (param) {
                      if (param.tag) {
                        var match = Sig$Guacamole.$$Error.toString(param[0]);
                        return /* :: */Caml_chrome_debugger.simpleVariant("::", [
                                  /* Display */Caml_chrome_debugger.variant("Display", 6, [
                                      /* Error */Caml_chrome_debugger.variant("Error", 1, [match[0]]),
                                      /* Plain */Caml_chrome_debugger.variant("Plain", 1, [match[1]])
                                    ]),
                                  /* [] */0
                                ]);
                      } else {
                        return Curry._1(TaskCommand.dispatch, /* Reload */2);
                      }
                    }));
      } else {
        Belt_Array.forEach(state.decorations, Editor.Decoration.destroy);
        return $$Promise.resolved(/* [] */0);
      }
    } else {
      switch (task.tag | 0) {
        case /* WithState */0 :
            return Curry._1(task[0], state);
        case /* MarkError */1 :
            var range = Curry._3(Response$Guacamole.$$Error.Site.toRange, task[0], state.specifications, Editor.$$Range.fromLoc);
            var decorations = Curry._3(Editor.Decoration.highlightBackground, state.editor, /* Error */0, range);
            state.decorations = state.decorations.concat(decorations);
            return $$Promise.resolved(/* [] */0);
        case /* MarkSpec */2 :
            var spec = task[0];
            var range$1 = Curry._1(Editor.$$Range.fromLoc, spec.loc);
            var startPoint = Curry._1(Editor.$$Range.start, range$1);
            var endPoint = Curry._1(Editor.$$Range.end_, range$1);
            var startRange = Curry._2(Editor.$$Range.make, startPoint, Curry._3(Editor.Point.translate, startPoint, 0, 2));
            var endRange = Curry._2(Editor.$$Range.make, Curry._3(Editor.Point.translate, endPoint, 0, -2), endPoint);
            var trim = function (s) {
              if (s.length > 77) {
                return $$String.sub(s, 0, 73) + " ...";
              } else {
                return s;
              }
            };
            var preCondText = " " + trim(Curry._1(GCL$Guacamole.Syntax.Pred.toString, spec.pre));
            var postCondText = " " + trim(Curry._1(GCL$Guacamole.Syntax.Pred.toString, spec.post));
            var isQQ = preCondText === postCondText;
            var decorations$1 = Belt_Array.concatMany([
                  Curry._4(Editor.Decoration.overlayText, state.editor, /* Spec */2, isQQ ? "" : preCondText, startRange),
                  Curry._4(Editor.Decoration.overlayText, state.editor, /* Spec */2, isQQ ? "" : postCondText, endRange),
                  Curry._3(Editor.Decoration.highlightBackground, state.editor, /* Spec */2, startRange),
                  Curry._3(Editor.Decoration.highlightBackground, state.editor, /* Spec */2, endRange)
                ]);
            state.decorations = state.decorations.concat(decorations$1);
            return $$Promise.resolved(/* [] */0);
        case /* DigHole */3 :
            var range$2 = Curry._3(Response$Guacamole.$$Error.Site.toRange, task[0], state.specifications, Editor.$$Range.fromLoc);
            Curry._2(Editor.Decoration.digHole, state.editor, range$2);
            return $$Promise.resolved(/* [] */0);
        case /* DispatchCommand */4 :
            var command = task[0];
            console.log("[ dispatch command ]", command);
            return $$Promise.resolved(Curry._1(TaskCommand.dispatch, command));
        case /* SendRequest */5 :
            console.log("[ send request ]");
            return $$Promise.map(Curry._2(State.sendRequest, state, task[0]), (function (param) {
                          if (param.tag) {
                            var match = Sig$Guacamole.$$Error.toString(param[0]);
                            return /* :: */Caml_chrome_debugger.simpleVariant("::", [
                                      /* Display */Caml_chrome_debugger.variant("Display", 6, [
                                          /* Error */Caml_chrome_debugger.variant("Error", 1, [match[0]]),
                                          /* Plain */Caml_chrome_debugger.variant("Plain", 1, [match[1]])
                                        ]),
                                      /* [] */0
                                    ]);
                          } else {
                            return Curry._1(TaskResponse.handle, param[0]);
                          }
                        }));
        case /* Display */6 :
            return $$Promise.map(Curry._3(State.display, state, task[0], task[1]), (function (param) {
                          return /* [] */0;
                        }));
        
      }
    }
  };
  var addTask = function (emitter, task) {
    return Curry._1(emitter.emit, task);
  };
  var make = function (state) {
    var queue = [];
    var emitter = Event$Guacamole.make(/* () */0);
    var busy = {
      contents: false
    };
    var runTasksInQueue = function (param) {
      var nextTask = queue.shift();
      if (nextTask !== undefined) {
        return $$Promise.get(runTask(nextTask, state), (function (newTasks) {
                      Belt_List.forEach(newTasks, (function (param) {
                              return Curry._1(emitter.emit, param);
                            }));
                      return runTasksInQueue(/* () */0);
                    }));
      } else {
        return /* () */0;
      }
    };
    Curry._1(emitter.on, (function (task) {
            queue.push(task);
            if (busy.contents) {
              return 0;
            } else {
              return runTasksInQueue(/* () */0);
            }
          }));
    return emitter;
  };
  var destroy = function (emitter) {
    return Curry._1(emitter.destroy, /* () */0);
  };
  return {
          TaskCommand: TaskCommand,
          TaskResponse: TaskResponse,
          Task: Task,
          State: State,
          runTask: runTask,
          addTask: addTask,
          make: make,
          destroy: destroy
        };
}

exports.Impl = Impl;
/* Promise Not a pure module */

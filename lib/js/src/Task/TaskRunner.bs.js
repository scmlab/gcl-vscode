// Generated by BUCKLESCRIPT, PLEASE EDIT WITH CARE
'use strict';

var Curry = require("bs-platform/lib/js/curry.js");
var $$Promise = require("reason-promise/lib/js/src/js/promise.js");
var P$Guacamole = require("../Util/P.bs.js");
var Sig$Guacamole = require("../Implementation/Sig.bs.js");
var Caml_chrome_debugger = require("bs-platform/lib/js/caml_chrome_debugger.js");
var Task__Types$Guacamole = require("./Task__Types.bs.js");
var Task__Command$Guacamole = require("./Task__Command.bs.js");
var Task__Response$Guacamole = require("./Task__Response.bs.js");

function Impl(Editor, State) {
  var partial_arg = Task__Command$Guacamole.Impl;
  var TaskCommand = (function (param) {
        return partial_arg(Editor, param);
      })(State);
  var partial_arg$1 = Task__Response$Guacamole.Impl;
  var TaskResponse = (function (param) {
        return partial_arg$1(Editor, param);
      })(State);
  var partial_arg$2 = Task__Types$Guacamole.Impl;
  var Task = (function (param) {
        return partial_arg$2(Editor, param);
      })(State);
  var State$1 = Curry._1(State, Editor);
  var run = function (state, tasks) {
    var runTask = function (task) {
      switch (task.tag | 0) {
        case /* WithState */0 :
            return $$Promise.flatMap(Curry._1(task[0], state), (function (param) {
                          return run(state, param);
                        }));
        case /* SetSpecifications */1 :
            Curry._2(State$1.setSpecifications, state, task[0]);
            return $$Promise.resolved(/* () */0);
        case /* AddDecorations */2 :
            return $$Promise.resolved(/* () */0);
        case /* DispatchCommand */3 :
            var command = task[0];
            console.log("[ dispatch command ]", command);
            return run(state, Curry._1(TaskCommand.dispatch, command));
        case /* SendRequest */4 :
            console.log("[ send request ]");
            return $$Promise.flatMap(Curry._2(State$1.sendRequest, state, task[0]), (function (param) {
                          if (param.tag) {
                            var match = Sig$Guacamole.$$Error.toString(param[0]);
                            return run(state, /* :: */Caml_chrome_debugger.simpleVariant("::", [
                                          /* Display */Caml_chrome_debugger.variant("Display", 5, [
                                              /* Error */Caml_chrome_debugger.variant("Error", 1, [match[0]]),
                                              /* Plain */Caml_chrome_debugger.variant("Plain", 1, [match[1]])
                                            ]),
                                          /* [] */0
                                        ]));
                          } else {
                            return run(state, Curry._1(TaskResponse.handle, param[0]));
                          }
                        }));
        case /* Display */5 :
            return $$Promise.map(Curry._3(State$1.display, state, task[0], task[1]), (function (param) {
                          return /* () */0;
                        }));
        
      }
    };
    var runEach = function (param) {
      if (param) {
        var xs = param[1];
        return P$Guacamole.let_(runTask(param[0]), (function (param) {
                      return P$Guacamole.let_(runEach(xs), (function (param) {
                                    return $$Promise.resolved(/* () */0);
                                  }));
                    }));
      } else {
        return $$Promise.resolved(/* () */0);
      }
    };
    return runEach(tasks);
  };
  return {
          TaskCommand: TaskCommand,
          TaskResponse: TaskResponse,
          Task: Task,
          State: State$1,
          run: run
        };
}

exports.Impl = Impl;
/* Promise Not a pure module */

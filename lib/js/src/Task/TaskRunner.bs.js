// Generated by BUCKLESCRIPT, PLEASE EDIT WITH CARE
'use strict';

var Curry = require("bs-platform/lib/js/curry.js");
var $$Promise = require("reason-promise/lib/js/src/js/promise.js");
var Belt_Array = require("bs-platform/lib/js/belt_Array.js");
var P$Guacamole = require("../Util/P.bs.js");
var GCL$Guacamole = require("../GCL.bs.js");
var Sig$Guacamole = require("../Implementation/Sig.bs.js");
var Caml_chrome_debugger = require("bs-platform/lib/js/caml_chrome_debugger.js");
var Impl__State$Guacamole = require("../Implementation/Impl__State.bs.js");
var Task__Types$Guacamole = require("./Task__Types.bs.js");
var Task__Command$Guacamole = require("./Task__Command.bs.js");
var Task__Response$Guacamole = require("./Task__Response.bs.js");

function Impl(Editor) {
  var TaskCommand = Task__Command$Guacamole.Impl(Editor);
  var TaskResponse = Task__Response$Guacamole.Impl(Editor);
  var Task = Task__Types$Guacamole.Impl(Editor);
  var State = Impl__State$Guacamole.Impl(Editor);
  var run = function (state, tasks) {
    var runTask = function (task) {
      if (typeof task === "number") {
        Belt_Array.forEach(state.decorations, Editor.Decoration.destroy);
        return $$Promise.resolved(/* () */0);
      } else {
        switch (task.tag | 0) {
          case /* WithState */0 :
              return $$Promise.flatMap(Curry._1(task[0], state), (function (param) {
                            return run(state, param);
                          }));
          case /* MarkError */1 :
              var range = Curry._3(GCL$Guacamole.$$Response.$$Error.Site.toRange, task[0], state.specifications, Editor.$$Range.fromLoc);
              var decorations = Curry._3(Editor.Decoration.markBackground, state.editor, /* Error */0, range);
              state.decorations = state.decorations.concat(decorations);
              return $$Promise.resolved(/* () */0);
          case /* MarkSpec */2 :
              return $$Promise.resolved(/* () */0);
          case /* DigHole */3 :
              var range$1 = Curry._3(GCL$Guacamole.$$Response.$$Error.Site.toRange, task[0], state.specifications, Editor.$$Range.fromLoc);
              Curry._2(Editor.Decoration.digHole, state.editor, range$1);
              return $$Promise.resolved(/* () */0);
          case /* DispatchCommand */4 :
              var command = task[0];
              console.log("[ dispatch command ]", command);
              return run(state, Curry._1(TaskCommand.dispatch, command));
          case /* SendRequest */5 :
              console.log("[ send request ]");
              return $$Promise.flatMap(Curry._2(State.sendRequest, state, task[0]), (function (param) {
                            if (param.tag) {
                              var match = Sig$Guacamole.$$Error.toString(param[0]);
                              return run(state, /* :: */Caml_chrome_debugger.simpleVariant("::", [
                                            /* Display */Caml_chrome_debugger.variant("Display", 6, [
                                                /* Error */Caml_chrome_debugger.variant("Error", 1, [match[0]]),
                                                /* Plain */Caml_chrome_debugger.variant("Plain", 1, [match[1]])
                                              ]),
                                            /* [] */0
                                          ]));
                            } else {
                              return run(state, Curry._1(TaskResponse.handle, param[0]));
                            }
                          }));
          case /* Display */6 :
              return $$Promise.map(Curry._3(State.display, state, task[0], task[1]), (function (param) {
                            return /* () */0;
                          }));
          
        }
      }
    };
    var runEach = function (param) {
      if (param) {
        var xs = param[1];
        return P$Guacamole.let_(runTask(param[0]), (function (param) {
                      return P$Guacamole.let_(runEach(xs), (function (param) {
                                    return $$Promise.resolved(/* () */0);
                                  }));
                    }));
      } else {
        return $$Promise.resolved(/* () */0);
      }
    };
    return runEach(tasks);
  };
  return {
          TaskCommand: TaskCommand,
          TaskResponse: TaskResponse,
          Task: Task,
          State: State,
          run: run
        };
}

exports.Impl = Impl;
/* Promise Not a pure module */

// Generated by BUCKLESCRIPT, PLEASE EDIT WITH CARE
'use strict';

var Js_list = require("bs-platform/lib/js/js_list.js");
var $$Promise = require("reason-promise/lib/js/src/js/promise.js");
var Belt_List = require("bs-platform/lib/js/belt_List.js");
var Belt_Array = require("bs-platform/lib/js/belt_Array.js");
var State$Guacamole = require("../State.bs.js");
var Caml_chrome_debugger = require("bs-platform/lib/js/caml_chrome_debugger.js");
var Task__Error$Guacamole = require("./Task__Error.bs.js");

function handle(response) {
  switch (response.tag | 0) {
    case /* Error */0 :
        return Js_list.flatten(Belt_List.fromArray(Belt_Array.map(response[0], Task__Error$Guacamole.handle)));
    case /* OK */1 :
        var specifications = response[2];
        return Belt_List.concat(Belt_List.map(Belt_List.fromArray(specifications), (function (spec) {
                          return /* MarkSpec */Caml_chrome_debugger.variant("MarkSpec", 7, [spec]);
                        })), /* :: */Caml_chrome_debugger.simpleVariant("::", [
                      /* WithState */Caml_chrome_debugger.variant("WithState", 0, [(function (state) {
                              state.specifications = specifications;
                              return $$Promise.resolved(/* [] */0);
                            })]),
                      /* :: */Caml_chrome_debugger.simpleVariant("::", [
                          /* Display */Caml_chrome_debugger.variant("Display", 3, [
                              /* Plain */Caml_chrome_debugger.variant("Plain", 0, ["Proof Obligations"]),
                              /* ProofObligations */Caml_chrome_debugger.variant("ProofObligations", 0, [
                                  response[0],
                                  response[1],
                                  response[3]
                                ])
                            ]),
                          /* [] */0
                        ])
                    ]));
    case /* Resolve */2 :
        var i = response[0];
        return /* :: */Caml_chrome_debugger.simpleVariant("::", [
                  /* WithState */Caml_chrome_debugger.variant("WithState", 0, [(function (state) {
                          return $$Promise.map(State$Guacamole.Spec.resolve(state, i), (function (param) {
                                        return /* [] */0;
                                      }));
                        })]),
                  /* :: */Caml_chrome_debugger.simpleVariant("::", [
                      /* DispatchCommand */Caml_chrome_debugger.variant("DispatchCommand", 1, [/* Reload */2]),
                      /* [] */0
                    ])
                ]);
    case /* Substitute */3 :
        return /* :: */Caml_chrome_debugger.simpleVariant("::", [
                  /* ViewRequest */Caml_chrome_debugger.variant("ViewRequest", 4, [/* Substitute */Caml_chrome_debugger.variant("Substitute", 0, [
                          response[0],
                          response[1]
                        ])]),
                  /* [] */0
                ]);
    case /* InsertAssertion */4 :
        var expr = response[1];
        var i$1 = response[0];
        return /* :: */Caml_chrome_debugger.simpleVariant("::", [
                  /* WithState */Caml_chrome_debugger.variant("WithState", 0, [(function (state) {
                          return $$Promise.map(State$Guacamole.Spec.insert(state, i$1, expr), (function (param) {
                                        return /* [] */0;
                                      }));
                        })]),
                  /* :: */Caml_chrome_debugger.simpleVariant("::", [
                      /* DispatchCommand */Caml_chrome_debugger.variant("DispatchCommand", 1, [/* Reload */2]),
                      /* [] */0
                    ])
                ]);
    case /* UnknownResponse */5 :
        return /* :: */Caml_chrome_debugger.simpleVariant("::", [
                  /* Display */Caml_chrome_debugger.variant("Display", 3, [
                      /* Error */Caml_chrome_debugger.variant("Error", 1, ["Panic: unknown response from GCL"]),
                      /* Plain */Caml_chrome_debugger.variant("Plain", 1, [JSON.stringify(response[0])])
                    ]),
                  /* [] */0
                ]);
    
  }
}

exports.handle = handle;
/* Promise Not a pure module */

// Generated by ReScript, PLEASE EDIT WITH CARE
'use strict';

var Js_list = require("bs-platform/lib/js/js_list.js");
var $$Promise = require("reason-promise/lib/js/src/js/promise.bs.js");
var Belt_List = require("bs-platform/lib/js/belt_List.js");
var Belt_Array = require("bs-platform/lib/js/belt_Array.js");
var State$Guacamole = require("../State.bs.js");
var Task__Error$Guacamole = require("./Task__Error.bs.js");

function handle(response) {
  switch (response.TAG | 0) {
    case /* Error */0 :
        return Js_list.flatten(Belt_List.fromArray(Belt_Array.map(response._0, Task__Error$Guacamole.handle)));
    case /* OK */1 :
        var specifications = response._2;
        return Belt_List.concat(Belt_List.map(Belt_List.fromArray(specifications), (function (spec) {
                          return {
                                  TAG: 7,
                                  _0: spec,
                                  [Symbol.for("name")]: "MarkSpec"
                                };
                        })), {
                    hd: {
                      TAG: 0,
                      _0: (function (state) {
                          state.specifications = specifications;
                          return $$Promise.resolved(/* [] */0);
                        }),
                      [Symbol.for("name")]: "WithState"
                    },
                    tl: {
                      hd: {
                        TAG: 3,
                        _0: {
                          TAG: 0,
                          _0: "Proof Obligations",
                          [Symbol.for("name")]: "Plain"
                        },
                        _1: {
                          TAG: 0,
                          _0: response._0,
                          _1: response._1,
                          _2: response._3,
                          [Symbol.for("name")]: "ProofObligations"
                        },
                        [Symbol.for("name")]: "Display"
                      },
                      tl: /* [] */0
                    }
                  });
    case /* Resolve */2 :
        var i = response._0;
        return {
                hd: {
                  TAG: 0,
                  _0: (function (state) {
                      return $$Promise.map(State$Guacamole.Spec.resolve(state, i), (function (param) {
                                    return /* [] */0;
                                  }));
                    }),
                  [Symbol.for("name")]: "WithState"
                },
                tl: {
                  hd: {
                    TAG: 1,
                    _0: /* Reload */2,
                    [Symbol.for("name")]: "DispatchCommand"
                  },
                  tl: /* [] */0
                }
              };
    case /* Substitute */3 :
        return {
                hd: {
                  TAG: 4,
                  _0: {
                    TAG: 0,
                    _0: response._0,
                    _1: response._1,
                    [Symbol.for("name")]: "Substitute"
                  },
                  [Symbol.for("name")]: "ViewRequest"
                },
                tl: /* [] */0
              };
    case /* InsertAssertion */4 :
        var expr = response._1;
        var i$1 = response._0;
        return {
                hd: {
                  TAG: 0,
                  _0: (function (state) {
                      return $$Promise.map(State$Guacamole.Spec.insert(state, i$1, expr), (function (param) {
                                    return /* [] */0;
                                  }));
                    }),
                  [Symbol.for("name")]: "WithState"
                },
                tl: {
                  hd: {
                    TAG: 1,
                    _0: /* Reload */2,
                    [Symbol.for("name")]: "DispatchCommand"
                  },
                  tl: /* [] */0
                }
              };
    case /* UnknownResponse */5 :
        return {
                hd: {
                  TAG: 3,
                  _0: {
                    TAG: 1,
                    _0: "Panic: unknown response from GCL",
                    [Symbol.for("name")]: "Error"
                  },
                  _1: {
                    TAG: 1,
                    _0: JSON.stringify(response._0),
                    [Symbol.for("name")]: "Plain"
                  },
                  [Symbol.for("name")]: "Display"
                },
                tl: /* [] */0
              };
    
  }
}

exports.handle = handle;
/* Promise Not a pure module */

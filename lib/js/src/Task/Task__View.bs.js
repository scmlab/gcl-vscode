// Generated by BUCKLESCRIPT, PLEASE EDIT WITH CARE
'use strict';

var Curry = require("bs-platform/lib/js/curry.js");
var Js_dict = require("bs-platform/lib/js/js_dict.js");
var $$Promise = require("reason-promise/lib/js/src/js/promise.js");
var Belt_Array = require("bs-platform/lib/js/belt_Array.js");
var Belt_Option = require("bs-platform/lib/js/belt_Option.js");
var GCL$Guacamole = require("../GCL.bs.js");
var Task$Guacamole = require("./Task.bs.js");
var State$Guacamole = require("../State.bs.js");
var Caml_chrome_debugger = require("bs-platform/lib/js/caml_chrome_debugger.js");
var Task__Error$Guacamole = require("./Task__Error.bs.js");

function Impl(Editor) {
  var State = State$Guacamole.Impl(Editor);
  var Task = Task$Guacamole.Impl(Editor);
  var Task__Error = Task__Error$Guacamole.Impl(Editor);
  var decorationDict = { };
  var delete_ = (function (id) {delete decorationDict[id]});
  var handle = function (editor, response) {
    if (typeof response === "number") {
      if (response === /* Initialized */0) {
        return /* [] */0;
      } else {
        return /* :: */Caml_chrome_debugger.simpleVariant("::", [
                  /* WithState */Caml_chrome_debugger.variant("WithState", 0, [(function (state) {
                          Curry._1(State.destroy, state);
                          return $$Promise.resolved(/* [] */0);
                        })]),
                  /* [] */0
                ]);
      }
    } else {
      switch (response.tag | 0) {
        case /* SetMode */0 :
            var mode = response[0];
            return /* :: */Caml_chrome_debugger.simpleVariant("::", [
                      /* WithState */Caml_chrome_debugger.variant("WithState", 0, [(function (state) {
                              state.mode = mode;
                              return $$Promise.resolved(/* [] */0);
                            })]),
                      /* [] */0
                    ]);
        case /* Link */1 :
            var match = response[0];
            switch (match.tag | 0) {
              case /* MouseOver */0 :
                  var loc = match[0];
                  var key = GCL$Guacamole.Loc.toString(loc);
                  var range = Curry._1(Editor.$$Range.fromLoc, loc);
                  var decoration = Curry._3(Editor.Decoration.highlightBackground, editor, /* Highlight */1, range);
                  decorationDict[key] = decoration;
                  return /* [] */0;
              case /* MouseOut */1 :
                  var key$1 = GCL$Guacamole.Loc.toString(match[0]);
                  Belt_Option.forEach(Js_dict.get(decorationDict, key$1), (function (decos) {
                          return Belt_Array.forEach(decos, Editor.Decoration.destroy);
                        }));
                  delete_(key$1);
                  return /* [] */0;
              case /* MouseClick */2 :
                  var range$1 = Curry._1(Editor.$$Range.fromLoc, match[0]);
                  Curry._2(Editor.selectText, editor, range$1);
                  return /* [] */0;
              
            }
        case /* Substitute */2 :
            return /* :: */Caml_chrome_debugger.simpleVariant("::", [
                      /* SendRequest */Caml_chrome_debugger.variant("SendRequest", 2, [/* Substitute */Caml_chrome_debugger.variant("Substitute", 3, [
                              response[0],
                              response[1],
                              response[2]
                            ])]),
                      /* [] */0
                    ]);
        
      }
    }
  };
  return {
          State: State,
          Task: Task,
          Task__Error: Task__Error,
          decorationDict: decorationDict,
          delete_: delete_,
          handle: handle
        };
}

exports.Impl = Impl;
/* Promise Not a pure module */

// Generated by ReScript, PLEASE EDIT WITH CARE
'use strict';

var Curry = require("rescript/lib/js/curry.js");
var React = require("react");
var Belt_Option = require("rescript/lib/js/belt_Option.js");

var context = React.createContext(undefined);

function makeProps(value, children, param) {
  return {
          value: value,
          children: children
        };
}

var make = context.Provider;

var Provider = {
  makeProps: makeProps,
  make: make
};

function Substitution(Props) {
  var makeInline = Props.makeInline;
  var id = Props.id;
  var mapping = Props.mapping;
  var before = Props.before;
  var after = Props.after;
  var onSubst = Props.onSubst;
  var match = React.useState(function () {
        return false;
      });
  var setSubstitute = match[1];
  var match$1 = React.useState(function () {
        return false;
      });
  var setHoverSubstitutee = match$1[1];
  var undo = function (param) {
    return Curry._1(setSubstitute, (function (param) {
                  return false;
                }));
  };
  var chan = React.useContext(context);
  var onClick = function (ev) {
    Belt_Option.forEach(chan, (function (callback) {
            return Curry._1(callback, id);
          }));
    Curry._1(setHoverSubstitutee, (function (param) {
            return false;
          }));
    Belt_Option.forEach(onSubst, (function (onSubst) {
            return Curry._1(onSubst, {
                        id: id,
                        before: before,
                        mapping: mapping,
                        after: after,
                        undo: undo
                      });
          }));
    Curry._1(setSubstitute, (function (param) {
            return true;
          }));
    ev.stopPropagation();
    
  };
  var onMouseOver = function (ev) {
    Curry._1(setHoverSubstitutee, (function (param) {
            return true;
          }));
    ev.stopPropagation();
    
  };
  var onMouseOut = function (ev) {
    Curry._1(setHoverSubstitutee, (function (param) {
            return false;
          }));
    ev.stopPropagation();
    
  };
  if (match[0]) {
    var after$1 = Curry._2(makeInline, /* Element */{
          _0: after
        }, onSubst);
    return React.createElement("span", {
                className: "element-sbst"
              }, after$1);
  }
  var before$1 = Curry._2(makeInline, /* Element */{
        _0: before
      }, onSubst);
  var className = match$1[0] ? "element-sbst element-sbst-hovered" : "element-sbst";
  return React.createElement("span", {
              className: className,
              onClick: onClick,
              onMouseOut: onMouseOut,
              onMouseOver: onMouseOver
            }, before$1);
}

var make$1 = Substitution;

exports.context = context;
exports.Provider = Provider;
exports.make = make$1;
/* context Not a pure module */

// Generated by ReScript, PLEASE EDIT WITH CARE
'use strict';

var Curry = require("rescript/lib/js/curry.js");
var React = require("react");
var $$String = require("rescript/lib/js/string.js");
var Belt_List = require("rescript/lib/js/belt_List.js");
var Belt_Array = require("rescript/lib/js/belt_Array.js");
var Belt_Option = require("rescript/lib/js/belt_Option.js");
var Link$Guabao = require("../../Link.bs.js");

function Element__Inlines__View$Parens(Props) {
  var children = Props.children;
  var match = React.useState(function () {
        return false;
      });
  var setActivated = match[1];
  var match$1 = React.useState(function () {
        return false;
      });
  var setContracted = match$1[1];
  var className = match[0] ? "element-parentheses activated" : "element-parentheses";
  var onMouseOver = function (param) {
    return Curry._1(setActivated, (function (param) {
                  return true;
                }));
  };
  var onMouseOut = function (param) {
    return Curry._1(setActivated, (function (param) {
                  return false;
                }));
  };
  var onClick = function (param) {
    return Curry._1(setContracted, (function (x) {
                  return !x;
                }));
  };
  return React.createElement(React.Fragment, undefined, React.createElement("span", {
                  className: className,
                  onClick: onClick,
                  onMouseOut: onMouseOut,
                  onMouseOver: onMouseOver
                }, "("), match$1[0] ? ".." : children, React.createElement("span", {
                  className: className,
                  onClick: onClick,
                  onMouseOut: onMouseOut,
                  onMouseOver: onMouseOver
                }, ")"));
}

var Parens = {
  make: Element__Inlines__View$Parens
};

function Element__Inlines__View$Parens2(Props) {
  var payload = Props.payload;
  var match = React.useState(function () {
        return false;
      });
  var setActivated = match[1];
  var activated = match[0];
  var match$1 = React.useState(function () {
        return false;
      });
  var setContracted = match$1[1];
  var onMouseOver = function (param) {
    return Curry._1(setActivated, (function (param) {
                  return true;
                }));
  };
  var onMouseOut = function (param) {
    return Curry._1(setActivated, (function (param) {
                  return false;
                }));
  };
  var onClick = function (param) {
    return Curry._1(setContracted, (function (x) {
                  return !x;
                }));
  };
  var openParenClassName = "element-horz-item element-parentheses" + (
    activated ? " activated" : ""
  );
  var openParen = React.createElement("span", {
        className: openParenClassName,
        onClick: onClick,
        onMouseOut: onMouseOut,
        onMouseOver: onMouseOver
      }, "(");
  var closeParenClassName = "element-horz-item element-parentheses compact" + (
    activated ? " activated" : ""
  );
  var closeParen = React.createElement("span", {
        className: closeParenClassName,
        onClick: onClick,
        onMouseOut: onMouseOut,
        onMouseOver: onMouseOver
      }, ")");
  if (match$1[0]) {
    return React.createElement("span", {
                className: "element-horz"
              }, React.createElement("span", {
                    className: openParenClassName,
                    onClick: onClick,
                    onMouseOut: onMouseOut,
                    onMouseOver: onMouseOver
                  }, "(..)"));
  }
  var children = Belt_Array.concatMany([
        [openParen],
        payload,
        [closeParen]
      ]);
  return React.createElement("span", {
              className: "element-horz"
            }, children);
}

var Parens2 = {
  make: Element__Inlines__View$Parens2
};

function Element__Inlines__View$Sbst(Props) {
  var makeInline = Props.makeInline;
  var before = Props.before;
  var mapping = Props.mapping;
  var after = Props.after;
  var onSubst = Props.onSubst;
  var match = React.useState(function () {
        return false;
      });
  var setSubstitute = match[1];
  var match$1 = React.useState(function () {
        return false;
      });
  var setHoverSubstitutee = match$1[1];
  var undo = function (param) {
    return Curry._1(setSubstitute, (function (param) {
                  return false;
                }));
  };
  var onClick = function (param) {
    Curry._1(setHoverSubstitutee, (function (param) {
            return false;
          }));
    Belt_Option.forEach(onSubst, (function (onSubst) {
            return Curry._1(onSubst, {
                        before: before,
                        mapping: mapping,
                        after: after,
                        undo: undo
                      });
          }));
    return Curry._1(setSubstitute, (function (param) {
                  return true;
                }));
  };
  var onMouseOver = function (param) {
    return Curry._1(setHoverSubstitutee, (function (param) {
                  return true;
                }));
  };
  var onMouseOut = function (param) {
    return Curry._1(setHoverSubstitutee, (function (param) {
                  return false;
                }));
  };
  if (match[0]) {
    var after$1 = Curry._2(makeInline, /* Element */{
          _0: after
        }, onSubst);
    return React.createElement("span", {
                className: "element-sbst"
              }, after$1);
  }
  var before$1 = Curry._2(makeInline, /* Element */{
        _0: before
      }, onSubst);
  if (mapping.length <= 0) {
    if (match$1[0]) {
      return React.createElement("span", {
                  className: "element-sbst"
                }, React.createElement("span", {
                      className: "element-sbst-hovered"
                    }, before$1), React.createElement("span", {
                      className: "element-sbst-button",
                      onClick: onClick,
                      onMouseOut: onMouseOut,
                      onMouseOver: onMouseOver
                    }, " "));
    } else {
      return React.createElement("span", {
                  className: "element-sbst"
                }, React.createElement("span", undefined, before$1), React.createElement("span", {
                      className: "element-sbst-button",
                      onClick: onClick,
                      onMouseOut: onMouseOut,
                      onMouseOver: onMouseOver
                    }, " "));
    }
  }
  var env = Curry._2(makeInline, /* Element */{
        _0: mapping
      }, onSubst);
  return React.createElement("span", {
              className: "element-sbst"
            }, before$1, " ", React.createElement("span", {
                  className: "element-sbst-button",
                  onClick: onClick
                }, env));
}

var Sbst = {
  make: Element__Inlines__View$Sbst
};

function Element__Inlines__View$Expn(Props) {
  var makeInline = Props.makeInline;
  var reason = Props.reason;
  var before = Props.before;
  var after = Props.after;
  var onSubst = Props.onSubst;
  var match = React.useState(function () {
        return false;
      });
  var setSubstitute = match[1];
  var match$1 = React.useState(function () {
        return false;
      });
  var setHoverSubstitutee = match$1[1];
  var undo = function (param) {
    return Curry._1(setSubstitute, (function (param) {
                  return false;
                }));
  };
  var onClick = function (param) {
    Curry._1(setHoverSubstitutee, (function (param) {
            return false;
          }));
    Belt_Option.forEach(onSubst, (function (onSubst) {
            return Curry._1(onSubst, {
                        before: before,
                        mapping: reason,
                        after: after,
                        undo: undo
                      });
          }));
    return Curry._1(setSubstitute, (function (param) {
                  return true;
                }));
  };
  if (match[0]) {
    var after$1 = Curry._2(makeInline, /* Element */{
          _0: after
        }, onSubst);
    return React.createElement("span", {
                className: "element-sbst"
              }, after$1);
  }
  var before$1 = Curry._2(makeInline, /* Element */{
        _0: before
      }, onSubst);
  return React.createElement("span", {
              className: "element-sbst-button",
              onClick: onClick
            }, before$1);
}

var Expn = {
  make: Element__Inlines__View$Expn
};

function make(value, onSubst) {
  return React.createElement("span", undefined, Belt_Array.mapWithIndex(value._0, (function (i, x) {
                    switch (x.TAG | 0) {
                      case /* Icon */0 :
                          var className = Belt_Array.concat([
                                "codicon",
                                "codicon-" + x._0
                              ], x._1);
                          var className$1 = $$String.concat(" ", Belt_List.fromArray(className));
                          return React.createElement("div", {
                                      key: String(i),
                                      className: className$1
                                    });
                      case /* Text */1 :
                          var className$2 = $$String.concat(" ", Belt_List.fromArray(x._1));
                          return React.createElement("span", {
                                      key: String(i),
                                      className: className$2
                                    }, x._0);
                      case /* Link */2 :
                          var child = make(/* Element */{
                                _0: x._1
                              }, onSubst);
                          return React.createElement(Link$Guabao.make, {
                                      range: x._0,
                                      children: child,
                                      key: String(i)
                                    });
                      case /* Sbst */3 :
                          return React.createElement(Element__Inlines__View$Sbst, {
                                      makeInline: make,
                                      before: x._0,
                                      mapping: x._1,
                                      after: x._2,
                                      onSubst: onSubst,
                                      key: String(i)
                                    });
                      case /* Expn */4 :
                          return React.createElement(Element__Inlines__View$Expn, {
                                      makeInline: make,
                                      reason: x._0,
                                      before: x._1,
                                      after: x._2,
                                      onSubst: onSubst,
                                      key: String(i)
                                    });
                      case /* Sbst2 */5 :
                          return React.createElement(Element__Inlines__View$Sbst, {
                                      makeInline: make,
                                      before: x._1,
                                      mapping: x._2,
                                      after: x._3,
                                      onSubst: onSubst,
                                      key: String(i)
                                    });
                      case /* Horz */6 :
                          var children = Belt_Array.mapWithIndex(x._0, (function (j, element) {
                                  return React.createElement("span", {
                                              key: String(j),
                                              className: "element-horz-item"
                                            }, make(/* Element */{
                                                  _0: element
                                                }, onSubst));
                                }));
                          return React.createElement("span", {
                                      key: String(i),
                                      className: "element-horz"
                                    }, children);
                      case /* Vert */7 :
                          var children$1 = Belt_Array.mapWithIndex(x._0, (function (j, element) {
                                  return React.createElement("span", {
                                              key: String(j),
                                              className: "element-vert-item"
                                            }, make(/* Element */{
                                                  _0: element
                                                }, onSubst));
                                }));
                          return React.createElement("span", {
                                      key: String(i),
                                      className: "element-vert"
                                    }, children$1);
                      case /* Parn */8 :
                          return React.createElement(Element__Inlines__View$Parens, {
                                      children: make(/* Element */{
                                            _0: x._0
                                          }, onSubst),
                                      key: String(i)
                                    });
                      case /* PrHz */9 :
                          var children$2 = Belt_Array.mapWithIndex(x._0, (function (index, element) {
                                  if (index === 0) {
                                    return React.createElement("span", {
                                                key: String(index),
                                                className: "element-horz-item compact"
                                              }, make(/* Element */{
                                                    _0: element
                                                  }, onSubst));
                                  } else {
                                    return React.createElement("span", {
                                                key: String(index),
                                                className: "element-horz-item"
                                              }, make(/* Element */{
                                                    _0: element
                                                  }, onSubst));
                                  }
                                }));
                          return React.createElement(Element__Inlines__View$Parens2, {
                                      payload: children$2,
                                      key: String(i)
                                    });
                      
                    }
                  })));
}

function Element__Inlines__View(Props) {
  return make(Props.value, Props.onSubst);
}

var make$1 = Element__Inlines__View;

exports.Parens = Parens;
exports.Parens2 = Parens2;
exports.Sbst = Sbst;
exports.Expn = Expn;
exports.make = make$1;
/* react Not a pure module */

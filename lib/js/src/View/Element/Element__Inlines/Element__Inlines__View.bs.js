// Generated by ReScript, PLEASE EDIT WITH CARE
'use strict';

var Curry = require("rescript/lib/js/curry.js");
var React = require("react");
var $$String = require("rescript/lib/js/string.js");
var Belt_List = require("rescript/lib/js/belt_List.js");
var Belt_Array = require("rescript/lib/js/belt_Array.js");
var Link$Guabao = require("../../Link.bs.js");
var Substitution$Guabao = require("../../Substitution.bs.js");

function Element__Inlines__View$Parens(Props) {
  var children = Props.children;
  var match = React.useState(function () {
        return false;
      });
  var setActivated = match[1];
  var match$1 = React.useState(function () {
        return false;
      });
  var setContracted = match$1[1];
  var className = match[0] ? "element-parentheses activated" : "element-parentheses";
  var onMouseOver = function (param) {
    return Curry._1(setActivated, (function (param) {
                  return true;
                }));
  };
  var onMouseOut = function (param) {
    return Curry._1(setActivated, (function (param) {
                  return false;
                }));
  };
  var onClick = function (param) {
    return Curry._1(setContracted, (function (x) {
                  return !x;
                }));
  };
  return React.createElement(React.Fragment, undefined, React.createElement("span", {
                  className: className,
                  onClick: onClick,
                  onMouseOut: onMouseOut,
                  onMouseOver: onMouseOver
                }, "("), match$1[0] ? ".." : children, React.createElement("span", {
                  className: className,
                  onClick: onClick,
                  onMouseOut: onMouseOut,
                  onMouseOver: onMouseOver
                }, ")"));
}

var Parens = {
  make: Element__Inlines__View$Parens
};

function Element__Inlines__View$Parens2(Props) {
  var payload = Props.payload;
  var match = React.useState(function () {
        return false;
      });
  var setActivated = match[1];
  var activated = match[0];
  var match$1 = React.useState(function () {
        return false;
      });
  var setContracted = match$1[1];
  var onMouseOver = function (param) {
    return Curry._1(setActivated, (function (param) {
                  return true;
                }));
  };
  var onMouseOut = function (param) {
    return Curry._1(setActivated, (function (param) {
                  return false;
                }));
  };
  var onClick = function (param) {
    return Curry._1(setContracted, (function (x) {
                  return !x;
                }));
  };
  var openParenClassName = "element-horz-item element-parentheses" + (
    activated ? " activated" : ""
  );
  var openParen = React.createElement("span", {
        className: openParenClassName,
        onClick: onClick,
        onMouseOut: onMouseOut,
        onMouseOver: onMouseOver
      }, "(");
  var closeParenClassName = "element-horz-item element-parentheses compact" + (
    activated ? " activated" : ""
  );
  var closeParen = React.createElement("span", {
        className: closeParenClassName,
        onClick: onClick,
        onMouseOut: onMouseOut,
        onMouseOver: onMouseOver
      }, ")");
  if (match$1[0]) {
    return React.createElement("span", {
                className: "element-horz"
              }, React.createElement("span", {
                    className: openParenClassName,
                    onClick: onClick,
                    onMouseOut: onMouseOut,
                    onMouseOver: onMouseOver
                  }, "(..)"));
  }
  var children = Belt_Array.concatMany([
        [openParen],
        payload,
        [closeParen]
      ]);
  return React.createElement("span", {
              className: "element-horz"
            }, children);
}

var Parens2 = {
  make: Element__Inlines__View$Parens2
};

function make(value, onSubst) {
  return React.createElement("span", undefined, Belt_Array.mapWithIndex(value._0, (function (i, x) {
                    switch (x.TAG | 0) {
                      case /* Icon */0 :
                          var className = Belt_Array.concat([
                                "codicon",
                                "codicon-" + x._0
                              ], x._1);
                          var className$1 = $$String.concat(" ", Belt_List.fromArray(className));
                          return React.createElement("div", {
                                      key: String(i),
                                      className: className$1
                                    });
                      case /* Text */1 :
                          var className$2 = $$String.concat(" ", Belt_List.fromArray(x._1));
                          return React.createElement("span", {
                                      key: String(i),
                                      className: className$2
                                    }, x._0);
                      case /* Code */2 :
                          var code = make(/* Element */{
                                _0: x._0
                              }, onSubst);
                          return React.createElement("span", {
                                      key: String(i),
                                      className: "element-inline-code"
                                    }, code);
                      case /* Link */3 :
                          var child = make(/* Element */{
                                _0: x._1
                              }, onSubst);
                          return React.createElement(Link$Guabao.make, {
                                      range: x._0,
                                      children: child,
                                      key: String(i)
                                    });
                      case /* Sbst */4 :
                          var id = x._0;
                          return React.createElement(Substitution$Guabao.make, {
                                      makeInline: make,
                                      id: id,
                                      before: x._1,
                                      onSubst: onSubst,
                                      key: String(id)
                                    });
                      case /* Horz */5 :
                          var children = Belt_Array.mapWithIndex(x._0, (function (j, element) {
                                  return React.createElement("span", {
                                              key: String(j),
                                              className: "element-horz-item"
                                            }, make(/* Element */{
                                                  _0: element
                                                }, onSubst));
                                }));
                          return React.createElement("span", {
                                      key: String(i),
                                      className: "element-horz"
                                    }, children);
                      case /* Vert */6 :
                          var children$1 = Belt_Array.mapWithIndex(x._0, (function (j, element) {
                                  return React.createElement("span", {
                                              key: String(j),
                                              className: "element-vert-item"
                                            }, make(/* Element */{
                                                  _0: element
                                                }, onSubst));
                                }));
                          return React.createElement("span", {
                                      key: String(i),
                                      className: "element-vert"
                                    }, children$1);
                      case /* Parn */7 :
                          return React.createElement(Element__Inlines__View$Parens, {
                                      children: make(/* Element */{
                                            _0: x._0
                                          }, onSubst),
                                      key: String(i)
                                    });
                      case /* PrHz */8 :
                          var children$2 = Belt_Array.mapWithIndex(x._0, (function (index, element) {
                                  if (index === 0) {
                                    return React.createElement("span", {
                                                key: String(index),
                                                className: "element-horz-item compact"
                                              }, make(/* Element */{
                                                    _0: element
                                                  }, onSubst));
                                  } else {
                                    return React.createElement("span", {
                                                key: String(index),
                                                className: "element-horz-item"
                                              }, make(/* Element */{
                                                    _0: element
                                                  }, onSubst));
                                  }
                                }));
                          return React.createElement(Element__Inlines__View$Parens2, {
                                      payload: children$2,
                                      key: String(i)
                                    });
                      
                    }
                  })));
}

function Element__Inlines__View(Props) {
  return make(Props.value, Props.onSubst);
}

var make$1 = Element__Inlines__View;

exports.Parens = Parens;
exports.Parens2 = Parens2;
exports.make = make$1;
/* react Not a pure module */

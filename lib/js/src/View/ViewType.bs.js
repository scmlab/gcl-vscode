// Generated by ReScript, PLEASE EDIT WITH CARE
'use strict';

var Curry = require("rescript/lib/js/curry.js");
var Json_decode = require("@glennsl/bs-json/lib/js/src/Json_decode.bs.js");
var Json_encode = require("@glennsl/bs-json/lib/js/src/Json_encode.bs.js");
var Link$Guabao = require("./Link.bs.js");
var Util$Guabao = require("../Util/Util.bs.js");
var Element__Section$Guabao = require("./Element/Element__Section.bs.js");

var decode = Util$Guabao.Decode.sum(function (x) {
      switch (x) {
        case "ViaPrebuilt" :
            return {
                    TAG: /* Contents */0,
                    _0: (function (param) {
                        return Json_decode.map((function (param) {
                                      return {
                                              TAG: /* ViaPrebuilt */2,
                                              _0: param[0],
                                              _1: param[1]
                                            };
                                    }), (function (param) {
                                      return Json_decode.pair(Json_decode.string, Json_decode.string, param);
                                    }), param);
                      })
                  };
        case "ViaStdIO" :
            return {
                    TAG: /* Contents */0,
                    _0: (function (param) {
                        return Json_decode.map((function (param) {
                                      return {
                                              TAG: /* ViaStdIO */0,
                                              _0: param[0],
                                              _1: param[1]
                                            };
                                    }), (function (param) {
                                      return Json_decode.pair(Json_decode.string, Json_decode.string, param);
                                    }), param);
                      })
                  };
        case "ViaTCP" :
            return {
                    TAG: /* Contents */0,
                    _0: (function (param) {
                        return Json_decode.map((function (port) {
                                      return {
                                              TAG: /* ViaTCP */1,
                                              _0: port
                                            };
                                    }), Json_decode.$$int, param);
                      })
                  };
        default:
          throw {
                RE_EXN_ID: Json_decode.DecodeError,
                _1: "[ConnectionMethod] Unknown constructor: " + x,
                Error: new Error()
              };
      }
    });

function encode(x) {
  switch (x.TAG | 0) {
    case /* ViaStdIO */0 :
        return Json_encode.object_({
                    hd: [
                      "tag",
                      "ViaStdIO"
                    ],
                    tl: {
                      hd: [
                        "contents",
                        Json_encode.pair((function (prim) {
                                return prim;
                              }), (function (prim) {
                                return prim;
                              }), [
                              x._0,
                              x._1
                            ])
                      ],
                      tl: /* [] */0
                    }
                  });
    case /* ViaTCP */1 :
        return Json_encode.object_({
                    hd: [
                      "tag",
                      "ViaTCP"
                    ],
                    tl: {
                      hd: [
                        "contents",
                        x._0
                      ],
                      tl: /* [] */0
                    }
                  });
    case /* ViaPrebuilt */2 :
        return Json_encode.object_({
                    hd: [
                      "tag",
                      "ViaPrebuilt"
                    ],
                    tl: {
                      hd: [
                        "contents",
                        Json_encode.pair((function (prim) {
                                return prim;
                              }), (function (prim) {
                                return prim;
                              }), [
                              x._0,
                              x._1
                            ])
                      ],
                      tl: /* [] */0
                    }
                  });
    
  }
}

var ConnectionMethod = {
  decode: decode,
  encode: encode
};

var decode$1 = Util$Guabao.Decode.sum(function (x) {
      switch (x) {
        case "Display" :
            return {
                    TAG: /* Contents */0,
                    _0: (function (param) {
                        return Json_decode.map((function (param) {
                                      return {
                                              TAG: /* Display */1,
                                              _0: param[0],
                                              _1: param[1]
                                            };
                                    }), (function (param) {
                                      return Json_decode.tuple2(Json_decode.$$int, (function (param) {
                                                    return Json_decode.array(Element__Section$Guabao.decode, param);
                                                  }), param);
                                    }), param);
                      })
                  };
        case "UpdateConnection" :
            return {
                    TAG: /* Contents */0,
                    _0: (function (param) {
                        return Json_decode.map((function (method) {
                                      return {
                                              TAG: /* UpdateConnection */0,
                                              _0: method
                                            };
                                    }), (function (param) {
                                      return Json_decode.optional(decode, param);
                                    }), param);
                      })
                  };
        default:
          throw {
                RE_EXN_ID: Json_decode.DecodeError,
                _1: "[Request] Unknown constructor: " + x,
                Error: new Error()
              };
      }
    });

function encode$1(x) {
  if (x.TAG === /* UpdateConnection */0) {
    return Json_encode.object_({
                hd: [
                  "tag",
                  "UpdateConnection"
                ],
                tl: {
                  hd: [
                    "contents",
                    Json_encode.nullable(encode, x._0)
                  ],
                  tl: /* [] */0
                }
              });
  } else {
    return Json_encode.object_({
                hd: [
                  "tag",
                  "Display"
                ],
                tl: {
                  hd: [
                    "contents",
                    Json_encode.tuple2((function (prim) {
                            return prim;
                          }), (function (param) {
                            return Json_encode.array(Element__Section$Guabao.encode, param);
                          }), [
                          x._0,
                          x._1
                        ])
                  ],
                  tl: /* [] */0
                }
              });
  }
}

var $$Request = {
  decode: decode$1,
  encode: encode$1
};

var decode$2 = Util$Guabao.Decode.sum(function (x) {
      switch (x) {
        case "Destroyed" :
            return {
                    TAG: /* TagOnly */1,
                    _0: (function (param) {
                        return /* Destroyed */2;
                      })
                  };
        case "ExportProofObligations" :
            return {
                    TAG: /* TagOnly */1,
                    _0: (function (param) {
                        return /* ExportProofObligations */0;
                      })
                  };
        case "Initialized" :
            return {
                    TAG: /* TagOnly */1,
                    _0: (function (param) {
                        return /* Initialized */1;
                      })
                  };
        case "Link" :
            return {
                    TAG: /* Contents */0,
                    _0: (function (json) {
                        return /* Link */{
                                _0: Curry._1(Link$Guabao.$$Event.decode, json)
                              };
                      })
                  };
        default:
          throw {
                RE_EXN_ID: Json_decode.DecodeError,
                _1: "[Response.t] Unknown constructor: " + x,
                Error: new Error()
              };
      }
    });

function encode$2(x) {
  if (typeof x !== "number") {
    return Json_encode.object_({
                hd: [
                  "tag",
                  "Link"
                ],
                tl: {
                  hd: [
                    "contents",
                    Link$Guabao.$$Event.encode(x._0)
                  ],
                  tl: /* [] */0
                }
              });
  }
  switch (x) {
    case /* ExportProofObligations */0 :
        return Json_encode.object_({
                    hd: [
                      "tag",
                      "ExportProofObligations"
                    ],
                    tl: /* [] */0
                  });
    case /* Initialized */1 :
        return Json_encode.object_({
                    hd: [
                      "tag",
                      "Initialized"
                    ],
                    tl: /* [] */0
                  });
    case /* Destroyed */2 :
        return Json_encode.object_({
                    hd: [
                      "tag",
                      "Destroyed"
                    ],
                    tl: /* [] */0
                  });
    
  }
}

var $$Response = {
  decode: decode$2,
  encode: encode$2
};

exports.ConnectionMethod = ConnectionMethod;
exports.$$Request = $$Request;
exports.$$Response = $$Response;
/* decode Not a pure module */

// Generated by ReScript, PLEASE EDIT WITH CARE
'use strict';

var Curry = require("bs-platform/lib/js/curry.js");
var Json_decode = require("@glennsl/bs-json/lib/js/src/Json_decode.bs.js");
var Json_encode = require("@glennsl/bs-json/lib/js/src/Json_encode.bs.js");
var GCL$Guacamole = require("../GCL.bs.js");
var Util$Guacamole = require("../Util/Util.bs.js");
var Response$Guacamole = require("../Response.bs.js");

var decode = Util$Guacamole.Decode.sum(function (x) {
      switch (x) {
        case "Display" :
            return {
                    TAG: 0,
                    _0: (function (param) {
                        return Json_decode.map((function (param) {
                                      return {
                                              TAG: 3,
                                              _0: param[0],
                                              _1: param[1],
                                              _2: param[2],
                                              [Symbol.for("name")]: "Display"
                                            };
                                    }), (function (param) {
                                      return Json_decode.tuple3(Json_decode.$$int, (function (param) {
                                                    return Json_decode.array(Response$Guacamole.ProofObligation.decode, param);
                                                  }), (function (param) {
                                                    return Json_decode.array(Response$Guacamole.GlobalProp.decode, param);
                                                  }), param);
                                    }), param);
                      }),
                    [Symbol.for("name")]: "Contents"
                  };
        case "SetErrorMessages" :
            return {
                    TAG: 0,
                    _0: (function (param) {
                        return Json_decode.map((function (msgs) {
                                      return {
                                              TAG: 2,
                                              _0: msgs,
                                              [Symbol.for("name")]: "SetErrorMessages"
                                            };
                                    }), (function (param) {
                                      return Json_decode.array((function (param) {
                                                    return Json_decode.pair(Json_decode.string, Json_decode.string, param);
                                                  }), param);
                                    }), param);
                      }),
                    [Symbol.for("name")]: "Contents"
                  };
        case "Substitute" :
            return {
                    TAG: 0,
                    _0: (function (param) {
                        return Json_decode.map((function (param) {
                                      return {
                                              TAG: 1,
                                              _0: param[0],
                                              _1: param[1],
                                              [Symbol.for("name")]: "Substitute"
                                            };
                                    }), (function (param) {
                                      return Json_decode.pair(Json_decode.$$int, GCL$Guacamole.Syntax.Expr.decode, param);
                                    }), param);
                      }),
                    [Symbol.for("name")]: "Contents"
                  };
        case "UpdateState" :
            return {
                    TAG: 0,
                    _0: (function (param) {
                        return Json_decode.map((function (devMode) {
                                      return {
                                              TAG: 0,
                                              _0: {
                                                devMode: devMode
                                              },
                                              [Symbol.for("name")]: "UpdateState"
                                            };
                                    }), Json_decode.bool, param);
                      }),
                    [Symbol.for("name")]: "Contents"
                  };
        default:
          throw {
                RE_EXN_ID: Json_decode.DecodeError,
                _1: "[Request] Unknown constructor: " + x,
                Error: new Error()
              };
      }
    });

function encode(x) {
  switch (x.TAG | 0) {
    case /* UpdateState */0 :
        return Json_encode.object_({
                    hd: [
                      "tag",
                      "UpdateState"
                    ],
                    tl: {
                      hd: [
                        "contents",
                        x._0.devMode
                      ],
                      tl: /* [] */0
                    }
                  });
    case /* Substitute */1 :
        return Json_encode.object_({
                    hd: [
                      "tag",
                      "Substitute"
                    ],
                    tl: {
                      hd: [
                        "contents",
                        Json_encode.pair((function (prim) {
                                return prim;
                              }), GCL$Guacamole.Syntax.Expr.encode, [
                              x._0,
                              x._1
                            ])
                      ],
                      tl: /* [] */0
                    }
                  });
    case /* SetErrorMessages */2 :
        return Json_encode.object_({
                    hd: [
                      "tag",
                      "SetErrorMessages"
                    ],
                    tl: {
                      hd: [
                        "contents",
                        Json_encode.array((function (param) {
                                return Json_encode.pair((function (prim) {
                                              return prim;
                                            }), (function (prim) {
                                              return prim;
                                            }), param);
                              }), x._0)
                      ],
                      tl: /* [] */0
                    }
                  });
    case /* Display */3 :
        return Json_encode.object_({
                    hd: [
                      "tag",
                      "Display"
                    ],
                    tl: {
                      hd: [
                        "contents",
                        Json_encode.tuple3((function (prim) {
                                return prim;
                              }), (function (param) {
                                return Json_encode.array(Response$Guacamole.ProofObligation.encode, param);
                              }), (function (param) {
                                return Json_encode.array(Response$Guacamole.GlobalProp.encode, param);
                              }), [
                              x._0,
                              x._1,
                              x._2
                            ])
                      ],
                      tl: /* [] */0
                    }
                  });
    
  }
}

var $$Request = {
  decode: decode,
  encode: encode
};

var decodeLinkEvent = Util$Guacamole.Decode.sum(function (x) {
      switch (x) {
        case "MouseClick" :
            return {
                    TAG: 0,
                    _0: (function (loc) {
                        return {
                                TAG: 2,
                                _0: Curry._1(GCL$Guacamole.Loc.decode, loc),
                                [Symbol.for("name")]: "MouseClick"
                              };
                      }),
                    [Symbol.for("name")]: "Contents"
                  };
        case "MouseOut" :
            return {
                    TAG: 0,
                    _0: (function (loc) {
                        return {
                                TAG: 1,
                                _0: Curry._1(GCL$Guacamole.Loc.decode, loc),
                                [Symbol.for("name")]: "MouseOut"
                              };
                      }),
                    [Symbol.for("name")]: "Contents"
                  };
        case "MouseOver" :
            return {
                    TAG: 0,
                    _0: (function (loc) {
                        return {
                                TAG: 0,
                                _0: Curry._1(GCL$Guacamole.Loc.decode, loc),
                                [Symbol.for("name")]: "MouseOver"
                              };
                      }),
                    [Symbol.for("name")]: "Contents"
                  };
        default:
          throw {
                RE_EXN_ID: Json_decode.DecodeError,
                _1: "[Response.linkEvent] Unknown constructor: " + x,
                Error: new Error()
              };
      }
    });

var decode$1 = Util$Guacamole.Decode.sum(function (x) {
      switch (x) {
        case "Destroyed" :
            return {
                    TAG: 1,
                    _0: (function (param) {
                        return /* Destroyed */2;
                      }),
                    [Symbol.for("name")]: "TagOnly"
                  };
        case "ExportProofObligations" :
            return {
                    TAG: 1,
                    _0: (function (param) {
                        return /* ExportProofObligations */0;
                      }),
                    [Symbol.for("name")]: "TagOnly"
                  };
        case "Initialized" :
            return {
                    TAG: 1,
                    _0: (function (param) {
                        return /* Initialized */1;
                      }),
                    [Symbol.for("name")]: "TagOnly"
                  };
        case "Link" :
            return {
                    TAG: 0,
                    _0: (function (json) {
                        return {
                                TAG: 0,
                                _0: Curry._1(decodeLinkEvent, json),
                                [Symbol.for("name")]: "Link"
                              };
                      }),
                    [Symbol.for("name")]: "Contents"
                  };
        case "Substitute" :
            return {
                    TAG: 0,
                    _0: (function (param) {
                        return Json_decode.map((function (param) {
                                      return {
                                              TAG: 1,
                                              _0: param[0],
                                              _1: param[1],
                                              _2: param[2],
                                              [Symbol.for("name")]: "Substitute"
                                            };
                                    }), (function (param) {
                                      return Json_decode.tuple3(Json_decode.$$int, GCL$Guacamole.Syntax.Expr.decode, GCL$Guacamole.Syntax.Expr.decodeSubst, param);
                                    }), param);
                      }),
                    [Symbol.for("name")]: "Contents"
                  };
        default:
          throw {
                RE_EXN_ID: Json_decode.DecodeError,
                _1: "[Response.t] Unknown constructor: " + x,
                Error: new Error()
              };
      }
    });

function encodeLinkEvent(x) {
  switch (x.TAG | 0) {
    case /* MouseOver */0 :
        return Json_encode.object_({
                    hd: [
                      "tag",
                      "MouseOver"
                    ],
                    tl: {
                      hd: [
                        "contents",
                        GCL$Guacamole.Loc.encode(x._0)
                      ],
                      tl: /* [] */0
                    }
                  });
    case /* MouseOut */1 :
        return Json_encode.object_({
                    hd: [
                      "tag",
                      "MouseOut"
                    ],
                    tl: {
                      hd: [
                        "contents",
                        GCL$Guacamole.Loc.encode(x._0)
                      ],
                      tl: /* [] */0
                    }
                  });
    case /* MouseClick */2 :
        return Json_encode.object_({
                    hd: [
                      "tag",
                      "MouseClick"
                    ],
                    tl: {
                      hd: [
                        "contents",
                        GCL$Guacamole.Loc.encode(x._0)
                      ],
                      tl: /* [] */0
                    }
                  });
    
  }
}

function encode$1(x) {
  if (typeof x !== "number") {
    if (x.TAG === /* Link */0) {
      return Json_encode.object_({
                  hd: [
                    "tag",
                    "Link"
                  ],
                  tl: {
                    hd: [
                      "contents",
                      encodeLinkEvent(x._0)
                    ],
                    tl: /* [] */0
                  }
                });
    } else {
      return Json_encode.object_({
                  hd: [
                    "tag",
                    "Substitute"
                  ],
                  tl: {
                    hd: [
                      "contents",
                      Json_encode.tuple3((function (prim) {
                              return prim;
                            }), GCL$Guacamole.Syntax.Expr.encode, GCL$Guacamole.Syntax.Expr.encodeSubst, [
                            x._0,
                            x._1,
                            x._2
                          ])
                    ],
                    tl: /* [] */0
                  }
                });
    }
  }
  switch (x) {
    case /* ExportProofObligations */0 :
        return Json_encode.object_({
                    hd: [
                      "tag",
                      "ExportProofObligations"
                    ],
                    tl: /* [] */0
                  });
    case /* Initialized */1 :
        return Json_encode.object_({
                    hd: [
                      "tag",
                      "Initialized"
                    ],
                    tl: /* [] */0
                  });
    case /* Destroyed */2 :
        return Json_encode.object_({
                    hd: [
                      "tag",
                      "Destroyed"
                    ],
                    tl: /* [] */0
                  });
    
  }
}

var $$Response = {
  decodeLinkEvent: decodeLinkEvent,
  decode: decode$1,
  encodeLinkEvent: encodeLinkEvent,
  encode: encode$1
};

exports.$$Request = $$Request;
exports.$$Response = $$Response;
/* decode Not a pure module */

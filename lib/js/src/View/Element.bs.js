// Generated by ReScript, PLEASE EDIT WITH CARE
'use strict';

var Curry = require("bs-platform/lib/js/curry.js");
var React = require("react");
var $$String = require("bs-platform/lib/js/string.js");
var Belt_List = require("bs-platform/lib/js/belt_List.js");
var Belt_Array = require("bs-platform/lib/js/belt_Array.js");
var Json_decode = require("@glennsl/bs-json/lib/js/src/Json_decode.bs.js");
var Json_encode = require("@glennsl/bs-json/lib/js/src/Json_encode.bs.js");
var Util$Guacamole = require("../Util/Util.bs.js");

function Element$Parens(Props) {
  var children = Props.children;
  var match = React.useState(function () {
        return false;
      });
  var setActivated = match[1];
  var match$1 = React.useState(function () {
        return false;
      });
  var setContracted = match$1[1];
  var className = match[0] ? "element-parentheses activated" : "element-parentheses";
  var onMouseOver = function (param) {
    return Curry._1(setActivated, (function (param) {
                  return true;
                }));
  };
  var onMouseOut = function (param) {
    return Curry._1(setActivated, (function (param) {
                  return false;
                }));
  };
  var onClick = function (param) {
    return Curry._1(setContracted, (function (x) {
                  return !x;
                }));
  };
  return React.createElement(React.Fragment, undefined, React.createElement("span", {
                  className: className,
                  onClick: onClick,
                  onMouseOut: onMouseOut,
                  onMouseOver: onMouseOver
                }, "("), match$1[0] ? ".." : children, React.createElement("span", {
                  className: className,
                  onClick: onClick,
                  onMouseOut: onMouseOut,
                  onMouseOver: onMouseOver
                }, ")"));
}

var Parens = {
  make: Element$Parens
};

function Element$Parens2(Props) {
  var payload = Props.payload;
  var match = React.useState(function () {
        return false;
      });
  var setActivated = match[1];
  var activated = match[0];
  var match$1 = React.useState(function () {
        return false;
      });
  var setContracted = match$1[1];
  var onMouseOver = function (param) {
    return Curry._1(setActivated, (function (param) {
                  return true;
                }));
  };
  var onMouseOut = function (param) {
    return Curry._1(setActivated, (function (param) {
                  return false;
                }));
  };
  var onClick = function (param) {
    return Curry._1(setContracted, (function (x) {
                  return !x;
                }));
  };
  var openParenClassName = "element-horz-item element-parentheses" + (
    activated ? " activated" : ""
  );
  var openParen = React.createElement("span", {
        className: openParenClassName,
        onClick: onClick,
        onMouseOut: onMouseOut,
        onMouseOver: onMouseOver
      }, "(");
  var closeParenClassName = "element-horz-item element-parentheses compact" + (
    activated ? " activated" : ""
  );
  var closeParen = React.createElement("span", {
        className: closeParenClassName,
        onClick: onClick,
        onMouseOut: onMouseOut,
        onMouseOver: onMouseOver
      }, ")");
  if (match$1[0]) {
    return React.createElement("span", {
                className: "element-horz"
              }, React.createElement("span", {
                    className: openParenClassName,
                    onClick: onClick,
                    onMouseOut: onMouseOut,
                    onMouseOver: onMouseOver
                  }, "(..)"));
  }
  var children = Belt_Array.concatMany([
        [openParen],
        payload,
        [closeParen]
      ]);
  return React.createElement("span", {
              className: "element-horz"
            }, children);
}

var Parens2 = {
  make: Element$Parens2
};

function decode(param) {
  return Json_decode.array(Json_decode.string, param);
}

function encode(param) {
  return Json_encode.array((function (prim) {
                return prim;
              }), param);
}

var ClassNames = {
  decode: decode,
  encode: encode
};

function decode$1(param) {
  return Util$Guacamole.Decode.sum(function (x) {
              switch (x) {
                case "Horz" :
                    var partial_arg = decode$1(undefined);
                    var partial_arg$1 = function (param) {
                      return Json_decode.array(partial_arg, param);
                    };
                    var partial_arg$2 = function (param) {
                      return Json_decode.array(partial_arg$1, param);
                    };
                    return {
                            TAG: 0,
                            _0: (function (param) {
                                return Json_decode.map((function (xs) {
                                              return {
                                                      TAG: 2,
                                                      _0: xs,
                                                      [Symbol.for("name")]: "Horz"
                                                    };
                                            }), partial_arg$2, param);
                              }),
                            [Symbol.for("name")]: "Contents"
                          };
                case "Icon" :
                    return {
                            TAG: 0,
                            _0: (function (param) {
                                return Json_decode.map((function (param) {
                                              return {
                                                      TAG: 0,
                                                      _0: param[0],
                                                      _1: param[1],
                                                      [Symbol.for("name")]: "Icon"
                                                    };
                                            }), (function (param) {
                                              return Json_decode.pair(Json_decode.string, decode, param);
                                            }), param);
                              }),
                            [Symbol.for("name")]: "Contents"
                          };
                case "Parn" :
                    var partial_arg$3 = decode$1(undefined);
                    var partial_arg$4 = function (param) {
                      return Json_decode.array(partial_arg$3, param);
                    };
                    return {
                            TAG: 0,
                            _0: (function (param) {
                                return Json_decode.map((function (x) {
                                              return {
                                                      TAG: 4,
                                                      _0: x,
                                                      [Symbol.for("name")]: "Parn"
                                                    };
                                            }), partial_arg$4, param);
                              }),
                            [Symbol.for("name")]: "Contents"
                          };
                case "PrHz" :
                    var partial_arg$5 = decode$1(undefined);
                    var partial_arg$6 = function (param) {
                      return Json_decode.array(partial_arg$5, param);
                    };
                    var partial_arg$7 = function (param) {
                      return Json_decode.array(partial_arg$6, param);
                    };
                    return {
                            TAG: 0,
                            _0: (function (param) {
                                return Json_decode.map((function (xs) {
                                              return {
                                                      TAG: 5,
                                                      _0: xs,
                                                      [Symbol.for("name")]: "PrHz"
                                                    };
                                            }), partial_arg$7, param);
                              }),
                            [Symbol.for("name")]: "Contents"
                          };
                case "Text" :
                    return {
                            TAG: 0,
                            _0: (function (param) {
                                return Json_decode.map((function (param) {
                                              return {
                                                      TAG: 1,
                                                      _0: param[0],
                                                      _1: param[1],
                                                      [Symbol.for("name")]: "Text"
                                                    };
                                            }), (function (param) {
                                              return Json_decode.pair(Json_decode.string, decode, param);
                                            }), param);
                              }),
                            [Symbol.for("name")]: "Contents"
                          };
                case "Vert" :
                    var partial_arg$8 = decode$1(undefined);
                    var partial_arg$9 = function (param) {
                      return Json_decode.array(partial_arg$8, param);
                    };
                    var partial_arg$10 = function (param) {
                      return Json_decode.array(partial_arg$9, param);
                    };
                    return {
                            TAG: 0,
                            _0: (function (param) {
                                return Json_decode.map((function (xs) {
                                              return {
                                                      TAG: 3,
                                                      _0: xs,
                                                      [Symbol.for("name")]: "Vert"
                                                    };
                                            }), partial_arg$10, param);
                              }),
                            [Symbol.for("name")]: "Contents"
                          };
                default:
                  throw {
                        RE_EXN_ID: Json_decode.DecodeError,
                        _1: "[Element.Inline] Unknown constructor: " + x,
                        Error: new Error()
                      };
              }
            });
}

var decode$2 = decode$1(undefined);

function encode$1(x) {
  switch (x.TAG | 0) {
    case /* Icon */0 :
        return Json_encode.object_({
                    hd: [
                      "tag",
                      "Icon"
                    ],
                    tl: {
                      hd: [
                        "contents",
                        Json_encode.pair((function (prim) {
                                return prim;
                              }), encode, [
                              x._0,
                              x._1
                            ])
                      ],
                      tl: /* [] */0
                    }
                  });
    case /* Text */1 :
        return Json_encode.object_({
                    hd: [
                      "tag",
                      "Text"
                    ],
                    tl: {
                      hd: [
                        "contents",
                        Json_encode.pair((function (prim) {
                                return prim;
                              }), encode, [
                              x._0,
                              x._1
                            ])
                      ],
                      tl: /* [] */0
                    }
                  });
    case /* Horz */2 :
        return Json_encode.object_({
                    hd: [
                      "tag",
                      "Horz"
                    ],
                    tl: {
                      hd: [
                        "contents",
                        Json_encode.array((function (param) {
                                return Json_encode.array(encode$1, param);
                              }), x._0)
                      ],
                      tl: /* [] */0
                    }
                  });
    case /* Vert */3 :
        return Json_encode.object_({
                    hd: [
                      "tag",
                      "Vert"
                    ],
                    tl: {
                      hd: [
                        "contents",
                        Json_encode.array((function (param) {
                                return Json_encode.array(encode$1, param);
                              }), x._0)
                      ],
                      tl: /* [] */0
                    }
                  });
    case /* Parn */4 :
        return Json_encode.object_({
                    hd: [
                      "tag",
                      "Parn"
                    ],
                    tl: {
                      hd: [
                        "contents",
                        Json_encode.array(encode$1, x._0)
                      ],
                      tl: /* [] */0
                    }
                  });
    case /* PrHz */5 :
        return Json_encode.object_({
                    hd: [
                      "tag",
                      "PrHz"
                    ],
                    tl: {
                      hd: [
                        "contents",
                        Json_encode.array((function (param) {
                                return Json_encode.array(encode$1, param);
                              }), x._0)
                      ],
                      tl: /* [] */0
                    }
                  });
    
  }
}

var Inline = {
  decode: decode$2,
  encode: encode$1
};

var empty = {
  _0: [],
  [Symbol.for("name")]: "Element"
};

function string(s) {
  return {
          _0: [{
              TAG: 1,
              _0: s,
              _1: [],
              [Symbol.for("name")]: "Text"
            }],
          [Symbol.for("name")]: "Element"
        };
}

function concatMany(xs) {
  return {
          _0: Belt_Array.concatMany(Belt_Array.map(xs, (function (x) {
                      return x._0;
                    }))),
          [Symbol.for("name")]: "Element"
        };
}

function make(value) {
  return React.createElement("span", undefined, Belt_Array.mapWithIndex(value._0, (function (i, x) {
                    switch (x.TAG | 0) {
                      case /* Icon */0 :
                          var className = Belt_Array.concat([
                                "codicon",
                                "codicon-" + x._0
                              ], x._1);
                          var className$1 = $$String.concat(" ", Belt_List.fromArray(className));
                          return React.createElement("div", {
                                      key: String(i),
                                      className: className$1
                                    });
                      case /* Text */1 :
                          var className$2 = $$String.concat(" ", Belt_List.fromArray(x._1));
                          return React.createElement("span", {
                                      key: String(i),
                                      className: className$2
                                    }, x._0);
                      case /* Horz */2 :
                          var children = Belt_Array.map(x._0, (function (element) {
                                  return React.createElement("span", {
                                              className: "element-horz-item"
                                            }, make({
                                                  _0: element,
                                                  [Symbol.for("name")]: "Element"
                                                }));
                                }));
                          return React.createElement("span", {
                                      key: String(i),
                                      className: "element-horz"
                                    }, children);
                      case /* Vert */3 :
                          var children$1 = Belt_Array.map(x._0, (function (element) {
                                  return React.createElement("span", {
                                              className: "element-vert-item"
                                            }, make({
                                                  _0: element,
                                                  [Symbol.for("name")]: "Element"
                                                }));
                                }));
                          return React.createElement("span", {
                                      key: String(i),
                                      className: "element-vert"
                                    }, children$1);
                      case /* Parn */4 :
                          return React.createElement(Element$Parens, {
                                      children: make({
                                            _0: x._0,
                                            [Symbol.for("name")]: "Element"
                                          })
                                    });
                      case /* PrHz */5 :
                          var children$2 = Belt_Array.mapWithIndex(x._0, (function (index, element) {
                                  if (index === 0) {
                                    return React.createElement("span", {
                                                className: "element-horz-item compact"
                                              }, make({
                                                    _0: element,
                                                    [Symbol.for("name")]: "Element"
                                                  }));
                                  } else {
                                    return React.createElement("span", {
                                                className: "element-horz-item"
                                              }, make({
                                                    _0: element,
                                                    [Symbol.for("name")]: "Element"
                                                  }));
                                  }
                                }));
                          return React.createElement(Element$Parens2, {
                                      payload: children$2
                                    });
                      
                    }
                  })));
}

function decode$3(param) {
  return Json_decode.map((function (elems) {
                return {
                        _0: elems,
                        [Symbol.for("name")]: "Element"
                      };
              }), (function (param) {
                return Json_decode.array(decode$2, param);
              }), param);
}

function encode$2(x) {
  return Json_encode.array(encode$1, x._0);
}

var Module = {
  ClassNames: ClassNames,
  Inline: Inline,
  empty: empty,
  string: string,
  concatMany: concatMany,
  make: make,
  decode: decode$3,
  encode: encode$2
};

function $$Element(Props) {
  return make(Props.value);
}

var make$1 = $$Element;

exports.Parens = Parens;
exports.Parens2 = Parens2;
exports.Module = Module;
exports.ClassNames = ClassNames;
exports.Inline = Inline;
exports.empty = empty;
exports.string = string;
exports.concatMany = concatMany;
exports.decode = decode$3;
exports.encode = encode$2;
exports.make = make$1;
/* decode Not a pure module */

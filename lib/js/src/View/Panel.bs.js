// Generated by BUCKLESCRIPT, PLEASE EDIT WITH CARE
'use strict';

var Curry = require("bs-platform/lib/js/curry.js");
var React = require("react");
var Body$Guacamole = require("./Body.bs.js");
var Link$Guacamole = require("./Link.bs.js");
var Event$Guacamole = require("../Util/Event.bs.js");
var Subst$Guacamole = require("./Subst.bs.js");
var Header$Guacamole = require("./Header.bs.js");
var Caml_chrome_debugger = require("bs-platform/lib/js/caml_chrome_debugger.js");

function Panel(Props) {
  var editorType = Props.editorType;
  var onRequest = Props.onRequest;
  var onResponse = Props.onResponse;
  var match = React.useState((function () {
          return /* Loading */0;
        }));
  var setHeader = match[1];
  var match$1 = React.useState((function () {
          return /* Nothing */0;
        }));
  var setBody = match$1[1];
  var match$2 = React.useState((function () {
          return /* WP1 */0;
        }));
  var setMode = match$2[1];
  var mode = match$2[0];
  var match$3 = React.useState((function () {
          return false;
        }));
  var setHidden = match$3[1];
  var onClickLink = React.useRef(Event$Guacamole.make(/* () */0));
  var onSubstitute = React.useRef(Event$Guacamole.make(/* () */0));
  React.useEffect((function () {
          Curry._1(onResponse.emit, /* Initialized */0);
          return ;
        }), []);
  var onChangeMode = function (mode) {
    return Curry._1(setMode, (function (param) {
                  return mode;
                }));
  };
  React.useEffect((function () {
          return Curry._1(onRequest.on, (function (param) {
                        if (typeof param === "number") {
                          if (param === /* Show */0) {
                            return Curry._1(setHidden, (function (param) {
                                          return false;
                                        }));
                          } else {
                            return Curry._1(setHidden, (function (param) {
                                          return true;
                                        }));
                          }
                        } else if (param.tag) {
                          var body = param[1];
                          var header = param[0];
                          Curry._1(setHeader, (function (param) {
                                  return header;
                                }));
                          return Curry._1(setBody, (function (param) {
                                        return body;
                                      }));
                        } else {
                          return Curry._1(onSubstitute.current.emit, /* Response */Caml_chrome_debugger.variant("Response", 1, [
                                        param[0],
                                        param[1]
                                      ]));
                        }
                      }));
        }), []);
  React.useEffect((function () {
          Curry._1(onResponse.emit, /* SetMode */Caml_chrome_debugger.variant("SetMode", 0, [mode]));
          return ;
        }), [mode]);
  React.useEffect((function () {
          return Curry._1(onClickLink.current.on, (function (ev) {
                        return Curry._1(onResponse.emit, /* Link */Caml_chrome_debugger.variant("Link", 1, [ev]));
                      }));
        }), []);
  React.useEffect((function () {
          return Curry._1(onSubstitute.current.on, (function (param) {
                        if (param.tag) {
                          console.log("YOYOYO");
                          return /* () */0;
                        } else {
                          return Curry._1(onResponse.emit, /* Substitute */Caml_chrome_debugger.variant("Substitute", 2, [
                                        param[0],
                                        param[1],
                                        param[2]
                                      ]));
                        }
                      }));
        }), []);
  var className = "gcl-panel native-key-bindings" + (
    match$3[0] ? " hidden" : ""
  );
  return React.createElement(Subst$Guacamole.Provider.make, Subst$Guacamole.Provider.makeProps(onSubstitute.current, React.createElement(Link$Guacamole.Provider.make, Link$Guacamole.Provider.makeProps(onClickLink.current, React.createElement("section", {
                              className: className,
                              tabIndex: -1
                            }, React.createElement(Header$Guacamole.make, {
                                  header: match[0],
                                  editorType: editorType,
                                  mode: mode,
                                  onChangeMode: onChangeMode
                                }), React.createElement(Body$Guacamole.make, {
                                  body: match$1[0]
                                })), /* () */0)), /* () */0));
}

var make = Panel;

exports.make = make;
/* react Not a pure module */

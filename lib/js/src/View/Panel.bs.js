// Generated by ReScript, PLEASE EDIT WITH CARE
'use strict';

var Curry = require("bs-platform/lib/js/curry.js");
var React = require("react");
var Belt_Array = require("bs-platform/lib/js/belt_Array.js");
var Chan$Guacamole = require("../Util/Chan.bs.js");
var Link$Guacamole = require("./Link.bs.js");
var Subst$Guacamole = require("./Subst.bs.js");
var Common$Guacamole = require("./Common.bs.js");
var DevPanel$Guacamole = require("./DevPanel.bs.js");
var GlobalProps$Guacamole = require("./GlobalProps.bs.js");
var ProofObligations$Guacamole = require("./ProofObligations.bs.js");

function Panel(Props) {
  var onRequest = Props.onRequest;
  var onResponse = Props.onResponse;
  var match = React.useState(function () {
        return false;
      });
  var setDevMode = match[1];
  var devMode = match[0];
  var match$1 = React.useState(function () {
        if (devMode) {
          return /* ViaTCP */1;
        } else {
          return /* ViaStdIO */0;
        }
      });
  var setConnectionMethod = match$1[1];
  var match$2 = React.useState(function () {
        return /* Disconnected */0;
      });
  var setConnectionStatus = match$2[1];
  var match$3 = React.useState(function () {
        return [
                0,
                [],
                []
              ];
      });
  var setDisplay = match$3[1];
  var match$4 = match$3[0];
  var id = match$4[0];
  var match$5 = React.useState(function () {
        return [];
      });
  var setErrorMessages = match$5[1];
  var errorMessages = match$5[0];
  var onClickLink = React.useRef(Chan$Guacamole.make(undefined));
  var onSubstitute = React.useRef(Chan$Guacamole.make(undefined));
  var onConnect = React.useRef(Chan$Guacamole.make(undefined));
  var onDisconnect = React.useRef(Chan$Guacamole.make(undefined));
  var onChangeConnectionMethod = React.useRef(Chan$Guacamole.make(undefined));
  React.useEffect((function () {
          Chan$Guacamole.emit(onResponse, /* Initialized */3);
          
        }), []);
  React.useEffect((function () {
          return Chan$Guacamole.on(onRequest, (function (req) {
                        switch (req.TAG | 0) {
                          case /* UpdateDevMode */0 :
                              var devMode = req._0;
                              return Curry._1(setDevMode, (function (param) {
                                            return devMode;
                                          }));
                          case /* UpdateConnectionStatus */1 :
                              var status = req._0;
                              return Curry._1(setConnectionStatus, (function (param) {
                                            return status;
                                          }));
                          case /* UpdateConnectionMethod */2 :
                              var method = req._0;
                              return Curry._1(setConnectionMethod, (function (param) {
                                            return method;
                                          }));
                          case /* Substitute */3 :
                              return Chan$Guacamole.emit(onSubstitute.current, {
                                          TAG: 1,
                                          _0: req._0,
                                          _1: req._1,
                                          [Symbol.for("name")]: "Response"
                                        });
                          case /* SetErrorMessages */4 :
                              var msgs = req._0;
                              return Curry._1(setErrorMessages, (function (param) {
                                            return msgs;
                                          }));
                          case /* Display */5 :
                              var props = req._2;
                              var pos = req._1;
                              var id = req._0;
                              return Curry._1(setDisplay, (function (param) {
                                            return [
                                                    id,
                                                    pos,
                                                    props
                                                  ];
                                          }));
                          
                        }
                      }));
        }), []);
  React.useEffect((function () {
          return Chan$Guacamole.on(onClickLink.current, (function (ev) {
                        return Chan$Guacamole.emit(onResponse, {
                                    TAG: 1,
                                    _0: ev,
                                    [Symbol.for("name")]: "Link"
                                  });
                      }));
        }), []);
  React.useEffect((function () {
          return Chan$Guacamole.on(onSubstitute.current, (function (x) {
                        if (x.TAG === /* Request */0) {
                          return Chan$Guacamole.emit(onResponse, {
                                      TAG: 2,
                                      _0: x._0,
                                      _1: x._1,
                                      _2: x._2,
                                      [Symbol.for("name")]: "Substitute"
                                    });
                        }
                        
                      }));
        }), []);
  React.useEffect((function () {
          return Chan$Guacamole.on(onDisconnect.current, (function (param) {
                        return Chan$Guacamole.emit(onResponse, /* Disconnect */1);
                      }));
        }), []);
  React.useEffect((function () {
          return Chan$Guacamole.on(onConnect.current, (function (param) {
                        return Chan$Guacamole.emit(onResponse, /* Connect */0);
                      }));
        }), []);
  React.useEffect((function () {
          return Chan$Guacamole.on(onChangeConnectionMethod.current, (function (method) {
                        return Chan$Guacamole.emit(onResponse, {
                                    TAG: 0,
                                    _0: method,
                                    [Symbol.for("name")]: "ChangeConnectionMethod"
                                  });
                      }));
        }), []);
  var onChangeMethod = function (method) {
    Curry._1(setConnectionMethod, (function (param) {
            return method;
          }));
    return Chan$Guacamole.emit(onChangeConnectionMethod.current, method);
  };
  var onConnect$1 = function (param) {
    return Chan$Guacamole.emit(onConnect.current, undefined);
  };
  var onDisconnect$1 = function (param) {
    return Chan$Guacamole.emit(onDisconnect.current, undefined);
  };
  var onExport = function (param) {
    return Chan$Guacamole.emit(onResponse, /* ExportProofObligations */2);
  };
  var errorMessagesBlock = errorMessages.length === 0 ? React.createElement(React.Fragment, undefined) : React.createElement("div", {
          className: "gcl-global-props"
        }, React.createElement("h2", undefined, "Error Messages"), React.createElement("ul", {
              className: "gcl-global-property-list"
            }, Belt_Array.mapWithIndex(errorMessages, (function (i, param) {
                    return React.createElement(Common$Guacamole.Item.make, {
                                header: param[0],
                                body: param[1],
                                key: String(i)
                              });
                  }))));
  return React.createElement(Subst$Guacamole.Provider.make, Subst$Guacamole.Provider.makeProps(onSubstitute.current, React.createElement(Link$Guacamole.Provider.make, Link$Guacamole.Provider.makeProps(onClickLink.current, React.createElement("section", {
                              className: "gcl-panel native-key-bindings",
                              tabIndex: -1
                            }, React.createElement(DevPanel$Guacamole.make, {
                                  devMode: devMode,
                                  method: match$1[0],
                                  status: match$2[0],
                                  onConnect: onConnect$1,
                                  onDisconnect: onDisconnect$1,
                                  onChangeMethod: onChangeMethod
                                }), errorMessagesBlock, React.createElement(ProofObligations$Guacamole.make, {
                                  id: id,
                                  pos: match$4[1],
                                  onExport: onExport
                                }), React.createElement(GlobalProps$Guacamole.make, {
                                  id: id,
                                  props: match$4[2]
                                })), undefined)), undefined));
}

var make = Panel;

exports.make = make;
/* react Not a pure module */

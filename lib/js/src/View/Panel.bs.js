// Generated by ReScript, PLEASE EDIT WITH CARE
'use strict';

var Curry = require("rescript/lib/js/curry.js");
var React = require("react");
var Belt_Array = require("rescript/lib/js/belt_Array.js");
var Chan$Guabao = require("../Util/Chan.bs.js");
var Link$Guabao = require("./Link.bs.js");
var ReqID$Guabao = require("./ReqID.bs.js");
var Status$Guabao = require("./Status.bs.js");
var Substitution$Guabao = require("./Substitution.bs.js");
var Element__Section$Guabao = require("./Element/Element__Section.bs.js");

function Panel(Props) {
  var onRequest = Props.onRequest;
  var onResponse = Props.onResponse;
  var match = React.useState(function () {
        return "Disconnected";
      });
  var setConnectionStatus = match[1];
  var match$1 = React.useState(function () {
        return [
                0,
                []
              ];
      });
  var setDisplay = match$1[1];
  var match$2 = match$1[0];
  var sections = match$2[1];
  React.useEffect((function () {
          Chan$Guabao.emit(onResponse, /* Initialized */1);
          
        }), []);
  var substitutionChan = React.useRef(Chan$Guabao.make(undefined));
  React.useEffect((function () {
          return Chan$Guabao.on(substitutionChan.current, (function ($$event) {
                        if ($$event.TAG === /* SubstReq */0) {
                          return Chan$Guabao.emit(onResponse, {
                                      TAG: /* Substitute */2,
                                      _0: $$event._0
                                    });
                        }
                        
                      }));
        }), []);
  React.useEffect((function () {
          return Chan$Guabao.on(onRequest, (function (req) {
                        switch (req.TAG | 0) {
                          case /* UpdateConnectionStatus */0 :
                              var status = req._0;
                              return Curry._1(setConnectionStatus, (function (param) {
                                            return status;
                                          }));
                          case /* Substitute */1 :
                              return Chan$Guabao.emit(substitutionChan.current, {
                                          TAG: /* SubstRes */1,
                                          _0: req._0,
                                          _1: req._1
                                        });
                          case /* Display */2 :
                              var blocks = req._1;
                              var id = req._0;
                              return Curry._1(setDisplay, (function (param) {
                                            return [
                                                    id,
                                                    blocks
                                                  ];
                                          }));
                          
                        }
                      }));
        }), []);
  var onClickLink = React.useRef(Chan$Guabao.make(undefined));
  React.useEffect((function () {
          return Chan$Guabao.on(onClickLink.current, (function (ev) {
                        return Chan$Guabao.emit(onResponse, {
                                    TAG: /* Link */0,
                                    _0: ev
                                  });
                      }));
        }), []);
  var onInsertAnchor = function (hash) {
    return Chan$Guabao.emit(onResponse, {
                TAG: /* InsertAnchor */1,
                _0: hash
              });
  };
  var onSolve = function (param) {
    return Chan$Guabao.emit(onResponse, /* Solve */0);
  };
  var sections$1 = sections.length === 0 ? React.createElement(React.Fragment, undefined) : React.createElement("ul", undefined, Belt_Array.mapWithIndex(sections, (function (i, value) {
                return React.createElement(Element__Section$Guabao.make, {
                            value: value,
                            onInsertAnchor: onInsertAnchor,
                            key: String(i)
                          });
              })));
  return React.createElement(Link$Guabao.Provider.make, Link$Guabao.Provider.makeProps(onClickLink.current, React.createElement(Substitution$Guabao.Provider.make, Substitution$Guabao.Provider.makeProps(substitutionChan.current, React.createElement(ReqID$Guabao.Provider.make, ReqID$Guabao.Provider.makeProps(match$2[0], React.createElement("section", {
                                      className: "gcl-panel native-key-bindings",
                                      tabIndex: -1
                                    }, React.createElement(Status$Guabao.make, {
                                          status: match[0],
                                          onSolve: onSolve
                                        }), sections$1), undefined)), undefined)), undefined));
}

var make = Panel;

exports.make = make;
/* react Not a pure module */

// Generated by BUCKLESCRIPT, PLEASE EDIT WITH CARE
'use strict';

var Curry = require("bs-platform/lib/js/curry.js");
var Vscode = require("vscode");
var Caml_obj = require("bs-platform/lib/js/caml_obj.js");
var Belt_Array = require("bs-platform/lib/js/belt_Array.js");
var Belt_Option = require("bs-platform/lib/js/belt_Option.js");

function make(editor, context) {
  return {
          editor: editor,
          context: context
        };
}

function getExtensionPath(self) {
  return self.context.extensionPath;
}

function editorFileName(editor) {
  return editor.document.fileName;
}

function addToSubscriptions(disposable, context) {
  context.subscriptions.push(disposable);
  return /* () */0;
}

function onDidCloseEditor(callback) {
  return Vscode.workspace.onDidCloseTextDocument((function (textDoc) {
                return Belt_Option.forEach(textDoc, (function (textDoc) {
                              return Curry._1(callback, textDoc.fileName);
                            }));
              }));
}

function onDidChangeFileName(callback) {
  return Vscode.workspace.onDidRenameFiles((function ($$event) {
                return Belt_Option.forEach(Belt_Option.map($$event, (function (prim) {
                                  return prim.files;
                                })), (function (files) {
                              return Belt_Array.forEach(files, (function (file) {
                                            return Curry._2(callback, file.oldUri.path, file.newUri.path);
                                          }));
                            }));
              }));
}

function onDidChangeActivation(callback) {
  var previous = {
    contents: Belt_Option.map(Vscode.window.activeTextEditor, editorFileName)
  };
  return Vscode.window.onDidChangeActiveTextEditor((function (next) {
                var next$1 = Belt_Option.map(next, editorFileName);
                if (Caml_obj.caml_notequal(next$1, previous.contents)) {
                  Curry._2(callback, previous.contents, next$1);
                  previous.contents = next$1;
                  return /* () */0;
                } else {
                  return 0;
                }
              }));
}

function registerCommand(name, callback) {
  return Vscode.commands.registerCommand("extension." + name, (function (param) {
                return Belt_Option.forEach(Vscode.window.activeTextEditor, callback);
              }));
}

function setGCLPath(path) {
  return Vscode.workspace.getConfiguration("guacamole", undefined).update("gclPath", path, 1, undefined);
}

function getGCLPath(param) {
  return Vscode.workspace.getConfiguration("guacamole", undefined).get("gclPath");
}

var Impl = {
  make: make,
  getExtensionPath: getExtensionPath,
  editorFileName: editorFileName,
  onDidChangeFileName: onDidChangeFileName,
  onDidChangeActivation: onDidChangeActivation,
  onDidCloseEditor: onDidCloseEditor,
  addToSubscriptions: addToSubscriptions,
  registerCommand: registerCommand,
  getGCLPath: getGCLPath,
  setGCLPath: setGCLPath
};

exports.Impl = Impl;
exports.make = make;
exports.getExtensionPath = getExtensionPath;
exports.editorFileName = editorFileName;
exports.onDidChangeFileName = onDidChangeFileName;
exports.onDidChangeActivation = onDidChangeActivation;
exports.onDidCloseEditor = onDidCloseEditor;
exports.addToSubscriptions = addToSubscriptions;
exports.registerCommand = registerCommand;
exports.getGCLPath = getGCLPath;
exports.setGCLPath = setGCLPath;
/* vscode Not a pure module */

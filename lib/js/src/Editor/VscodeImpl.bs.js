// Generated by BUCKLESCRIPT, PLEASE EDIT WITH CARE
'use strict';

var Curry = require("bs-platform/lib/js/curry.js");
var Vscode = require("vscode");
var Caml_obj = require("bs-platform/lib/js/caml_obj.js");
var Belt_Array = require("bs-platform/lib/js/belt_Array.js");
var Belt_Option = require("bs-platform/lib/js/belt_Option.js");
var Caml_chrome_debugger = require("bs-platform/lib/js/caml_chrome_debugger.js");
var Impl__View$Guacamole = require("./Impl__View.bs.js");

function getExtensionPath(context) {
  return context.extensionPath;
}

function getFileName(editor) {
  return editor.document.fileName;
}

function save(editor) {
  return editor.document.save();
}

function toPoint(param) {
  return new Position(param[1] - 1 | 0, param[2] - 1 | 0);
}

function fromPoint(filepath, point) {
  return /* Pos */Caml_chrome_debugger.simpleVariant("Pos", [
            filepath,
            point.line + 1 | 0,
            point.character + 1 | 0
          ]);
}

function toRange(param) {
  if (param) {
    var match = param[1];
    return new Range(toPoint(param[0]), new Position(match[1] - 1 | 0, match[2]));
  } else {
    return new Range(new Position(0, 0), new Position(0, 0));
  }
}

function fromRange(filepath, range) {
  var start = range.start;
  var end_ = range.end;
  return /* Loc */Caml_chrome_debugger.simpleVariant("Loc", [
            /* Pos */Caml_chrome_debugger.simpleVariant("Pos", [
                filepath,
                start.line + 1 | 0,
                start.character + 1 | 0
              ]),
            /* Pos */Caml_chrome_debugger.simpleVariant("Pos", [
                filepath,
                end_.line + 1 | 0,
                end_.character
              ])
          ]);
}

function addToSubscriptions(disposable, context) {
  context.subscriptions.push(disposable);
  return /* () */0;
}

function onDidCloseEditor(callback) {
  return Vscode.workspace.onDidCloseTextDocument((function (textDoc) {
                return Belt_Option.forEach(textDoc, (function (textDoc) {
                              return Curry._1(callback, textDoc.fileName);
                            }));
              }));
}

function onDidChangeFileName(callback) {
  return Vscode.workspace.onDidRenameFiles((function ($$event) {
                return Belt_Option.forEach(Belt_Option.map($$event, (function (prim) {
                                  return prim.files;
                                })), (function (files) {
                              return Belt_Array.forEach(files, (function (file) {
                                            return Curry._2(callback, file.oldUri.path, file.newUri.path);
                                          }));
                            }));
              }));
}

function onDidChangeActivation(callback) {
  var previous = {
    contents: Belt_Option.flatMap(Vscode.window.activeTextEditor, getFileName)
  };
  return Vscode.window.onDidChangeActiveTextEditor((function (next) {
                var next$1 = Belt_Option.flatMap(next, getFileName);
                if (Caml_obj.caml_notequal(next$1, previous.contents)) {
                  Curry._2(callback, previous.contents, next$1);
                  previous.contents = next$1;
                  return /* () */0;
                } else {
                  return 0;
                }
              }));
}

function registerCommand(name, callback) {
  return Vscode.commands.registerCommand("extension." + name, (function (param) {
                return Belt_Option.forEach(Vscode.window.activeTextEditor, (function (editor) {
                              return Belt_Option.forEach(editor.document.fileName, (function (fileName) {
                                            var partial_arg = /\.gcl$/i;
                                            var isGCL = function (param) {
                                              return partial_arg.test(param);
                                            };
                                            if (Curry._1(isGCL, fileName)) {
                                              return Curry._1(callback, editor);
                                            } else {
                                              return 0;
                                            }
                                          }));
                            }));
              }));
}

function setGCLPath(path) {
  return Vscode.workspace.getConfiguration("guacamole", undefined).update("gclPath", path, 1, undefined);
}

function getGCLPath(param) {
  return Vscode.workspace.getConfiguration("guacamole", undefined).get("gclPath");
}

function make(param, param$1) {
  return Impl__View$Guacamole.make(getExtensionPath, param, param$1);
}

var Impl_Config = {
  getGCLPath: getGCLPath,
  setGCLPath: setGCLPath
};

var Impl_View = {
  make: make,
  destroy: Impl__View$Guacamole.destroy,
  show: Impl__View$Guacamole.show,
  hide: Impl__View$Guacamole.hide,
  send: Impl__View$Guacamole.send,
  recv: Impl__View$Guacamole.recv
};

var Impl = {
  editorType: /* VsCode */1,
  getExtensionPath: getExtensionPath,
  getFileName: getFileName,
  save: save,
  toPoint: toPoint,
  fromPoint: fromPoint,
  toRange: toRange,
  fromRange: fromRange,
  onDidChangeFileName: onDidChangeFileName,
  onDidChangeActivation: onDidChangeActivation,
  onDidCloseEditor: onDidCloseEditor,
  registerCommand: registerCommand,
  addToSubscriptions: addToSubscriptions,
  Config: Impl_Config,
  View: Impl_View
};

exports.Impl = Impl;
/* vscode Not a pure module */

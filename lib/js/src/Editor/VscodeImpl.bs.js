// Generated by BUCKLESCRIPT, PLEASE EDIT WITH CARE
'use strict';

var Path = require("path");
var Curry = require("bs-platform/lib/js/curry.js");
var Vscode = require("vscode");
var Js_math = require("bs-platform/lib/js/js_math.js");
var Caml_obj = require("bs-platform/lib/js/caml_obj.js");
var Belt_Array = require("bs-platform/lib/js/belt_Array.js");
var Belt_Option = require("bs-platform/lib/js/belt_Option.js");
var Caml_module = require("bs-platform/lib/js/caml_module.js");
var Vscode$Guacamole = require("../Vscode.bs.js");
var Caml_chrome_debugger = require("bs-platform/lib/js/caml_chrome_debugger.js");

function View(Editor) {
  var make = function (context, editor) {
    var html = function (distPath, styleUri, scriptUri) {
      var text = "";
      var charaterSet = "ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789";
      var cardinality = charaterSet.length;
      for(var _for = 0; _for <= 32; ++_for){
        text = text + charaterSet.charAt(Js_math.floor(Math.random() * cardinality));
      }
      var nonce = text;
      var styleUri$1 = Vscode.Uri.file(Path.join(distPath, styleUri)).with(Vscode$Guacamole.Uri.makeChange(undefined, undefined, undefined, undefined, "vscode-resource", /* () */0));
      var scriptUri$1 = Vscode.Uri.file(Path.join(distPath, scriptUri)).with(Vscode$Guacamole.Uri.makeChange(undefined, undefined, undefined, undefined, "vscode-resource", /* () */0));
      var metaContent = "default-src 'none'; img-src vscode-resource: https:; script-src 'nonce-" + (nonce + "';style-src vscode-resource: 'unsafe-inline' http: https: data:;");
      return "\n  <!DOCTYPE html>\n        <html lang=\"en\">\n        <head>\n          <meta charset=\"utf-8\">\n          <meta name=\"viewport\" content=\"width=device-width,initial-scale=1,shrink-to-fit=no\">\n          <meta name=\"theme-color\" content=\"#000000\">\n          <title>React App</title>\n          <link rel=\"stylesheet\" type=\"text/css\" href=\"" + (String(styleUri$1) + ("\">\n          <meta http-equiv=\"Content-Security-Policy\" content=\"" + (String(metaContent) + ("\">\n        </head>\n        <body>\n          <noscript>You need to enable JavaScript to run this app.</noscript>\n          <div id=\"root\"></div>\n          <script nonce=\"" + (String(nonce) + ("\" src=\"" + (String(scriptUri$1) + "\"></script>\n        </body>\n        </html>\n  ")))))));
    };
    var createPanel = function (context, editor) {
      var distPath = Path.join(Curry._1(Editor.getExtensionPath, context), "dist");
      var fileName = Path.basename(editor.document.fileName, ".gcl");
      var panel = Vscode.window.createWebviewPanel("panel", "GCL [" + (fileName + "]"), {
            preserveFocus: true,
            viewColumn: 3
          }, Vscode$Guacamole.WebviewAndWebviewPanelOptions.make(undefined, true, [Vscode.Uri.file(distPath)], undefined, undefined, undefined, /* () */0));
      context.subscriptions.push(panel.webview.onDidReceiveMessage((function (message) {
                  console.log(message);
                  return /* () */0;
                })));
      panel.onDidDispose((function (param) {
              console.log("[ view ][ destroyed ]");
              return /* () */0;
            }));
      panel.webview.html = html(distPath, "style.css", "bundled-view.js");
      return panel;
    };
    var moveToBottom = function (param) {
      return Vscode.commands.executeCommand("vscode.setEditorLayout", {
                  orientation: 1,
                  groups: [
                    Curry._1(Vscode$Guacamole.Commands.Layout.sized, {
                          groups: [Vscode$Guacamole.Commands.Layout.simple],
                          size: 0.8
                        }),
                    Curry._1(Vscode$Guacamole.Commands.Layout.sized, {
                          groups: [Vscode$Guacamole.Commands.Layout.simple],
                          size: 0.2
                        })
                  ]
                });
    };
    var panel = createPanel(context, editor);
    moveToBottom(/* () */0);
    return panel;
  };
  var destroy = function (view) {
    view.dispose();
    return /* () */0;
  };
  var show = function (view) {
    return Vscode$Guacamole.WebviewPanel.reveal(view, undefined, true, /* () */0);
  };
  var hide = function (_view) {
    return /* () */0;
  };
  var send = function (_view, _req) {
    return /* () */0;
  };
  var recv = function (_view, _callback) {
    return /* () */0;
  };
  return {
          make: make,
          destroy: destroy,
          show: show,
          hide: hide,
          send: send,
          recv: recv
        };
}

var Impl = Caml_module.init_mod(/* tuple */[
      "VscodeImpl.re",
      140,
      76
    ], /* Module */Caml_chrome_debugger.variant("Module", 0, [[
          /* tuple */[
            /* Function */0,
            "getExtensionPath"
          ],
          /* tuple */[
            /* Function */0,
            "getFileName"
          ],
          /* tuple */[
            /* Function */0,
            "toPoint"
          ],
          /* tuple */[
            /* Function */0,
            "fromPoint"
          ],
          /* tuple */[
            /* Function */0,
            "toRange"
          ],
          /* tuple */[
            /* Function */0,
            "fromRange"
          ],
          /* tuple */[
            /* Function */0,
            "onDidChangeFileName"
          ],
          /* tuple */[
            /* Function */0,
            "onDidChangeActivation"
          ],
          /* tuple */[
            /* Function */0,
            "onDidCloseEditor"
          ],
          /* tuple */[
            /* Function */0,
            "registerCommand"
          ],
          /* tuple */[
            /* Function */0,
            "addToSubscriptions"
          ],
          /* tuple */[
            /* Module */Caml_chrome_debugger.variant("Module", 0, [[
                  /* tuple */[
                    /* Function */0,
                    "getGCLPath"
                  ],
                  /* tuple */[
                    /* Function */0,
                    "setGCLPath"
                  ]
                ]]),
            "Config"
          ],
          /* tuple */[
            /* Module */Caml_chrome_debugger.variant("Module", 0, [[
                  /* tuple */[
                    /* Function */0,
                    "make"
                  ],
                  /* tuple */[
                    /* Function */0,
                    "destroy"
                  ],
                  /* tuple */[
                    /* Function */0,
                    "show"
                  ],
                  /* tuple */[
                    /* Function */0,
                    "hide"
                  ],
                  /* tuple */[
                    /* Function */0,
                    "send"
                  ],
                  /* tuple */[
                    /* Function */0,
                    "recv"
                  ]
                ]]),
            "View"
          ]
        ]]));

function getExtensionPath(context) {
  return context.extensionPath;
}

function getFileName(editor) {
  return editor.document.fileName;
}

function toPoint(param) {
  return new Position(param[1] - 1 | 0, param[2] - 1 | 0);
}

function fromPoint(filepath, point) {
  return /* Pos */Caml_chrome_debugger.simpleVariant("Pos", [
            filepath,
            point.line + 1 | 0,
            point.character + 1 | 0
          ]);
}

function toRange(param) {
  if (param) {
    var match = param[1];
    return new Range(toPoint(param[0]), new Position(match[1] - 1 | 0, match[2]));
  } else {
    return new Range(new Position(0, 0), new Position(0, 0));
  }
}

function fromRange(filepath, range) {
  var start = range.start;
  var end_ = range.end;
  return /* Loc */Caml_chrome_debugger.simpleVariant("Loc", [
            /* Pos */Caml_chrome_debugger.simpleVariant("Pos", [
                filepath,
                start.line + 1 | 0,
                start.character + 1 | 0
              ]),
            /* Pos */Caml_chrome_debugger.simpleVariant("Pos", [
                filepath,
                end_.line + 1 | 0,
                end_.character
              ])
          ]);
}

function addToSubscriptions(disposable, context) {
  context.subscriptions.push(disposable);
  return /* () */0;
}

function onDidCloseEditor(callback) {
  return Vscode.workspace.onDidCloseTextDocument((function (textDoc) {
                return Belt_Option.forEach(textDoc, (function (textDoc) {
                              return Curry._1(callback, textDoc.fileName);
                            }));
              }));
}

function onDidChangeFileName(callback) {
  return Vscode.workspace.onDidRenameFiles((function ($$event) {
                return Belt_Option.forEach(Belt_Option.map($$event, (function (prim) {
                                  return prim.files;
                                })), (function (files) {
                              return Belt_Array.forEach(files, (function (file) {
                                            return Curry._2(callback, file.oldUri.path, file.newUri.path);
                                          }));
                            }));
              }));
}

function onDidChangeActivation(callback) {
  var previous = {
    contents: Belt_Option.map(Vscode.window.activeTextEditor, getFileName)
  };
  return Vscode.window.onDidChangeActiveTextEditor((function (next) {
                var next$1 = Belt_Option.map(next, getFileName);
                if (Caml_obj.caml_notequal(next$1, previous.contents)) {
                  Curry._2(callback, previous.contents, next$1);
                  previous.contents = next$1;
                  return /* () */0;
                } else {
                  return 0;
                }
              }));
}

function registerCommand(name, callback) {
  return Vscode.commands.registerCommand("extension." + name, (function (param) {
                return Belt_Option.forEach(Vscode.window.activeTextEditor, callback);
              }));
}

function setGCLPath(path) {
  return Vscode.workspace.getConfiguration("guacamole", undefined).update("gclPath", path, 1, undefined);
}

function getGCLPath(param) {
  return Vscode.workspace.getConfiguration("guacamole", undefined).get("gclPath");
}

function make(context, editor) {
  var html = function (distPath, styleUri, scriptUri) {
    var text = "";
    var charaterSet = "ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789";
    var cardinality = charaterSet.length;
    for(var _for = 0; _for <= 32; ++_for){
      text = text + charaterSet.charAt(Js_math.floor(Math.random() * cardinality));
    }
    var nonce = text;
    var styleUri$1 = Vscode.Uri.file(Path.join(distPath, styleUri)).with(Vscode$Guacamole.Uri.makeChange(undefined, undefined, undefined, undefined, "vscode-resource", /* () */0));
    var scriptUri$1 = Vscode.Uri.file(Path.join(distPath, scriptUri)).with(Vscode$Guacamole.Uri.makeChange(undefined, undefined, undefined, undefined, "vscode-resource", /* () */0));
    var metaContent = "default-src 'none'; img-src vscode-resource: https:; script-src 'nonce-" + (nonce + "';style-src vscode-resource: 'unsafe-inline' http: https: data:;");
    return "\n  <!DOCTYPE html>\n        <html lang=\"en\">\n        <head>\n          <meta charset=\"utf-8\">\n          <meta name=\"viewport\" content=\"width=device-width,initial-scale=1,shrink-to-fit=no\">\n          <meta name=\"theme-color\" content=\"#000000\">\n          <title>React App</title>\n          <link rel=\"stylesheet\" type=\"text/css\" href=\"" + (String(styleUri$1) + ("\">\n          <meta http-equiv=\"Content-Security-Policy\" content=\"" + (String(metaContent) + ("\">\n        </head>\n        <body>\n          <noscript>You need to enable JavaScript to run this app.</noscript>\n          <div id=\"root\"></div>\n          <script nonce=\"" + (String(nonce) + ("\" src=\"" + (String(scriptUri$1) + "\"></script>\n        </body>\n        </html>\n  ")))))));
  };
  var createPanel = function (context, editor) {
    var distPath = Path.join(Curry._1(Impl.getExtensionPath, context), "dist");
    var fileName = Path.basename(editor.document.fileName, ".gcl");
    var panel = Vscode.window.createWebviewPanel("panel", "GCL [" + (fileName + "]"), {
          preserveFocus: true,
          viewColumn: 3
        }, Vscode$Guacamole.WebviewAndWebviewPanelOptions.make(undefined, true, [Vscode.Uri.file(distPath)], undefined, undefined, undefined, /* () */0));
    context.subscriptions.push(panel.webview.onDidReceiveMessage((function (message) {
                console.log(message);
                return /* () */0;
              })));
    panel.onDidDispose((function (param) {
            console.log("[ view ][ destroyed ]");
            return /* () */0;
          }));
    panel.webview.html = html(distPath, "style.css", "bundled-view.js");
    return panel;
  };
  var moveToBottom = function (param) {
    return Vscode.commands.executeCommand("vscode.setEditorLayout", {
                orientation: 1,
                groups: [
                  Curry._1(Vscode$Guacamole.Commands.Layout.sized, {
                        groups: [Vscode$Guacamole.Commands.Layout.simple],
                        size: 0.8
                      }),
                  Curry._1(Vscode$Guacamole.Commands.Layout.sized, {
                        groups: [Vscode$Guacamole.Commands.Layout.simple],
                        size: 0.2
                      })
                ]
              });
  };
  var panel = createPanel(context, editor);
  moveToBottom(/* () */0);
  return panel;
}

function destroy(view) {
  view.dispose();
  return /* () */0;
}

function show(view) {
  return Vscode$Guacamole.WebviewPanel.reveal(view, undefined, true, /* () */0);
}

function hide(_view) {
  return /* () */0;
}

function send(_view, _req) {
  return /* () */0;
}

function recv(_view, _callback) {
  return /* () */0;
}

var View$1 = {
  make: make,
  destroy: destroy,
  show: show,
  hide: hide,
  send: send,
  recv: recv
};

Caml_module.update_mod(/* Module */Caml_chrome_debugger.variant("Module", 0, [[
          /* tuple */[
            /* Function */0,
            "getExtensionPath"
          ],
          /* tuple */[
            /* Function */0,
            "getFileName"
          ],
          /* tuple */[
            /* Function */0,
            "toPoint"
          ],
          /* tuple */[
            /* Function */0,
            "fromPoint"
          ],
          /* tuple */[
            /* Function */0,
            "toRange"
          ],
          /* tuple */[
            /* Function */0,
            "fromRange"
          ],
          /* tuple */[
            /* Function */0,
            "onDidChangeFileName"
          ],
          /* tuple */[
            /* Function */0,
            "onDidChangeActivation"
          ],
          /* tuple */[
            /* Function */0,
            "onDidCloseEditor"
          ],
          /* tuple */[
            /* Function */0,
            "registerCommand"
          ],
          /* tuple */[
            /* Function */0,
            "addToSubscriptions"
          ],
          /* tuple */[
            /* Module */Caml_chrome_debugger.variant("Module", 0, [[
                  /* tuple */[
                    /* Function */0,
                    "getGCLPath"
                  ],
                  /* tuple */[
                    /* Function */0,
                    "setGCLPath"
                  ]
                ]]),
            "Config"
          ],
          /* tuple */[
            /* Module */Caml_chrome_debugger.variant("Module", 0, [[
                  /* tuple */[
                    /* Function */0,
                    "make"
                  ],
                  /* tuple */[
                    /* Function */0,
                    "destroy"
                  ],
                  /* tuple */[
                    /* Function */0,
                    "show"
                  ],
                  /* tuple */[
                    /* Function */0,
                    "hide"
                  ],
                  /* tuple */[
                    /* Function */0,
                    "send"
                  ],
                  /* tuple */[
                    /* Function */0,
                    "recv"
                  ]
                ]]),
            "View"
          ]
        ]]), Impl, {
      getExtensionPath: getExtensionPath,
      getFileName: getFileName,
      toPoint: toPoint,
      fromPoint: fromPoint,
      toRange: toRange,
      fromRange: fromRange,
      onDidChangeFileName: onDidChangeFileName,
      onDidChangeActivation: onDidChangeActivation,
      onDidCloseEditor: onDidCloseEditor,
      registerCommand: registerCommand,
      addToSubscriptions: addToSubscriptions,
      Config: {
        getGCLPath: getGCLPath,
        setGCLPath: setGCLPath
      },
      View: View$1
    });

exports.View = View;
exports.Impl = Impl;
/* Impl Not a pure module */

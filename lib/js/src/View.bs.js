// Generated by BUCKLESCRIPT, PLEASE EDIT WITH CARE
'use strict';

var Curry = require("bs-platform/lib/js/curry.js");
var Json_decode = require("@glennsl/bs-json/lib/js/src/Json_decode.bs.js");
var Json_encode = require("@glennsl/bs-json/lib/js/src/Json_encode.bs.js");
var GCL$Guacamole = require("./GCL.bs.js");
var Util$Guacamole = require("./Util/Util.bs.js");
var Response$Guacamole = require("./Response.bs.js");
var Caml_chrome_debugger = require("bs-platform/lib/js/caml_chrome_debugger.js");

var decode = Util$Guacamole.Decode.sum((function (tag) {
        switch (tag) {
          case "Error" :
              return /* Contents */Caml_chrome_debugger.variant("Contents", 0, [(function (json) {
                            return /* Error */Caml_chrome_debugger.variant("Error", 1, [Json_decode.string(json)]);
                          })]);
          case "Loading" :
              return /* Contents */Caml_chrome_debugger.variant("Contents", 0, [(function (param) {
                            return /* Loading */0;
                          })]);
          case "Plain" :
              return /* Contents */Caml_chrome_debugger.variant("Contents", 0, [(function (json) {
                            return /* Plain */Caml_chrome_debugger.variant("Plain", 0, [Json_decode.string(json)]);
                          })]);
          default:
            throw [
                  Json_decode.DecodeError,
                  "[Request.Header] Unknown constructor: " + tag
                ];
        }
      }));

function encode(param) {
  if (typeof param === "number") {
    return Json_encode.object_(/* :: */Caml_chrome_debugger.simpleVariant("::", [
                  /* tuple */[
                    "tag",
                    "Loading"
                  ],
                  /* [] */0
                ]));
  } else if (param.tag) {
    return Json_encode.object_(/* :: */Caml_chrome_debugger.simpleVariant("::", [
                  /* tuple */[
                    "tag",
                    "Error"
                  ],
                  /* :: */Caml_chrome_debugger.simpleVariant("::", [
                      /* tuple */[
                        "contents",
                        param[0]
                      ],
                      /* [] */0
                    ])
                ]));
  } else {
    return Json_encode.object_(/* :: */Caml_chrome_debugger.simpleVariant("::", [
                  /* tuple */[
                    "tag",
                    "Plain"
                  ],
                  /* :: */Caml_chrome_debugger.simpleVariant("::", [
                      /* tuple */[
                        "contents",
                        param[0]
                      ],
                      /* [] */0
                    ])
                ]));
  }
}

var Header = {
  decode: decode,
  encode: encode
};

var decode$1 = Util$Guacamole.Decode.sum((function (tag) {
        switch (tag) {
          case "Nothing" :
              return /* Contents */Caml_chrome_debugger.variant("Contents", 0, [(function (param) {
                            return /* Nothing */0;
                          })]);
          case "Plain" :
              return /* Contents */Caml_chrome_debugger.variant("Contents", 0, [(function (json) {
                            return /* Plain */Caml_chrome_debugger.variant("Plain", 1, [Json_decode.string(json)]);
                          })]);
          case "ProofObligations" :
              return /* Contents */Caml_chrome_debugger.variant("Contents", 0, [(function (json) {
                            return /* ProofObligations */Caml_chrome_debugger.variant("ProofObligations", 0, [Json_decode.array(Response$Guacamole.ProofObligation.decode, json)]);
                          })]);
          default:
            throw [
                  Json_decode.DecodeError,
                  "[Request.Header] Unknown constructor: " + tag
                ];
        }
      }));

function encode$1(param) {
  if (typeof param === "number") {
    return Json_encode.object_(/* :: */Caml_chrome_debugger.simpleVariant("::", [
                  /* tuple */[
                    "tag",
                    "Nothing"
                  ],
                  /* [] */0
                ]));
  } else if (param.tag) {
    return Json_encode.object_(/* :: */Caml_chrome_debugger.simpleVariant("::", [
                  /* tuple */[
                    "tag",
                    "Plain"
                  ],
                  /* :: */Caml_chrome_debugger.simpleVariant("::", [
                      /* tuple */[
                        "contents",
                        param[0]
                      ],
                      /* [] */0
                    ])
                ]));
  } else {
    return Json_encode.object_(/* :: */Caml_chrome_debugger.simpleVariant("::", [
                  /* tuple */[
                    "tag",
                    "ProofObligations"
                  ],
                  /* :: */Caml_chrome_debugger.simpleVariant("::", [
                      /* tuple */[
                        "contents",
                        Json_encode.array(Response$Guacamole.ProofObligation.encode, param[0])
                      ],
                      /* [] */0
                    ])
                ]));
  }
}

var Body = {
  decode: decode$1,
  encode: encode$1
};

var decode$2 = Util$Guacamole.Decode.sum((function (tag) {
        switch (tag) {
          case "Display" :
              return /* Contents */Caml_chrome_debugger.variant("Contents", 0, [(function (param) {
                            return Json_decode.map((function (param) {
                                          return /* Display */Caml_chrome_debugger.simpleVariant("Display", [
                                                    param[0],
                                                    param[1]
                                                  ]);
                                        }), (function (param) {
                                          return Json_decode.pair(decode, decode$1, param);
                                        }), param);
                          })]);
          case "Hide" :
              return /* Contents */Caml_chrome_debugger.variant("Contents", 0, [(function (param) {
                            return /* Hide */1;
                          })]);
          case "Show" :
              return /* Contents */Caml_chrome_debugger.variant("Contents", 0, [(function (param) {
                            return /* Show */0;
                          })]);
          default:
            throw [
                  Json_decode.DecodeError,
                  "[Request] Unknown constructor: " + tag
                ];
        }
      }));

function encode$2(param) {
  if (typeof param === "number") {
    if (param !== 0) {
      return Json_encode.object_(/* :: */Caml_chrome_debugger.simpleVariant("::", [
                    /* tuple */[
                      "tag",
                      "Hide"
                    ],
                    /* [] */0
                  ]));
    } else {
      return Json_encode.object_(/* :: */Caml_chrome_debugger.simpleVariant("::", [
                    /* tuple */[
                      "tag",
                      "Show"
                    ],
                    /* [] */0
                  ]));
    }
  } else {
    return Json_encode.object_(/* :: */Caml_chrome_debugger.simpleVariant("::", [
                  /* tuple */[
                    "tag",
                    "Display"
                  ],
                  /* :: */Caml_chrome_debugger.simpleVariant("::", [
                      /* tuple */[
                        "contents",
                        Json_encode.pair(encode, encode$1, /* tuple */[
                              param[0],
                              param[1]
                            ])
                      ],
                      /* [] */0
                    ])
                ]));
  }
}

var $$Request = {
  Header: Header,
  Body: Body,
  decode: decode$2,
  encode: encode$2
};

var decodeMode = Util$Guacamole.Decode.sum((function (tag) {
        switch (tag) {
          case "WP1" :
              return /* TagOnly */Caml_chrome_debugger.variant("TagOnly", 1, [(function (param) {
                            return /* WP1 */0;
                          })]);
          case "WP2" :
              return /* TagOnly */Caml_chrome_debugger.variant("TagOnly", 1, [(function (param) {
                            return /* WP2 */1;
                          })]);
          default:
            throw [
                  Json_decode.DecodeError,
                  "[View.Response.mode] Unknown constructor: " + tag
                ];
        }
      }));

var decodeLinkEvent = Util$Guacamole.Decode.sum((function (tag) {
        switch (tag) {
          case "MouseClick" :
              return /* Contents */Caml_chrome_debugger.variant("Contents", 0, [(function (loc) {
                            return /* MouseClick */Caml_chrome_debugger.variant("MouseClick", 2, [Curry._1(GCL$Guacamole.Loc.decode, loc)]);
                          })]);
          case "MouseOut" :
              return /* Contents */Caml_chrome_debugger.variant("Contents", 0, [(function (loc) {
                            return /* MouseOut */Caml_chrome_debugger.variant("MouseOut", 1, [Curry._1(GCL$Guacamole.Loc.decode, loc)]);
                          })]);
          case "MouseOver" :
              return /* Contents */Caml_chrome_debugger.variant("Contents", 0, [(function (loc) {
                            return /* MouseOver */Caml_chrome_debugger.variant("MouseOver", 0, [Curry._1(GCL$Guacamole.Loc.decode, loc)]);
                          })]);
          default:
            throw [
                  Json_decode.DecodeError,
                  "[View.Response.linkEvent] Unknown constructor: " + tag
                ];
        }
      }));

var decode$3 = Util$Guacamole.Decode.sum((function (tag) {
        switch (tag) {
          case "Destroyed" :
              return /* TagOnly */Caml_chrome_debugger.variant("TagOnly", 1, [(function (param) {
                            return /* Destroyed */1;
                          })]);
          case "Initialized" :
              return /* TagOnly */Caml_chrome_debugger.variant("TagOnly", 1, [(function (param) {
                            return /* Initialized */0;
                          })]);
          case "Link" :
              return /* Contents */Caml_chrome_debugger.variant("Contents", 0, [(function (json) {
                            return /* Link */Caml_chrome_debugger.variant("Link", 1, [Curry._1(decodeLinkEvent, json)]);
                          })]);
          case "SetMode" :
              return /* Contents */Caml_chrome_debugger.variant("Contents", 0, [(function (json) {
                            return /* SetMode */Caml_chrome_debugger.variant("SetMode", 0, [Curry._1(decodeMode, json)]);
                          })]);
          default:
            throw [
                  Json_decode.DecodeError,
                  "[View.Response.t] Unknown constructor: " + tag
                ];
        }
      }));

function encodeMode(param) {
  if (param) {
    return Json_encode.object_(/* :: */Caml_chrome_debugger.simpleVariant("::", [
                  /* tuple */[
                    "tag",
                    "WP2"
                  ],
                  /* [] */0
                ]));
  } else {
    return Json_encode.object_(/* :: */Caml_chrome_debugger.simpleVariant("::", [
                  /* tuple */[
                    "tag",
                    "WP1"
                  ],
                  /* [] */0
                ]));
  }
}

function encodeLinkEvent(param) {
  switch (param.tag | 0) {
    case /* MouseOver */0 :
        return Json_encode.object_(/* :: */Caml_chrome_debugger.simpleVariant("::", [
                      /* tuple */[
                        "tag",
                        "MouseOver"
                      ],
                      /* :: */Caml_chrome_debugger.simpleVariant("::", [
                          /* tuple */[
                            "contents",
                            GCL$Guacamole.Loc.encode(param[0])
                          ],
                          /* [] */0
                        ])
                    ]));
    case /* MouseOut */1 :
        return Json_encode.object_(/* :: */Caml_chrome_debugger.simpleVariant("::", [
                      /* tuple */[
                        "tag",
                        "MouseOut"
                      ],
                      /* :: */Caml_chrome_debugger.simpleVariant("::", [
                          /* tuple */[
                            "contents",
                            GCL$Guacamole.Loc.encode(param[0])
                          ],
                          /* [] */0
                        ])
                    ]));
    case /* MouseClick */2 :
        return Json_encode.object_(/* :: */Caml_chrome_debugger.simpleVariant("::", [
                      /* tuple */[
                        "tag",
                        "MouseClick"
                      ],
                      /* :: */Caml_chrome_debugger.simpleVariant("::", [
                          /* tuple */[
                            "contents",
                            GCL$Guacamole.Loc.encode(param[0])
                          ],
                          /* [] */0
                        ])
                    ]));
    
  }
}

function encode$3(param) {
  if (typeof param === "number") {
    if (param === /* Initialized */0) {
      return Json_encode.object_(/* :: */Caml_chrome_debugger.simpleVariant("::", [
                    /* tuple */[
                      "tag",
                      "Initialized"
                    ],
                    /* [] */0
                  ]));
    } else {
      return Json_encode.object_(/* :: */Caml_chrome_debugger.simpleVariant("::", [
                    /* tuple */[
                      "tag",
                      "Destroyed"
                    ],
                    /* [] */0
                  ]));
    }
  } else if (param.tag) {
    return Json_encode.object_(/* :: */Caml_chrome_debugger.simpleVariant("::", [
                  /* tuple */[
                    "tag",
                    "Link"
                  ],
                  /* :: */Caml_chrome_debugger.simpleVariant("::", [
                      /* tuple */[
                        "contents",
                        encodeLinkEvent(param[0])
                      ],
                      /* [] */0
                    ])
                ]));
  } else {
    return Json_encode.object_(/* :: */Caml_chrome_debugger.simpleVariant("::", [
                  /* tuple */[
                    "tag",
                    "SetMode"
                  ],
                  /* :: */Caml_chrome_debugger.simpleVariant("::", [
                      /* tuple */[
                        "contents",
                        encodeMode(param[0])
                      ],
                      /* [] */0
                    ])
                ]));
  }
}

var $$Response = {
  decodeMode: decodeMode,
  decodeLinkEvent: decodeLinkEvent,
  decode: decode$3,
  encodeMode: encodeMode,
  encodeLinkEvent: encodeLinkEvent,
  encode: encode$3
};

exports.$$Request = $$Request;
exports.$$Response = $$Response;
/* decode Not a pure module */

// Generated by BUCKLESCRIPT, PLEASE EDIT WITH CARE
'use strict';

var Path = require("path");
var Curry = require("bs-platform/lib/js/curry.js");
var VSCode = require("bs-vscode/lib/js/src/VSCode.bs.js");
var Vscode = require("vscode");
var Js_math = require("bs-platform/lib/js/js_math.js");
var $$Promise = require("reason-promise/lib/js/src/js/promise.js");
var Belt_Array = require("bs-platform/lib/js/belt_Array.js");
var Json_decode = require("@glennsl/bs-json/lib/js/src/Json_decode.bs.js");
var Json_encode = require("@glennsl/bs-json/lib/js/src/Json_encode.bs.js");
var GCL$Guacamole = require("./GCL.bs.js");
var Util$Guacamole = require("./Util/Util.bs.js");
var Caml_js_exceptions = require("bs-platform/lib/js/caml_js_exceptions.js");
var Response$Guacamole = require("./Response.bs.js");
var Caml_chrome_debugger = require("bs-platform/lib/js/caml_chrome_debugger.js");
var Event$AgdaModeVscode = require("agda-mode-vscode/lib/js/src/Util/Event.bs.js");

var decode = Util$Guacamole.Decode.sum((function (tag) {
        switch (tag) {
          case "Error" :
              return /* Contents */Caml_chrome_debugger.variant("Contents", 0, [(function (json) {
                            return /* Error */Caml_chrome_debugger.variant("Error", 1, [Json_decode.string(json)]);
                          })]);
          case "Loading" :
              return /* Contents */Caml_chrome_debugger.variant("Contents", 0, [(function (param) {
                            return /* Loading */0;
                          })]);
          case "Plain" :
              return /* Contents */Caml_chrome_debugger.variant("Contents", 0, [(function (json) {
                            return /* Plain */Caml_chrome_debugger.variant("Plain", 0, [Json_decode.string(json)]);
                          })]);
          default:
            throw [
                  Json_decode.DecodeError,
                  "[Request.Header] Unknown constructor: " + tag
                ];
        }
      }));

function encode(s) {
  if (typeof s === "number") {
    return Json_encode.object_(/* :: */Caml_chrome_debugger.simpleVariant("::", [
                  /* tuple */[
                    "tag",
                    "Loading"
                  ],
                  /* [] */0
                ]));
  } else if (s.tag) {
    return Json_encode.object_(/* :: */Caml_chrome_debugger.simpleVariant("::", [
                  /* tuple */[
                    "tag",
                    "Error"
                  ],
                  /* :: */Caml_chrome_debugger.simpleVariant("::", [
                      /* tuple */[
                        "contents",
                        s[0]
                      ],
                      /* [] */0
                    ])
                ]));
  } else {
    return Json_encode.object_(/* :: */Caml_chrome_debugger.simpleVariant("::", [
                  /* tuple */[
                    "tag",
                    "Plain"
                  ],
                  /* :: */Caml_chrome_debugger.simpleVariant("::", [
                      /* tuple */[
                        "contents",
                        s[0]
                      ],
                      /* [] */0
                    ])
                ]));
  }
}

var Header = {
  decode: decode,
  encode: encode
};

var decode$1 = Util$Guacamole.Decode.sum((function (tag) {
        switch (tag) {
          case "Nothing" :
              return /* Contents */Caml_chrome_debugger.variant("Contents", 0, [(function (param) {
                            return /* Nothing */0;
                          })]);
          case "Plain" :
              return /* Contents */Caml_chrome_debugger.variant("Contents", 0, [(function (json) {
                            return /* Plain */Caml_chrome_debugger.variant("Plain", 1, [Json_decode.string(json)]);
                          })]);
          case "ProofObligations" :
              return /* Contents */Caml_chrome_debugger.variant("Contents", 0, [(function (param) {
                            return Json_decode.map((function (param) {
                                          return /* ProofObligations */Caml_chrome_debugger.variant("ProofObligations", 0, [
                                                    param[0],
                                                    param[1],
                                                    param[2]
                                                  ]);
                                        }), (function (param) {
                                          return Json_decode.tuple3(Json_decode.$$int, (function (param) {
                                                        return Json_decode.array(Response$Guacamole.ProofObligation.decode, param);
                                                      }), (function (param) {
                                                        return Json_decode.array(Response$Guacamole.GlobalProp.decode, param);
                                                      }), param);
                                        }), param);
                          })]);
          default:
            throw [
                  Json_decode.DecodeError,
                  "[Request.Header] Unknown constructor: " + tag
                ];
        }
      }));

function encode$1(x) {
  if (typeof x === "number") {
    return Json_encode.object_(/* :: */Caml_chrome_debugger.simpleVariant("::", [
                  /* tuple */[
                    "tag",
                    "Nothing"
                  ],
                  /* [] */0
                ]));
  } else if (x.tag) {
    return Json_encode.object_(/* :: */Caml_chrome_debugger.simpleVariant("::", [
                  /* tuple */[
                    "tag",
                    "Plain"
                  ],
                  /* :: */Caml_chrome_debugger.simpleVariant("::", [
                      /* tuple */[
                        "contents",
                        x[0]
                      ],
                      /* [] */0
                    ])
                ]));
  } else {
    return Json_encode.object_(/* :: */Caml_chrome_debugger.simpleVariant("::", [
                  /* tuple */[
                    "tag",
                    "ProofObligations"
                  ],
                  /* :: */Caml_chrome_debugger.simpleVariant("::", [
                      /* tuple */[
                        "contents",
                        Json_encode.tuple3((function (prim) {
                                return prim;
                              }), (function (param) {
                                return Json_encode.array(Response$Guacamole.ProofObligation.encode, param);
                              }), (function (param) {
                                return Json_encode.array(Response$Guacamole.GlobalProp.encode, param);
                              }), /* tuple */[
                              x[0],
                              x[1],
                              x[2]
                            ])
                      ],
                      /* [] */0
                    ])
                ]));
  }
}

var Body = {
  decode: decode$1,
  encode: encode$1
};

var decode$2 = Util$Guacamole.Decode.sum((function (tag) {
        switch (tag) {
          case "Display" :
              return /* Contents */Caml_chrome_debugger.variant("Contents", 0, [(function (param) {
                            return Json_decode.map((function (param) {
                                          return /* Display */Caml_chrome_debugger.variant("Display", 1, [
                                                    param[0],
                                                    param[1]
                                                  ]);
                                        }), (function (param) {
                                          return Json_decode.pair(decode, decode$1, param);
                                        }), param);
                          })]);
          case "Hide" :
              return /* Contents */Caml_chrome_debugger.variant("Contents", 0, [(function (param) {
                            return /* Hide */1;
                          })]);
          case "Show" :
              return /* Contents */Caml_chrome_debugger.variant("Contents", 0, [(function (param) {
                            return /* Show */0;
                          })]);
          case "Substitute" :
              return /* Contents */Caml_chrome_debugger.variant("Contents", 0, [(function (param) {
                            return Json_decode.map((function (param) {
                                          return /* Substitute */Caml_chrome_debugger.variant("Substitute", 0, [
                                                    param[0],
                                                    param[1]
                                                  ]);
                                        }), (function (param) {
                                          return Json_decode.pair(Json_decode.$$int, GCL$Guacamole.Syntax.Expr.decode, param);
                                        }), param);
                          })]);
          default:
            throw [
                  Json_decode.DecodeError,
                  "[Request] Unknown constructor: " + tag
                ];
        }
      }));

function encode$2(param) {
  if (typeof param === "number") {
    if (param === /* Show */0) {
      return Json_encode.object_(/* :: */Caml_chrome_debugger.simpleVariant("::", [
                    /* tuple */[
                      "tag",
                      "Show"
                    ],
                    /* [] */0
                  ]));
    } else {
      return Json_encode.object_(/* :: */Caml_chrome_debugger.simpleVariant("::", [
                    /* tuple */[
                      "tag",
                      "Hide"
                    ],
                    /* [] */0
                  ]));
    }
  } else if (param.tag) {
    return Json_encode.object_(/* :: */Caml_chrome_debugger.simpleVariant("::", [
                  /* tuple */[
                    "tag",
                    "Display"
                  ],
                  /* :: */Caml_chrome_debugger.simpleVariant("::", [
                      /* tuple */[
                        "contents",
                        Json_encode.pair(encode, encode$1, /* tuple */[
                              param[0],
                              param[1]
                            ])
                      ],
                      /* [] */0
                    ])
                ]));
  } else {
    return Json_encode.object_(/* :: */Caml_chrome_debugger.simpleVariant("::", [
                  /* tuple */[
                    "tag",
                    "Substitute"
                  ],
                  /* :: */Caml_chrome_debugger.simpleVariant("::", [
                      /* tuple */[
                        "contents",
                        Json_encode.pair((function (prim) {
                                return prim;
                              }), GCL$Guacamole.Syntax.Expr.encode, /* tuple */[
                              param[0],
                              param[1]
                            ])
                      ],
                      /* [] */0
                    ])
                ]));
  }
}

var $$Request = {
  Header: Header,
  Body: Body,
  decode: decode$2,
  encode: encode$2
};

var decodeMode = Util$Guacamole.Decode.sum((function (tag) {
        switch (tag) {
          case "WP1" :
              return /* TagOnly */Caml_chrome_debugger.variant("TagOnly", 1, [(function (param) {
                            return /* WP1 */0;
                          })]);
          case "WP2" :
              return /* TagOnly */Caml_chrome_debugger.variant("TagOnly", 1, [(function (param) {
                            return /* WP2 */1;
                          })]);
          default:
            throw [
                  Json_decode.DecodeError,
                  "[Response.mode] Unknown constructor: " + tag
                ];
        }
      }));

var decodeLinkEvent = Util$Guacamole.Decode.sum((function (tag) {
        switch (tag) {
          case "MouseClick" :
              return /* Contents */Caml_chrome_debugger.variant("Contents", 0, [(function (loc) {
                            return /* MouseClick */Caml_chrome_debugger.variant("MouseClick", 2, [Curry._1(GCL$Guacamole.Loc.decode, loc)]);
                          })]);
          case "MouseOut" :
              return /* Contents */Caml_chrome_debugger.variant("Contents", 0, [(function (loc) {
                            return /* MouseOut */Caml_chrome_debugger.variant("MouseOut", 1, [Curry._1(GCL$Guacamole.Loc.decode, loc)]);
                          })]);
          case "MouseOver" :
              return /* Contents */Caml_chrome_debugger.variant("Contents", 0, [(function (loc) {
                            return /* MouseOver */Caml_chrome_debugger.variant("MouseOver", 0, [Curry._1(GCL$Guacamole.Loc.decode, loc)]);
                          })]);
          default:
            throw [
                  Json_decode.DecodeError,
                  "[Response.linkEvent] Unknown constructor: " + tag
                ];
        }
      }));

var decode$3 = Util$Guacamole.Decode.sum((function (tag) {
        switch (tag) {
          case "Destroyed" :
              return /* TagOnly */Caml_chrome_debugger.variant("TagOnly", 1, [(function (param) {
                            return /* Destroyed */1;
                          })]);
          case "Initialized" :
              return /* TagOnly */Caml_chrome_debugger.variant("TagOnly", 1, [(function (param) {
                            return /* Initialized */0;
                          })]);
          case "Link" :
              return /* Contents */Caml_chrome_debugger.variant("Contents", 0, [(function (json) {
                            return /* Link */Caml_chrome_debugger.variant("Link", 1, [Curry._1(decodeLinkEvent, json)]);
                          })]);
          case "SetMode" :
              return /* Contents */Caml_chrome_debugger.variant("Contents", 0, [(function (json) {
                            return /* SetMode */Caml_chrome_debugger.variant("SetMode", 0, [Curry._1(decodeMode, json)]);
                          })]);
          case "Substitute" :
              return /* Contents */Caml_chrome_debugger.variant("Contents", 0, [(function (param) {
                            return Json_decode.map((function (param) {
                                          return /* Substitute */Caml_chrome_debugger.variant("Substitute", 2, [
                                                    param[0],
                                                    param[1],
                                                    param[2]
                                                  ]);
                                        }), (function (param) {
                                          return Json_decode.tuple3(Json_decode.$$int, GCL$Guacamole.Syntax.Expr.decode, GCL$Guacamole.Syntax.Expr.decodeSubst, param);
                                        }), param);
                          })]);
          default:
            throw [
                  Json_decode.DecodeError,
                  "[Response.t] Unknown constructor: " + tag
                ];
        }
      }));

function encodeMode(param) {
  if (param) {
    return Json_encode.object_(/* :: */Caml_chrome_debugger.simpleVariant("::", [
                  /* tuple */[
                    "tag",
                    "WP2"
                  ],
                  /* [] */0
                ]));
  } else {
    return Json_encode.object_(/* :: */Caml_chrome_debugger.simpleVariant("::", [
                  /* tuple */[
                    "tag",
                    "WP1"
                  ],
                  /* [] */0
                ]));
  }
}

function encodeLinkEvent(loc) {
  switch (loc.tag | 0) {
    case /* MouseOver */0 :
        return Json_encode.object_(/* :: */Caml_chrome_debugger.simpleVariant("::", [
                      /* tuple */[
                        "tag",
                        "MouseOver"
                      ],
                      /* :: */Caml_chrome_debugger.simpleVariant("::", [
                          /* tuple */[
                            "contents",
                            GCL$Guacamole.Loc.encode(loc[0])
                          ],
                          /* [] */0
                        ])
                    ]));
    case /* MouseOut */1 :
        return Json_encode.object_(/* :: */Caml_chrome_debugger.simpleVariant("::", [
                      /* tuple */[
                        "tag",
                        "MouseOut"
                      ],
                      /* :: */Caml_chrome_debugger.simpleVariant("::", [
                          /* tuple */[
                            "contents",
                            GCL$Guacamole.Loc.encode(loc[0])
                          ],
                          /* [] */0
                        ])
                    ]));
    case /* MouseClick */2 :
        return Json_encode.object_(/* :: */Caml_chrome_debugger.simpleVariant("::", [
                      /* tuple */[
                        "tag",
                        "MouseClick"
                      ],
                      /* :: */Caml_chrome_debugger.simpleVariant("::", [
                          /* tuple */[
                            "contents",
                            GCL$Guacamole.Loc.encode(loc[0])
                          ],
                          /* [] */0
                        ])
                    ]));
    
  }
}

function encode$3(e) {
  if (typeof e === "number") {
    if (e === /* Initialized */0) {
      return Json_encode.object_(/* :: */Caml_chrome_debugger.simpleVariant("::", [
                    /* tuple */[
                      "tag",
                      "Initialized"
                    ],
                    /* [] */0
                  ]));
    } else {
      return Json_encode.object_(/* :: */Caml_chrome_debugger.simpleVariant("::", [
                    /* tuple */[
                      "tag",
                      "Destroyed"
                    ],
                    /* [] */0
                  ]));
    }
  }
  switch (e.tag | 0) {
    case /* SetMode */0 :
        return Json_encode.object_(/* :: */Caml_chrome_debugger.simpleVariant("::", [
                      /* tuple */[
                        "tag",
                        "SetMode"
                      ],
                      /* :: */Caml_chrome_debugger.simpleVariant("::", [
                          /* tuple */[
                            "contents",
                            encodeMode(e[0])
                          ],
                          /* [] */0
                        ])
                    ]));
    case /* Link */1 :
        return Json_encode.object_(/* :: */Caml_chrome_debugger.simpleVariant("::", [
                      /* tuple */[
                        "tag",
                        "Link"
                      ],
                      /* :: */Caml_chrome_debugger.simpleVariant("::", [
                          /* tuple */[
                            "contents",
                            encodeLinkEvent(e[0])
                          ],
                          /* [] */0
                        ])
                    ]));
    case /* Substitute */2 :
        return Json_encode.object_(/* :: */Caml_chrome_debugger.simpleVariant("::", [
                      /* tuple */[
                        "tag",
                        "Substitute"
                      ],
                      /* :: */Caml_chrome_debugger.simpleVariant("::", [
                          /* tuple */[
                            "contents",
                            Json_encode.tuple3((function (prim) {
                                    return prim;
                                  }), GCL$Guacamole.Syntax.Expr.encode, GCL$Guacamole.Syntax.Expr.encodeSubst, /* tuple */[
                                  e[0],
                                  e[1],
                                  e[2]
                                ])
                          ],
                          /* [] */0
                        ])
                    ]));
    
  }
}

var $$Response = {
  decodeMode: decodeMode,
  decodeLinkEvent: decodeLinkEvent,
  decode: decode$3,
  encodeMode: encodeMode,
  encodeLinkEvent: encodeLinkEvent,
  encode: encode$3
};

function send(view, req) {
  var queued = view.status;
  if (queued) {
    queued[0].push(req);
    return $$Promise.resolved(false);
  }
  var stringified = JSON.stringify(encode$2(req));
  return view.panel.webview.postMessage(stringified);
}

function recv(view, callback) {
  return new Vscode.Disposable(Curry._1(view.onResponse.on, callback));
}

function make(extentionPath, editor) {
  var html = function (distPath, styleUri, scriptUri) {
    var text = "";
    var charaterSet = "ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789";
    var cardinality = charaterSet.length;
    for(var _for = 0; _for <= 32; ++_for){
      text = text + charaterSet.charAt(Js_math.floor(Math.random() * cardinality));
    }
    var nonce = text;
    var styleUri$1 = Vscode.Uri.file(Path.join(distPath, styleUri)).with(VSCode.Uri.makeChange(undefined, undefined, undefined, undefined, "vscode-resource", undefined));
    var scriptUri$1 = Vscode.Uri.file(Path.join(distPath, scriptUri)).with(VSCode.Uri.makeChange(undefined, undefined, undefined, undefined, "vscode-resource", undefined));
    var metaContent = "default-src 'none'; img-src vscode-resource: https:; script-src 'nonce-" + (nonce + "';style-src vscode-resource: 'unsafe-inline' http: https: data:;");
    return "\n        <!DOCTYPE html>\n              <html lang=\"en\">\n              <head>\n                <meta charset=\"utf-8\">\n                <meta name=\"viewport\" content=\"width=device-width,initial-scale=1,shrink-to-fit=no\">\n                <meta name=\"theme-color\" content=\"#000000\">\n                <title>React App</title>\n                <link rel=\"stylesheet\" type=\"text/css\" href=\"" + (String(styleUri$1) + ("\">\n                <meta http-equiv=\"Content-Security-Policy\" content=\"" + (String(metaContent) + ("\">\n              </head>\n              <body>\n                <noscript>You need to enable JavaScript to run this app.</noscript>\n                <div id=\"root\"></div>\n                <script nonce=\"" + (String(nonce) + ("\" src=\"" + (String(scriptUri$1) + "\"></script>\n              </body>\n              </html>\n        ")))))));
  };
  var createPanel = function (editor) {
    var distPath = Path.join(extentionPath, "dist");
    var fileName = Path.basename(editor.document.fileName, ".gcl");
    var panel = Vscode.window.createWebviewPanel("panel", "GCL [" + (fileName + "]"), {
          preserveFocus: true,
          viewColumn: 3
        }, VSCode.WebviewAndWebviewPanelOptions.make(undefined, true, [Vscode.Uri.file(distPath)], undefined, undefined, true, undefined));
    panel.webview.html = html(distPath, "style.css", "bundled-view.js");
    return panel;
  };
  var moveToBottom = function (param) {
    return Vscode.commands.executeCommand("vscode.setEditorLayout", {
                orientation: 1,
                groups: [
                  Curry._1(VSCode.Commands.Layout.sized, {
                        groups: [VSCode.Commands.Layout.simple],
                        size: 0.5
                      }),
                  Curry._1(VSCode.Commands.Layout.sized, {
                        groups: [VSCode.Commands.Layout.simple],
                        size: 0.5
                      })
                ]
              });
  };
  var panel = createPanel(editor);
  moveToBottom(undefined);
  var disposables = [];
  var onResponse = Event$AgdaModeVscode.make(undefined);
  disposables.push(panel.webview.onDidReceiveMessage((function (json) {
              var result;
              try {
                result = Curry._1(decode$3, json);
              }
              catch (raw_e){
                var e = Caml_js_exceptions.internalToOCamlException(raw_e);
                console.log("[ panic ][ Webview.onDidReceiveMessage JSON decode error ]", e);
                return ;
              }
              return Curry._1(onResponse.emit, result);
            })));
  disposables.push(panel.onDidDispose((function (param) {
              return Curry._1(onResponse.emit, /* Destroyed */1);
            })));
  var view = {
    panel: panel,
    onResponse: onResponse,
    disposables: disposables,
    status: /* Uninitialized */Caml_chrome_debugger.simpleVariant("Uninitialized", [[]])
  };
  disposables.push(new Vscode.Disposable(Curry._1(view.onResponse.on, (function (param) {
                  if (typeof param !== "number") {
                    return ;
                  }
                  if (param !== 0) {
                    return ;
                  }
                  var queued = view.status;
                  if (queued) {
                    view.status = /* Initialized */0;
                    return Belt_Array.forEach(queued[0], (function (req) {
                                  send(view, req);
                                  
                                }));
                  }
                  
                }))));
  return view;
}

function destroy(view) {
  view.panel.dispose();
  return Curry._1(view.onResponse.destroy, undefined);
}

function show(view) {
  return VSCode.WebviewPanel.reveal(view.panel, undefined, true, undefined);
}

function focus(view) {
  return VSCode.WebviewPanel.reveal(view.panel, undefined, undefined, undefined);
}

function hide(_view) {
  
}

exports.$$Request = $$Request;
exports.$$Response = $$Response;
exports.send = send;
exports.recv = recv;
exports.make = make;
exports.destroy = destroy;
exports.show = show;
exports.focus = focus;
exports.hide = hide;
/* decode Not a pure module */

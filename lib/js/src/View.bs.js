// Generated by ReScript, PLEASE EDIT WITH CARE
'use strict';

var Path = require("path");
var Curry = require("bs-platform/lib/js/curry.js");
var VSCode = require("bs-vscode/lib/js/src/VSCode.bs.js");
var Vscode = require("vscode");
var Js_math = require("bs-platform/lib/js/js_math.js");
var $$Promise = require("reason-promise/lib/js/src/js/promise.bs.js");
var Belt_Array = require("bs-platform/lib/js/belt_Array.js");
var Belt_Option = require("bs-platform/lib/js/belt_Option.js");
var Req$Guacamole = require("./Util/Req.bs.js");
var Chan$Guacamole = require("./Util/Chan.bs.js");
var Caml_js_exceptions = require("bs-platform/lib/js/caml_js_exceptions.js");
var ViewType$Guacamole = require("./View/ViewType.bs.js");

function makeHTML(distPath, styleUri, scriptUri) {
  var text = "";
  var charaterSet = "ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789";
  var cardinality = charaterSet.length;
  for(var _for = 0; _for <= 32; ++_for){
    text = text + charaterSet.charAt(Js_math.floor(Math.random() * cardinality));
  }
  var nonce = text;
  var styleUri$1 = Vscode.Uri.file(Path.join(distPath, styleUri)).with(VSCode.Uri.makeChange(undefined, undefined, undefined, undefined, "vscode-resource", undefined));
  var scriptUri$1 = Vscode.Uri.file(Path.join(distPath, scriptUri)).with(VSCode.Uri.makeChange(undefined, undefined, undefined, undefined, "vscode-resource", undefined));
  var metaContent = "default-src 'none'; img-src vscode-resource: https:; script-src 'nonce-" + (nonce + "';style-src vscode-resource: 'unsafe-inline' http: https: data:;");
  return "\n        <!DOCTYPE html>\n              <html lang=\"en\">\n              <head>\n                <meta charset=\"utf-8\">\n                <meta name=\"viewport\" content=\"width=device-width,initial-scale=1,shrink-to-fit=no\">\n                <meta name=\"theme-color\" content=\"#000000\">\n                <title>React App</title>\n                <link rel=\"stylesheet\" type=\"text/css\" href=\"" + styleUri$1 + "\">\n                <meta http-equiv=\"Content-Security-Policy\" content=\"" + metaContent + "\">\n              </head>\n              <body>\n                <noscript>You need to enable JavaScript to run this app.</noscript>\n                <div id=\"root\"></div>\n                <script nonce=\"" + nonce + "\" src=\"" + scriptUri$1 + "\"></script>\n              </body>\n              </html>\n        ";
}

function make(extentionPath) {
  var distPath = Path.join(extentionPath, "dist");
  var panel = Vscode.window.createWebviewPanel("panel", "Guacamole", {
        preserveFocus: true,
        viewColumn: 3
      }, VSCode.WebviewAndWebviewPanelOptions.make(undefined, true, [Vscode.Uri.file(distPath)], undefined, undefined, true, undefined));
  var html = makeHTML(distPath, "style.css", "bundled-view.js");
  panel.webview.html = html;
  return panel;
}

function moveToRight(param) {
  Vscode.commands.executeCommand((function () {
            switch (({
                  NAME: "setEditorLayout",
                  VAL: {
                    orientation: 0,
                    groups: [
                      Curry._1(VSCode.Commands.Layout.sized, {
                            groups: [VSCode.Commands.Layout.simple],
                            size: 0.5
                          }),
                      Curry._1(VSCode.Commands.Layout.sized, {
                            groups: [VSCode.Commands.Layout.simple],
                            size: 0.5
                          })
                    ]
                  }
                }).NAME) {
              case "setEditorLayout" :
                  return "vscode.setEditorLayout";
              case "setContext" :
                  return "setContext";
              
            }
          })(), ({
          NAME: "setEditorLayout",
          VAL: {
            orientation: 0,
            groups: [
              Curry._1(VSCode.Commands.Layout.sized, {
                    groups: [VSCode.Commands.Layout.simple],
                    size: 0.5
                  }),
              Curry._1(VSCode.Commands.Layout.sized, {
                    groups: [VSCode.Commands.Layout.simple],
                    size: 0.5
                  })
            ]
          }
        }).VAL);
  
}

var Panel = {
  makeHTML: makeHTML,
  make: make,
  moveToRight: moveToRight
};

function send(view, req) {
  var queued = view.status;
  if (queued) {
    queued._0.push(req);
    return $$Promise.resolved(false);
  }
  var stringified = JSON.stringify(ViewType$Guacamole.$$Request.encode(req));
  return view.panel.webview.postMessage(stringified);
}

function make$1(extentionPath) {
  var view = {
    panel: make(extentionPath),
    onResponse: Chan$Guacamole.make(undefined),
    subscriptions: [],
    status: {
      _0: [],
      [Symbol.for("name")]: "Uninitialized"
    }
  };
  moveToRight(undefined);
  view.subscriptions.push(view.panel.webview.onDidReceiveMessage(function (json) {
            var result;
            try {
              result = Curry._1(ViewType$Guacamole.$$Response.decode, json);
            }
            catch (raw_e){
              var e = Caml_js_exceptions.internalToOCamlException(raw_e);
              console.log("[ panic ][ Webview.onDidReceiveMessage JSON decode error ]", e);
              return ;
            }
            return Chan$Guacamole.emit(view.onResponse, result);
          }));
  view.subscriptions.push(view.panel.onDidDispose(function (param) {
            return Chan$Guacamole.emit(view.onResponse, /* Destroyed */1);
          }));
  view.subscriptions.push(new Vscode.Disposable(Chan$Guacamole.on(view.onResponse, (function (param) {
                  if (typeof param !== "number") {
                    return ;
                  }
                  if (param !== 0) {
                    return ;
                  }
                  var queued = view.status;
                  if (queued) {
                    view.status = /* Initialized */0;
                    return Belt_Array.forEach(queued._0, (function (req) {
                                  send(view, req);
                                  
                                }));
                  }
                  
                }))));
  return view;
}

function destroy(view) {
  view.panel.dispose();
  return Chan$Guacamole.destroy(view.onResponse);
}

function onceDestroyed(view) {
  var match = $$Promise.pending(undefined);
  var resolve = match[1];
  var disposable = Chan$Guacamole.on(view.onResponse, (function (response) {
          if (typeof response === "number" && response !== 0) {
            return Curry._1(resolve, undefined);
          }
          
        }));
  return $$Promise.tap(match[0], disposable);
}

var View = {
  send: send,
  make: make$1,
  destroy: destroy,
  onceDestroyed: onceDestroyed
};

var handle = {
  view: undefined,
  reqSubscription: undefined,
  resSubscription: undefined
};

function activate(extensionPath) {
  var view = make$1(extensionPath);
  handle.view = view;
  return $$Promise.get(onceDestroyed(view), (function (param) {
                handle.view = undefined;
                
              }));
}

function unwire(param) {
  return Belt_Option.forEach(handle.resSubscription, (function (disposable) {
                return Curry._1(disposable, undefined);
              }));
}

function deactivate(param) {
  Belt_Option.forEach(handle.view, destroy);
  handle.view = undefined;
  return unwire(undefined);
}

function isActivated(param) {
  return Belt_Option.isSome(handle.view);
}

function wire(state) {
  unwire(undefined);
  return Belt_Option.forEach(handle.view, (function (view) {
                handle.reqSubscription = Req$Guacamole.handle(state.viewReq, (function (req) {
                        return send(view, req);
                      }));
                handle.resSubscription = Chan$Guacamole.on(view.onResponse, (function (res) {
                        return Chan$Guacamole.emit(state.viewResChan, res);
                      }));
                
              }));
}

var Controller = {
  activate: activate,
  deactivate: deactivate,
  isActivated: isActivated,
  wire: wire
};

exports.Panel = Panel;
exports.View = View;
exports.Controller = Controller;
exports.activate = activate;
exports.deactivate = deactivate;
exports.isActivated = isActivated;
exports.wire = wire;
/* path Not a pure module */

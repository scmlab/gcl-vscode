// Generated by BUCKLESCRIPT, PLEASE EDIT WITH CARE
'use strict';

var Path = require("path");
var Curry = require("bs-platform/lib/js/curry.js");
var Vscode = require("vscode");
var Js_math = require("bs-platform/lib/js/js_math.js");
var View$Guacamole = require("../View.bs.js");
var Vscode$Guacamole = require("../Vscode.bs.js");

function make(getExtensionPath, context, editor) {
  var html = function (distPath, styleUri, scriptUri) {
    var text = "";
    var charaterSet = "ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789";
    var cardinality = charaterSet.length;
    for(var _for = 0; _for <= 32; ++_for){
      text = text + charaterSet.charAt(Js_math.floor(Math.random() * cardinality));
    }
    var nonce = text;
    var styleUri$1 = Vscode.Uri.file(Path.join(distPath, styleUri)).with(Vscode$Guacamole.Uri.makeChange(undefined, undefined, undefined, undefined, "vscode-resource", /* () */0));
    var scriptUri$1 = Vscode.Uri.file(Path.join(distPath, scriptUri)).with(Vscode$Guacamole.Uri.makeChange(undefined, undefined, undefined, undefined, "vscode-resource", /* () */0));
    var metaContent = "default-src 'none'; img-src vscode-resource: https:; script-src 'nonce-" + (nonce + "';style-src vscode-resource: 'unsafe-inline' http: https: data:;");
    return "\n        <!DOCTYPE html>\n              <html lang=\"en\">\n              <head>\n                <meta charset=\"utf-8\">\n                <meta name=\"viewport\" content=\"width=device-width,initial-scale=1,shrink-to-fit=no\">\n                <meta name=\"theme-color\" content=\"#000000\">\n                <title>React App</title>\n                <link rel=\"stylesheet\" type=\"text/css\" href=\"" + (String(styleUri$1) + ("\">\n                <meta http-equiv=\"Content-Security-Policy\" content=\"" + (String(metaContent) + ("\">\n              </head>\n              <body>\n                <noscript>You need to enable JavaScript to run this app.</noscript>\n                <div id=\"root\"></div>\n                <script nonce=\"" + (String(nonce) + ("\" src=\"" + (String(scriptUri$1) + "\"></script>\n              </body>\n              </html>\n        ")))))));
  };
  var createPanel = function (context, editor) {
    var distPath = Path.join(Curry._1(getExtensionPath, context), "dist");
    var fileName = Path.basename(editor.document.fileName, ".gcl");
    var panel = Vscode.window.createWebviewPanel("panel", "GCL [" + (fileName + "]"), {
          preserveFocus: true,
          viewColumn: 3
        }, Vscode$Guacamole.WebviewAndWebviewPanelOptions.make(undefined, true, [Vscode.Uri.file(distPath)], undefined, undefined, undefined, /* () */0));
    panel.onDidDispose((function (param) {
            console.log("[ view ][ destroyed ]");
            return /* () */0;
          }));
    panel.webview.html = html(distPath, "style.css", "bundled-view.js");
    return panel;
  };
  var moveToBottom = function (param) {
    return Vscode.commands.executeCommand("vscode.setEditorLayout", {
                orientation: 1,
                groups: [
                  Curry._1(Vscode$Guacamole.Commands.Layout.sized, {
                        groups: [Vscode$Guacamole.Commands.Layout.simple],
                        size: 0.5
                      }),
                  Curry._1(Vscode$Guacamole.Commands.Layout.sized, {
                        groups: [Vscode$Guacamole.Commands.Layout.simple],
                        size: 0.5
                      })
                ]
              });
  };
  var panel = createPanel(context, editor);
  moveToBottom(/* () */0);
  return panel;
}

function destroy(view) {
  view.dispose();
  return /* () */0;
}

function show(view) {
  return Vscode$Guacamole.WebviewPanel.reveal(view, undefined, true, /* () */0);
}

function hide(_view) {
  return /* () */0;
}

function send(view, req) {
  var stringified = JSON.stringify(View$Guacamole.$$Request.encode(req));
  return view.webview.postMessage(stringified);
}

function recv(view, callback) {
  return view.webview.onDidReceiveMessage(callback);
}

exports.make = make;
exports.destroy = destroy;
exports.show = show;
exports.hide = hide;
exports.send = send;
exports.recv = recv;
/* path Not a pure module */

// Generated by BUCKLESCRIPT, PLEASE EDIT WITH CARE
'use strict';

var Path = require("path");
var Curry = require("bs-platform/lib/js/curry.js");
var Vscode = require("vscode");
var Js_math = require("bs-platform/lib/js/js_math.js");
var $$Promise = require("reason-promise/lib/js/src/js/promise.js");
var Belt_Array = require("bs-platform/lib/js/belt_Array.js");
var View$Guacamole = require("../View.bs.js");
var Event$Guacamole = require("../Util/Event.bs.js");
var Vscode$Guacamole = require("../Vscode.bs.js");
var Caml_js_exceptions = require("bs-platform/lib/js/caml_js_exceptions.js");
var Caml_chrome_debugger = require("bs-platform/lib/js/caml_chrome_debugger.js");

function send(view, req) {
  var match = view.status;
  if (match) {
    match[0].push(req);
    return $$Promise.resolved(false);
  } else {
    var stringified = JSON.stringify(View$Guacamole.$$Request.encode(req));
    return view.panel.webview.postMessage(stringified);
  }
}

function recv(view, callback) {
  return new Vscode.Disposable(Curry._1(view.onResponse.on, callback));
}

function make(getExtensionPath, context, editor) {
  var html = function (distPath, styleUri, scriptUri) {
    var text = "";
    var charaterSet = "ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789";
    var cardinality = charaterSet.length;
    for(var _for = 0; _for <= 32; ++_for){
      text = text + charaterSet.charAt(Js_math.floor(Math.random() * cardinality));
    }
    var nonce = text;
    var styleUri$1 = Vscode.Uri.file(Path.join(distPath, styleUri)).with(Vscode$Guacamole.Uri.makeChange(undefined, undefined, undefined, undefined, "vscode-resource", /* () */0));
    var scriptUri$1 = Vscode.Uri.file(Path.join(distPath, scriptUri)).with(Vscode$Guacamole.Uri.makeChange(undefined, undefined, undefined, undefined, "vscode-resource", /* () */0));
    var metaContent = "default-src 'none'; img-src vscode-resource: https:; script-src 'nonce-" + (nonce + "';style-src vscode-resource: 'unsafe-inline' http: https: data:;");
    return "\n        <!DOCTYPE html>\n              <html lang=\"en\">\n              <head>\n                <meta charset=\"utf-8\">\n                <meta name=\"viewport\" content=\"width=device-width,initial-scale=1,shrink-to-fit=no\">\n                <meta name=\"theme-color\" content=\"#000000\">\n                <title>React App</title>\n                <link rel=\"stylesheet\" type=\"text/css\" href=\"" + (String(styleUri$1) + ("\">\n                <meta http-equiv=\"Content-Security-Policy\" content=\"" + (String(metaContent) + ("\">\n              </head>\n              <body>\n                <noscript>You need to enable JavaScript to run this app.</noscript>\n                <div id=\"root\"></div>\n                <script nonce=\"" + (String(nonce) + ("\" src=\"" + (String(scriptUri$1) + "\"></script>\n              </body>\n              </html>\n        ")))))));
  };
  var createPanel = function (context, editor) {
    var distPath = Path.join(Curry._1(getExtensionPath, context), "dist");
    var fileName = Path.basename(editor.document.fileName, ".gcl");
    var panel = Vscode.window.createWebviewPanel("panel", "GCL [" + (fileName + "]"), {
          preserveFocus: true,
          viewColumn: 3
        }, Vscode$Guacamole.WebviewAndWebviewPanelOptions.make(undefined, true, [Vscode.Uri.file(distPath)], undefined, undefined, true, /* () */0));
    panel.webview.html = html(distPath, "style.css", "bundled-view.js");
    return panel;
  };
  var moveToBottom = function (param) {
    return Vscode.commands.executeCommand("vscode.setEditorLayout", {
                orientation: 1,
                groups: [
                  Curry._1(Vscode$Guacamole.Commands.Layout.sized, {
                        groups: [Vscode$Guacamole.Commands.Layout.simple],
                        size: 0.5
                      }),
                  Curry._1(Vscode$Guacamole.Commands.Layout.sized, {
                        groups: [Vscode$Guacamole.Commands.Layout.simple],
                        size: 0.5
                      })
                ]
              });
  };
  var panel = createPanel(context, editor);
  moveToBottom(/* () */0);
  var onResponse = Event$Guacamole.make(/* () */0);
  context.subscriptions.push(panel.webview.onDidReceiveMessage((function (json) {
              var result;
              try {
                result = Curry._1(View$Guacamole.$$Response.decode, json);
              }
              catch (raw_e){
                var e = Caml_js_exceptions.internalToOCamlException(raw_e);
                console.log("[ panic ][ Webview.onDidReceiveMessage JSON decode error ]", e);
                return /* () */0;
              }
              return Curry._1(onResponse.emit, result);
            })));
  context.subscriptions.push(panel.onDidDispose((function (param) {
              return Curry._1(onResponse.emit, /* Destroyed */1);
            })));
  var view = {
    panel: panel,
    onResponse: onResponse,
    status: /* Uninitialized */Caml_chrome_debugger.simpleVariant("Uninitialized", [[]])
  };
  context.subscriptions.push(new Vscode.Disposable(Curry._1(view.onResponse.on, (function (param) {
                  if (typeof param === "number" && param === 0) {
                    var match = view.status;
                    if (match) {
                      view.status = /* Initialized */0;
                      return Belt_Array.forEach(match[0], (function (req) {
                                    send(view, req);
                                    return /* () */0;
                                  }));
                    } else {
                      return /* () */0;
                    }
                  } else {
                    return /* () */0;
                  }
                }))));
  return view;
}

function destroy(view) {
  view.panel.dispose();
  return Curry._1(view.onResponse.destroy, /* () */0);
}

function show(view) {
  return Vscode$Guacamole.WebviewPanel.reveal(view.panel, undefined, true, /* () */0);
}

function hide(_view) {
  return /* () */0;
}

exports.send = send;
exports.recv = recv;
exports.make = make;
exports.destroy = destroy;
exports.show = show;
exports.hide = hide;
/* path Not a pure module */

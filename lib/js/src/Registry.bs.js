// Generated by BUCKLESCRIPT, PLEASE EDIT WITH CARE
'use strict';

var Curry = require("bs-platform/lib/js/curry.js");
var Js_dict = require("bs-platform/lib/js/js_dict.js");
var $$Promise = require("reason-promise/lib/js/src/js/promise.js");
var Belt_List = require("bs-platform/lib/js/belt_List.js");
var Belt_Array = require("bs-platform/lib/js/belt_Array.js");
var Belt_Option = require("bs-platform/lib/js/belt_Option.js");
var State$Guacamole = require("./State.bs.js");
var TaskRunner$Guacamole = require("./Task/TaskRunner.bs.js");

function Impl(Editor) {
  var State = State$Guacamole.Impl(Editor);
  var TaskRunner = TaskRunner$Guacamole.Impl(Editor);
  var dict = { };
  var get = function (fileName) {
    return Js_dict.get(dict, fileName);
  };
  var getByEditor = function (editor) {
    return Belt_Option.flatMap(Curry._1(Editor.getFileName, Curry._1(Editor.getDocument, editor)), get);
  };
  var add = function (fileName, dispatcher) {
    var match = Js_dict.get(dict, fileName);
    if (match !== undefined) {
      return ;
    } else {
      dict[fileName] = dispatcher;
      return ;
    }
  };
  var rename = function (oldName, newName) {
    var delete_ = (function (dict, key) {delete dict[key]});
    return Belt_Option.forEach(Js_dict.get(dict, oldName), (function (state) {
                  console.log("[ states ][ rename ]", oldName, newName);
                  delete_(dict, oldName);
                  return add(newName, state);
                }));
  };
  var remove = function (fileName) {
    var delete_ = (function (dict, key) {delete dict[key]});
    return delete_(dict, fileName);
  };
  var destroy = function (fileName) {
    return $$Promise.get(Belt_Option.mapWithDefault(Js_dict.get(dict, fileName), $$Promise.resolved(undefined), (function (param) {
                      console.log("[ states ][ destroy ]");
                      Curry._1(State.destroy, param[0]);
                      return Curry._1(TaskRunner.destroy, param[1]);
                    })), (function (param) {
                  return remove(fileName);
                }));
  };
  var contains = function (fileName) {
    return Belt_Option.isSome(Js_dict.get(dict, fileName));
  };
  var destroyAll = function (param) {
    return $$Promise.get($$Promise.all(Belt_List.fromArray(Belt_Array.map(Js_dict.entries(dict), (function (param) {
                              var match = param[1];
                              console.log("[ states ][ destroy ]");
                              Curry._1(State.destroy, match[0]);
                              return Curry._1(TaskRunner.destroy, match[1]);
                            })))), (function (param) {
                  
                }));
  };
  return {
          State: State,
          TaskRunner: TaskRunner,
          dict: dict,
          get: get,
          getByEditor: getByEditor,
          add: add,
          rename: rename,
          remove: remove,
          destroy: destroy,
          contains: contains,
          destroyAll: destroyAll
        };
}

exports.Impl = Impl;
/* Promise Not a pure module */

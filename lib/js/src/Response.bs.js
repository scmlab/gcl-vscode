// Generated by ReScript, PLEASE EDIT WITH CARE
'use strict';

var Belt_Array = require("bs-platform/lib/js/belt_Array.js");
var Json_decode = require("@glennsl/bs-json/lib/js/src/Json_decode.bs.js");
var Json_encode = require("@glennsl/bs-json/lib/js/src/Json_encode.bs.js");
var GCL$Guacamole = require("./GCL.bs.js");
var Util$Guacamole = require("./Util/Util.bs.js");
var Element$Guacamole = require("./View/Element.bs.js");

function toString(x) {
  switch (x.TAG | 0) {
    case /* AtAbort */0 :
        return "Abort";
    case /* AtSkip */1 :
        return "Skip";
    case /* AtSpec */2 :
        return "Spec";
    case /* AtAssignment */3 :
        return "Assignment";
    case /* AtAssertion */4 :
        return "Assertion";
    case /* AtLoopInvariant */5 :
        return "Loop Invariant";
    case /* AtIf */6 :
        return "Conditional";
    case /* AtLoop */7 :
        return "Loop";
    case /* AtTermination */8 :
        return "Termination";
    case /* AtBoundDecrement */9 :
        return "Bound Decrement";
    
  }
}

function locOf(x) {
  return x._0;
}

var decode = Util$Guacamole.Decode.sum(function (x) {
      switch (x) {
        case "AtAbort" :
            return {
                    TAG: 0,
                    _0: (function (param) {
                        return Json_decode.map((function (x) {
                                      return {
                                              TAG: 0,
                                              _0: x,
                                              [Symbol.for("name")]: "AtAbort"
                                            };
                                    }), GCL$Guacamole.Loc.decode, param);
                      }),
                    [Symbol.for("name")]: "Contents"
                  };
        case "AtAssertion" :
            return {
                    TAG: 0,
                    _0: (function (param) {
                        return Json_decode.map((function (x) {
                                      return {
                                              TAG: 4,
                                              _0: x,
                                              [Symbol.for("name")]: "AtAssertion"
                                            };
                                    }), GCL$Guacamole.Loc.decode, param);
                      }),
                    [Symbol.for("name")]: "Contents"
                  };
        case "AtAssignment" :
            return {
                    TAG: 0,
                    _0: (function (param) {
                        return Json_decode.map((function (x) {
                                      return {
                                              TAG: 3,
                                              _0: x,
                                              [Symbol.for("name")]: "AtAssignment"
                                            };
                                    }), GCL$Guacamole.Loc.decode, param);
                      }),
                    [Symbol.for("name")]: "Contents"
                  };
        case "AtBoundDecrement" :
            return {
                    TAG: 0,
                    _0: (function (param) {
                        return Json_decode.map((function (x) {
                                      return {
                                              TAG: 9,
                                              _0: x,
                                              [Symbol.for("name")]: "AtBoundDecrement"
                                            };
                                    }), GCL$Guacamole.Loc.decode, param);
                      }),
                    [Symbol.for("name")]: "Contents"
                  };
        case "AtIf" :
            return {
                    TAG: 0,
                    _0: (function (param) {
                        return Json_decode.map((function (x) {
                                      return {
                                              TAG: 6,
                                              _0: x,
                                              [Symbol.for("name")]: "AtIf"
                                            };
                                    }), GCL$Guacamole.Loc.decode, param);
                      }),
                    [Symbol.for("name")]: "Contents"
                  };
        case "AtLoop" :
            return {
                    TAG: 0,
                    _0: (function (param) {
                        return Json_decode.map((function (x) {
                                      return {
                                              TAG: 7,
                                              _0: x,
                                              [Symbol.for("name")]: "AtLoop"
                                            };
                                    }), GCL$Guacamole.Loc.decode, param);
                      }),
                    [Symbol.for("name")]: "Contents"
                  };
        case "AtLoopInvariant" :
            return {
                    TAG: 0,
                    _0: (function (param) {
                        return Json_decode.map((function (x) {
                                      return {
                                              TAG: 5,
                                              _0: x,
                                              [Symbol.for("name")]: "AtLoopInvariant"
                                            };
                                    }), GCL$Guacamole.Loc.decode, param);
                      }),
                    [Symbol.for("name")]: "Contents"
                  };
        case "AtSkip" :
            return {
                    TAG: 0,
                    _0: (function (param) {
                        return Json_decode.map((function (x) {
                                      return {
                                              TAG: 1,
                                              _0: x,
                                              [Symbol.for("name")]: "AtSkip"
                                            };
                                    }), GCL$Guacamole.Loc.decode, param);
                      }),
                    [Symbol.for("name")]: "Contents"
                  };
        case "AtSpec" :
            return {
                    TAG: 0,
                    _0: (function (param) {
                        return Json_decode.map((function (x) {
                                      return {
                                              TAG: 2,
                                              _0: x,
                                              [Symbol.for("name")]: "AtSpec"
                                            };
                                    }), GCL$Guacamole.Loc.decode, param);
                      }),
                    [Symbol.for("name")]: "Contents"
                  };
        case "AtTermination" :
            return {
                    TAG: 0,
                    _0: (function (param) {
                        return Json_decode.map((function (x) {
                                      return {
                                              TAG: 8,
                                              _0: x,
                                              [Symbol.for("name")]: "AtTermination"
                                            };
                                    }), GCL$Guacamole.Loc.decode, param);
                      }),
                    [Symbol.for("name")]: "Contents"
                  };
        default:
          throw {
                RE_EXN_ID: Json_decode.DecodeError,
                _1: "Unknown constructor: " + x,
                Error: new Error()
              };
      }
    });

function encode(x) {
  switch (x.TAG | 0) {
    case /* AtAbort */0 :
        return Json_encode.object_({
                    hd: [
                      "tag",
                      "AtAbort"
                    ],
                    tl: {
                      hd: [
                        "contents",
                        GCL$Guacamole.Loc.encode(x._0)
                      ],
                      tl: /* [] */0
                    }
                  });
    case /* AtSkip */1 :
        return Json_encode.object_({
                    hd: [
                      "tag",
                      "AtSkip"
                    ],
                    tl: {
                      hd: [
                        "contents",
                        GCL$Guacamole.Loc.encode(x._0)
                      ],
                      tl: /* [] */0
                    }
                  });
    case /* AtSpec */2 :
        return Json_encode.object_({
                    hd: [
                      "tag",
                      "AtSpec"
                    ],
                    tl: {
                      hd: [
                        "contents",
                        GCL$Guacamole.Loc.encode(x._0)
                      ],
                      tl: /* [] */0
                    }
                  });
    case /* AtAssignment */3 :
        return Json_encode.object_({
                    hd: [
                      "tag",
                      "AtAssignment"
                    ],
                    tl: {
                      hd: [
                        "contents",
                        GCL$Guacamole.Loc.encode(x._0)
                      ],
                      tl: /* [] */0
                    }
                  });
    case /* AtAssertion */4 :
        return Json_encode.object_({
                    hd: [
                      "tag",
                      "AtAssertion"
                    ],
                    tl: {
                      hd: [
                        "contents",
                        GCL$Guacamole.Loc.encode(x._0)
                      ],
                      tl: /* [] */0
                    }
                  });
    case /* AtLoopInvariant */5 :
        return Json_encode.object_({
                    hd: [
                      "tag",
                      "AtLoopInvariant"
                    ],
                    tl: {
                      hd: [
                        "contents",
                        GCL$Guacamole.Loc.encode(x._0)
                      ],
                      tl: /* [] */0
                    }
                  });
    case /* AtIf */6 :
        return Json_encode.object_({
                    hd: [
                      "tag",
                      "AtIf"
                    ],
                    tl: {
                      hd: [
                        "contents",
                        GCL$Guacamole.Loc.encode(x._0)
                      ],
                      tl: /* [] */0
                    }
                  });
    case /* AtLoop */7 :
        return Json_encode.object_({
                    hd: [
                      "tag",
                      "AtLoop"
                    ],
                    tl: {
                      hd: [
                        "contents",
                        GCL$Guacamole.Loc.encode(x._0)
                      ],
                      tl: /* [] */0
                    }
                  });
    case /* AtTermination */8 :
        return Json_encode.object_({
                    hd: [
                      "tag",
                      "AtTermination"
                    ],
                    tl: {
                      hd: [
                        "contents",
                        GCL$Guacamole.Loc.encode(x._0)
                      ],
                      tl: /* [] */0
                    }
                  });
    case /* AtBoundDecrement */9 :
        return Json_encode.object_({
                    hd: [
                      "tag",
                      "AtBoundDecrement"
                    ],
                    tl: {
                      hd: [
                        "contents",
                        GCL$Guacamole.Loc.encode(x._0)
                      ],
                      tl: /* [] */0
                    }
                  });
    
  }
}

var Origin = {
  toString: toString,
  locOf: locOf,
  decode: decode,
  encode: encode
};

function decode$1(param) {
  return Json_decode.map((function (param) {
                return {
                        _0: param[0],
                        _1: param[1],
                        _2: param[2],
                        _3: param[3],
                        [Symbol.for("name")]: "ProofObligation"
                      };
              }), (function (param) {
                return Json_decode.tuple4(Json_decode.$$int, GCL$Guacamole.Syntax.Pred.decode, GCL$Guacamole.Syntax.Pred.decode, decode, param);
              }), param);
}

function encode$1(x) {
  return Json_encode.tuple4((function (prim) {
                return prim;
              }), GCL$Guacamole.Syntax.Pred.encode, GCL$Guacamole.Syntax.Pred.encode, encode, [
              x._0,
              x._1,
              x._2,
              x._3
            ]);
}

var ProofObligation = {
  decode: decode$1,
  encode: encode$1
};

function destroy(self) {
  return Belt_Array.forEach(self.decorations, (function (prim) {
                prim.dispose();
                
              }));
}

function decode$2(json) {
  return {
          id: Json_decode.field("specID", Json_decode.$$int, json),
          pre: Json_decode.field("specPreCond", GCL$Guacamole.Syntax.Pred.decode, json),
          post: Json_decode.field("specPostCond", GCL$Guacamole.Syntax.Pred.decode, json),
          loc: Json_decode.field("specLoc", GCL$Guacamole.Loc.decode, json),
          decorations: []
        };
}

var Specification = {
  destroy: destroy,
  decode: decode$2
};

var decode$3 = GCL$Guacamole.Syntax.Expr.decode;

var encode$2 = GCL$Guacamole.Syntax.Expr.encode;

var GlobalProp = {
  decode: decode$3,
  encode: encode$2
};

var decode$4 = Util$Guacamole.Decode.sum(function (x) {
      switch (x) {
        case "ResConsoleLog" :
            return {
                    TAG: 0,
                    _0: (function (param) {
                        return Json_decode.map((function (i) {
                                      return {
                                              TAG: 6,
                                              _0: i,
                                              [Symbol.for("name")]: "ConsoleLog"
                                            };
                                    }), Json_decode.string, param);
                      }),
                    [Symbol.for("name")]: "Contents"
                  };
        case "ResError" :
            return {
                    TAG: 0,
                    _0: (function (param) {
                        return Json_decode.map((function (errors) {
                                      return {
                                              TAG: 0,
                                              _0: errors,
                                              [Symbol.for("name")]: "Error"
                                            };
                                    }), (function (param) {
                                      return Json_decode.array(Element$Guacamole.Block.decode, param);
                                    }), param);
                      }),
                    [Symbol.for("name")]: "Contents"
                  };
        case "ResInspect" :
            return {
                    TAG: 0,
                    _0: (function (param) {
                        return Json_decode.map((function (pos) {
                                      return {
                                              TAG: 2,
                                              _0: pos,
                                              [Symbol.for("name")]: "Inspect"
                                            };
                                    }), (function (param) {
                                      return Json_decode.array(decode$1, param);
                                    }), param);
                      }),
                    [Symbol.for("name")]: "Contents"
                  };
        case "ResOK" :
            return {
                    TAG: 0,
                    _0: (function (param) {
                        return Json_decode.map((function (param) {
                                      return {
                                              TAG: 1,
                                              _0: param[0],
                                              _1: param[1],
                                              _2: param[2],
                                              _3: param[3],
                                              _4: param[4],
                                              [Symbol.for("name")]: "OK"
                                            };
                                    }), (function (param) {
                                      return Util$Guacamole.Decode.tuple5(Json_decode.$$int, (function (param) {
                                                    return Json_decode.array(decode$1, param);
                                                  }), (function (param) {
                                                    return Json_decode.array(decode$2, param);
                                                  }), (function (param) {
                                                    return Json_decode.array(decode$3, param);
                                                  }), (function (param) {
                                                    return Json_decode.array(Element$Guacamole.Block.decode, param);
                                                  }), param);
                                    }), param);
                      }),
                    [Symbol.for("name")]: "Contents"
                  };
        case "ResResolve" :
            return {
                    TAG: 0,
                    _0: (function (param) {
                        return Json_decode.map((function (i) {
                                      return {
                                              TAG: 3,
                                              _0: i,
                                              [Symbol.for("name")]: "Resolve"
                                            };
                                    }), Json_decode.$$int, param);
                      }),
                    [Symbol.for("name")]: "Contents"
                  };
        case "ResSubstitute" :
            return {
                    TAG: 0,
                    _0: (function (param) {
                        return Json_decode.map((function (param) {
                                      return {
                                              TAG: 4,
                                              _0: param[0],
                                              _1: param[1],
                                              [Symbol.for("name")]: "Substitute"
                                            };
                                    }), (function (param) {
                                      return Json_decode.pair(Json_decode.$$int, GCL$Guacamole.Syntax.Expr.decode, param);
                                    }), param);
                      }),
                    [Symbol.for("name")]: "Contents"
                  };
        case "ResUpdateSpecPositions" :
            return {
                    TAG: 0,
                    _0: (function (param) {
                        return Json_decode.map((function (locs) {
                                      return {
                                              TAG: 5,
                                              _0: locs,
                                              [Symbol.for("name")]: "UpdateSpecPositions"
                                            };
                                    }), (function (param) {
                                      return Json_decode.array(GCL$Guacamole.Loc.decode, param);
                                    }), param);
                      }),
                    [Symbol.for("name")]: "Contents"
                  };
        default:
          throw {
                RE_EXN_ID: Json_decode.DecodeError,
                _1: "Unknown constructor: " + x,
                Error: new Error()
              };
      }
    });

var Kind = {
  decode: decode$4
};

var decode$5 = Util$Guacamole.Decode.sum(function (x) {
      switch (x) {
        case "CannotDecodeRequest" :
            return {
                    TAG: 0,
                    _0: (function (param) {
                        return Json_decode.map((function (msg) {
                                      return {
                                              TAG: 2,
                                              _0: msg,
                                              [Symbol.for("name")]: "CannotDecodeRequest"
                                            };
                                    }), Json_decode.string, param);
                      }),
                    [Symbol.for("name")]: "Contents"
                  };
        case "NotLoaded" :
            return {
                    TAG: 1,
                    _0: (function (param) {
                        return /* NotLoaded */0;
                      }),
                    [Symbol.for("name")]: "TagOnly"
                  };
        case "Res" :
            return {
                    TAG: 0,
                    _0: (function (param) {
                        return Json_decode.map((function (param) {
                                      return {
                                              TAG: 0,
                                              _0: param[0],
                                              _1: param[1],
                                              [Symbol.for("name")]: "Res"
                                            };
                                    }), (function (param) {
                                      return Json_decode.pair(Json_decode.string, (function (param) {
                                                    return Json_decode.array(decode$4, param);
                                                  }), param);
                                    }), param);
                      }),
                    [Symbol.for("name")]: "Contents"
                  };
        default:
          throw {
                RE_EXN_ID: Json_decode.DecodeError,
                _1: "Unknown constructor: " + x,
                Error: new Error()
              };
      }
    });

exports.Origin = Origin;
exports.ProofObligation = ProofObligation;
exports.Specification = Specification;
exports.GlobalProp = GlobalProp;
exports.Kind = Kind;
exports.decode = decode$5;
/* decode Not a pure module */
